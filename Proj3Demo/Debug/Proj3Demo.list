
Proj3Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08008f58  08008f58  00018f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800938c  0800938c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009394  08009394  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800939c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049ec  20000074  08009410  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a60  08009410  00024a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b46  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004129  00000000  00000000  00041bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  00045d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001690  00000000  00000000  000475a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aff8  00000000  00000000  00048c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001556f  00000000  00000000  00073c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fee93  00000000  00000000  0008919f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006814  00000000  00000000  001880b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f40 	.word	0x08008f40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008f40 	.word	0x08008f40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <update_breaks_metrics>:
 * Updates the metrics of the break info for a teller
 * [BreakS*]  break_info   - Pointer to the break information to be changed
 * [uint32_t] break_length - Length of the break to be taken
 * */
void update_breaks_metrics(BreakS* break_info, uint32_t break_length)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
    break_info->num++;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
    break_info->total += break_length;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	605a      	str	r2, [r3, #4]
    if (break_length < break_info->shortest)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d203      	bcs.n	80005b2 <update_breaks_metrics+0x32>
    {
        break_info->shortest = break_length;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	609a      	str	r2, [r3, #8]
    else if ( break_length > break_info->longest)
    {
        break_info->longest = break_length;
    }

}
 80005b0:	e007      	b.n	80005c2 <update_breaks_metrics+0x42>
    else if ( break_length > break_info->longest)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d902      	bls.n	80005c2 <update_breaks_metrics+0x42>
        break_info->longest = break_length;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	60da      	str	r2, [r3, #12]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <generate_break_length>:
 * Randomly generate a break length using RNG function of STM32 peripheral
 * Inputs: None
 * Returns: Randomly generated number between 1 minute and 4 minutes
 * */
unsigned int generate_break_length(unsigned int random_time)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    return ((random_time % DIFF_BREAK_LENGTH) + MIN_BREAK_LENGTH);
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	0893      	lsrs	r3, r2, #2
 80005dc:	4907      	ldr	r1, [pc, #28]	; (80005fc <generate_break_length+0x2c>)
 80005de:	fba1 1303 	umull	r1, r3, r1, r3
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	21b4      	movs	r1, #180	; 0xb4
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	333c      	adds	r3, #60	; 0x3c
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	16c16c17 	.word	0x16c16c17

08000600 <generate_time_until_break>:
 * Randomly generate when a teller can take their next breakusing RNG function of STM32 peripheral
 * Inputs: None
 * Returns: Randomly generated number between 30 minutes and 60 minutes
 * */
unsigned int generate_time_until_break(unsigned int random_time)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

    return ((random_time % DIFF_TIME_UNTIL_BREAK) + MIN_TIME_UNTIL_BREAK);
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <generate_time_until_break+0x2c>)
 800060c:	fba3 1302 	umull	r1, r3, r3, r2
 8000610:	0a9b      	lsrs	r3, r3, #10
 8000612:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	91a2b3c5 	.word	0x91a2b3c5

08000630 <Generate_Customer>:
 * Allocates memory for customer and generates random interactino time for them
 * Inputs: None
 * Returns: Pointer to new customer
 * */
CustomerS* Generate_Customer(unsigned int random_time)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    CustomerS* new_customer = (CustomerS*) pvPortMalloc(sizeof(CustomerS));
 8000638:	200c      	movs	r0, #12
 800063a:	f007 fe71 	bl	8008320 <pvPortMalloc>
 800063e:	4603      	mov	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]
    new_customer->time_joined = 0;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
    new_customer->interaction_time = generate_interaction_time(random_time);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f809 	bl	8000660 <generate_interaction_time>
 800064e:	4602      	mov	r2, r0
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	609a      	str	r2, [r3, #8]
    return new_customer;
 8000654:	68fb      	ldr	r3, [r7, #12]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <generate_interaction_time>:
 * Randomly generates an interaction time for customers (between 30 seconds and 4 minutes)
 * Inputs: None
 * Returns: Random time
 * */
static unsigned int generate_interaction_time(unsigned int random_time)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_INTERACTION_TIME;
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <generate_interaction_time+0x2c>)
 800066c:	fba3 1302 	umull	r1, r3, r3, r2
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	331e      	adds	r3, #30
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	91a2b3c5 	.word	0x91a2b3c5

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f001 fa9e 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f862 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f996 	bl	80009cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 f964 	bl	800096c <MX_USART2_UART_Init>
  MX_RNG_Init();
 80006a4:	f000 f8f8 	bl	8000898 <MX_RNG_Init>
  MX_TIM2_Init();
 80006a8:	f000 f90a 	bl	80008c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006ac:	481b      	ldr	r0, [pc, #108]	; (800071c <main+0x8c>)
 80006ae:	f003 f9cd 	bl	8003a4c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80006b2:	f004 fd3f 	bl	8005134 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80006b6:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <main+0x90>)
 80006b8:	2101      	movs	r1, #1
 80006ba:	2001      	movs	r0, #1
 80006bc:	f004 fe78 	bl	80053b0 <osSemaphoreNew>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <main+0x94>)
 80006c4:	601a      	str	r2, [r3, #0]

  /* creation of printBinarySem */
  printBinarySemHandle = osSemaphoreNew(1, 1, &printBinarySem_attributes);
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <main+0x98>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	2001      	movs	r0, #1
 80006cc:	f004 fe70 	bl	80053b0 <osSemaphoreNew>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <main+0x9c>)
 80006d4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <main+0xa0>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4816      	ldr	r0, [pc, #88]	; (8000734 <main+0xa4>)
 80006dc:	f004 fd94 	bl	8005208 <osThreadNew>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <main+0xa8>)
 80006e4:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread1 */
  TellerThread1Handle = osThreadNew(StartTask02, NULL, &TellerThread1_attributes);
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <main+0xac>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4815      	ldr	r0, [pc, #84]	; (8000740 <main+0xb0>)
 80006ec:	f004 fd8c 	bl	8005208 <osThreadNew>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <main+0xb4>)
 80006f4:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread2 */
  TellerThread2Handle = osThreadNew(StartTask03, NULL, &TellerThread2_attributes);
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <main+0xb8>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4814      	ldr	r0, [pc, #80]	; (800074c <main+0xbc>)
 80006fc:	f004 fd84 	bl	8005208 <osThreadNew>
 8000700:	4602      	mov	r2, r0
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <main+0xc0>)
 8000704:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread3 */
  TellerThread3Handle = osThreadNew(StartTask04, NULL, &TellerThread3_attributes);
 8000706:	4a13      	ldr	r2, [pc, #76]	; (8000754 <main+0xc4>)
 8000708:	2100      	movs	r1, #0
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <main+0xc8>)
 800070c:	f004 fd7c 	bl	8005208 <osThreadNew>
 8000710:	4602      	mov	r2, r0
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <main+0xcc>)
 8000714:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000716:	f004 fd41 	bl	800519c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	e7fe      	b.n	800071a <main+0x8a>
 800071c:	20004910 	.word	0x20004910
 8000720:	080092f0 	.word	0x080092f0
 8000724:	2000490c 	.word	0x2000490c
 8000728:	08009300 	.word	0x08009300
 800072c:	200048f8 	.word	0x200048f8
 8000730:	08009260 	.word	0x08009260
 8000734:	08000dcd 	.word	0x08000dcd
 8000738:	200048f0 	.word	0x200048f0
 800073c:	08009284 	.word	0x08009284
 8000740:	08001275 	.word	0x08001275
 8000744:	200049d4 	.word	0x200049d4
 8000748:	080092a8 	.word	0x080092a8
 800074c:	080012c9 	.word	0x080012c9
 8000750:	200049d0 	.word	0x200049d0
 8000754:	080092cc 	.word	0x080092cc
 8000758:	08001595 	.word	0x08001595
 800075c:	200048f4 	.word	0x200048f4

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0b8      	sub	sp, #224	; 0xe0
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800076a:	2244      	movs	r2, #68	; 0x44
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f007 ffe1 	bl	8008736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2288      	movs	r2, #136	; 0x88
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f007 ffd3 	bl	8008736 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000790:	f001 fd42 	bl	8002218 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <SystemClock_Config+0x130>)
 8000796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800079a:	4a3d      	ldr	r2, [pc, #244]	; (8000890 <SystemClock_Config+0x130>)
 800079c:	f023 0318 	bic.w	r3, r3, #24
 80007a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007a4:	2314      	movs	r3, #20
 80007a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c8:	2301      	movs	r3, #1
 80007ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007d4:	2328      	movs	r3, #40	; 0x28
 80007d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007da:	2307      	movs	r3, #7
 80007dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fd85 	bl	8002300 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007fc:	f000 fee4 	bl	80015c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800081e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000822:	2104      	movs	r1, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f002 f951 	bl	8002acc <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000830:	f000 feca 	bl	80015c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <SystemClock_Config+0x134>)
 8000836:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000838:	2300      	movs	r3, #0
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800083c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000840:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000842:	2301      	movs	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800084a:	2310      	movs	r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800084e:	2307      	movs	r3, #7
 8000850:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800085a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800085e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fb68 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x112>
  {
    Error_Handler();
 800086e:	f000 feab 	bl	80015c8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000872:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000876:	f001 fced 	bl	8002254 <HAL_PWREx_ControlVoltageScaling>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000880:	f000 fea2 	bl	80015c8 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000884:	f002 fe3e 	bl	8003504 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000888:	bf00      	nop
 800088a:	37e0      	adds	r7, #224	; 0xe0
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	00040002 	.word	0x00040002

08000898 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_RNG_Init+0x20>)
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <MX_RNG_Init+0x24>)
 80008a0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_RNG_Init+0x20>)
 80008a4:	f003 f808 	bl	80038b8 <HAL_RNG_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008ae:	f000 fe8b 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200048fc 	.word	0x200048fc
 80008bc:	50060800 	.word	0x50060800

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_TIM2_Init+0xa8>)
 80008e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 13332;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_TIM2_Init+0xa8>)
 80008e8:	f243 4214 	movw	r2, #13332	; 0x3414
 80008ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_TIM2_Init+0xa8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_TIM2_Init+0xa8>)
 80008f6:	220a      	movs	r2, #10
 80008f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_TIM2_Init+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_TIM2_Init+0xa8>)
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000906:	4818      	ldr	r0, [pc, #96]	; (8000968 <MX_TIM2_Init+0xa8>)
 8000908:	f003 f875 	bl	80039f6 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000912:	f000 fe59 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_TIM2_Init+0xa8>)
 8000924:	f003 f9db 	bl	8003cde <HAL_TIM_ConfigClockSource>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800092e:	f000 fe4b 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <MX_TIM2_Init+0xa8>)
 8000940:	f003 fbe2 	bl	8004108 <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800094a:	f000 fe3d 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	201c      	movs	r0, #28
 8000954:	f001 fa34 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000958:	201c      	movs	r0, #28
 800095a:	f001 fa4d 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20004910 	.word	0x20004910

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART2_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009b0:	f003 fc50 	bl	8004254 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 fe05 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20004950 	.word	0x20004950
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e2:	4bb7      	ldr	r3, [pc, #732]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4ab6      	ldr	r2, [pc, #728]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4bb4      	ldr	r3, [pc, #720]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4bb1      	ldr	r3, [pc, #708]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4ab0      	ldr	r2, [pc, #704]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4bae      	ldr	r3, [pc, #696]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	4bab      	ldr	r3, [pc, #684]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4aaa      	ldr	r2, [pc, #680]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4ba8      	ldr	r3, [pc, #672]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4ba5      	ldr	r3, [pc, #660]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4aa4      	ldr	r2, [pc, #656]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4ba2      	ldr	r3, [pc, #648]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b9f      	ldr	r3, [pc, #636]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a9e      	ldr	r2, [pc, #632]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b9c      	ldr	r3, [pc, #624]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	4b99      	ldr	r3, [pc, #612]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a98      	ldr	r2, [pc, #608]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b96      	ldr	r3, [pc, #600]	; (8000cc0 <MX_GPIO_Init+0x2f4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f240 1109 	movw	r1, #265	; 0x109
 8000a78:	4892      	ldr	r0, [pc, #584]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000a7a:	f001 fbb5 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210c      	movs	r1, #12
 8000a82:	4891      	ldr	r0, [pc, #580]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000a84:	f001 fbb0 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	488f      	ldr	r0, [pc, #572]	; (8000ccc <MX_GPIO_Init+0x300>)
 8000a90:	f001 fbaa 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	488c      	ldr	r0, [pc, #560]	; (8000ccc <MX_GPIO_Init+0x300>)
 8000a9c:	f001 fba4 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	488a      	ldr	r0, [pc, #552]	; (8000cd0 <MX_GPIO_Init+0x304>)
 8000aa6:	f001 fb9f 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 8000aaa:	23f4      	movs	r3, #244	; 0xf4
 8000aac:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000aba:	230d      	movs	r3, #13
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	487f      	ldr	r0, [pc, #508]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000ac6:	f001 f9e7 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000aca:	2308      	movs	r3, #8
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4878      	ldr	r0, [pc, #480]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000ae2:	f001 f9d9 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000ae6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aec:	4b79      	ldr	r3, [pc, #484]	; (8000cd4 <MX_GPIO_Init+0x308>)
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4874      	ldr	r0, [pc, #464]	; (8000ccc <MX_GPIO_Init+0x300>)
 8000afc:	f001 f9cc 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000b00:	2307      	movs	r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	486e      	ldr	r0, [pc, #440]	; (8000ccc <MX_GPIO_Init+0x300>)
 8000b14:	f001 f9c0 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000b18:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000b1c:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b2a:	230b      	movs	r3, #11
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4865      	ldr	r0, [pc, #404]	; (8000ccc <MX_GPIO_Init+0x300>)
 8000b36:	f001 f9af 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000b3a:	232f      	movs	r3, #47	; 0x2f
 8000b3c:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f001 f9a2 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b54:	2310      	movs	r3, #16
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b58:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <MX_GPIO_Init+0x308>)
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f001 f995 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000b6e:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000b72:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b80:	230b      	movs	r3, #11
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f001 f983 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000b92:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000b96:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4846      	ldr	r0, [pc, #280]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000bb0:	f001 f972 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	483f      	ldr	r0, [pc, #252]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000bcc:	f001 f964 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4836      	ldr	r0, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000bea:	f001 f955 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c00:	230d      	movs	r3, #13
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000c0c:	f001 f944 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000c10:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000c14:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c22:	230a      	movs	r3, #10
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4825      	ldr	r0, [pc, #148]	; (8000cc4 <MX_GPIO_Init+0x2f8>)
 8000c2e:	f001 f933 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_I2C_SLC_Pin MFX_I2C_SDA_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000c32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c44:	2304      	movs	r3, #4
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <MX_GPIO_Init+0x2fc>)
 8000c50:	f001 f922 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000c54:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c58:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000c66:	230b      	movs	r3, #11
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <MX_GPIO_Init+0x304>)
 8000c72:	f001 f911 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000c76:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <MX_GPIO_Init+0x300>)
 8000c90:	f001 f902 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f001 f8f0 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	e00c      	b.n	8000cd8 <MX_GPIO_Init+0x30c>
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48001000 	.word	0x48001000
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	48000c00 	.word	0x48000c00
 8000cd4:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd8:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0x3f0>)
 8000cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4836      	ldr	r0, [pc, #216]	; (8000dc0 <MX_GPIO_Init+0x3f4>)
 8000ce8:	f001 f8d6 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_SCK_Pin MEMS_MISO_Pin MEMS_MOSI_Pin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000cec:	231a      	movs	r3, #26
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	482e      	ldr	r0, [pc, #184]	; (8000dc0 <MX_GPIO_Init+0x3f4>)
 8000d08:	f001 f8c6 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	4827      	ldr	r0, [pc, #156]	; (8000dc0 <MX_GPIO_Init+0x3f4>)
 8000d24:	f001 f8b8 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4821      	ldr	r0, [pc, #132]	; (8000dc4 <MX_GPIO_Init+0x3f8>)
 8000d40:	f001 f8aa 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d44:	23c0      	movs	r3, #192	; 0xc0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d48:	2312      	movs	r3, #18
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d54:	2304      	movs	r3, #4
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <MX_GPIO_Init+0x3f8>)
 8000d60:	f001 f89a 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_GPIO_Init+0x3f0>)
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <MX_GPIO_Init+0x3f8>)
 8000d7a:	f001 f88d 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <MX_GPIO_Init+0x3fc>)
 8000d96:	f001 f87f 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_GPIO_Init+0x3f0>)
 8000da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_GPIO_Init+0x3fc>)
 8000dae:	f001 f873 	bl	8001e98 <HAL_GPIO_Init>

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	48000c00 	.word	0x48000c00
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48001000 	.word	0x48001000

08000dcc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b09a      	sub	sp, #104	; 0x68
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
uint8_t buffer[64];
unsigned int random_time;
HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	48a2      	ldr	r0, [pc, #648]	; (8001064 <StartDefaultTask+0x298>)
 8000ddc:	f002 fdbc 	bl	8003958 <HAL_RNG_GenerateRandomNumber>
init_queue(&customer_queue,random_time);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4619      	mov	r1, r3
 8000de4:	48a0      	ldr	r0, [pc, #640]	; (8001068 <StartDefaultTask+0x29c>)
 8000de6:	f000 fbf6 	bl	80015d6 <init_queue>
	  //HAL_UART_Receive(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	  sprintf(buffer,"%u\r\n",rand);
	  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
	  */

	if(master_timer > MAX_TIME)
 8000dea:	4ba0      	ldr	r3, [pc, #640]	; (800106c <StartDefaultTask+0x2a0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f246 2270 	movw	r2, #25200	; 0x6270
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d919      	bls.n	8000e2a <StartDefaultTask+0x5e>
	{
		sprintf(buffer,"Time exceeded 4:00 pm\r\n");
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4a9d      	ldr	r2, [pc, #628]	; (8001070 <StartDefaultTask+0x2a4>)
 8000dfc:	461c      	mov	r4, r3
 8000dfe:	4615      	mov	r5, r2
 8000e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e08:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9dd 	bl	80001d0 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	4894      	ldr	r0, [pc, #592]	; (8001074 <StartDefaultTask+0x2a8>)
 8000e24:	f003 fa64 	bl	80042f0 <HAL_UART_Transmit>
		break;
 8000e28:	e050      	b.n	8000ecc <StartDefaultTask+0x100>
	}
	if(master_timer >= customer_queue.time_for_new_customer)
 8000e2a:	4b8f      	ldr	r3, [pc, #572]	; (8001068 <StartDefaultTask+0x29c>)
 8000e2c:	69da      	ldr	r2, [r3, #28]
 8000e2e:	4b8f      	ldr	r3, [pc, #572]	; (800106c <StartDefaultTask+0x2a0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d8d9      	bhi.n	8000dea <StartDefaultTask+0x1e>
	{
		sprintf(buffer,"Current size of queue: %u\r\n", customer_queue.size);
 8000e36:	4b8c      	ldr	r3, [pc, #560]	; (8001068 <StartDefaultTask+0x29c>)
 8000e38:	699a      	ldr	r2, [r3, #24]
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	498e      	ldr	r1, [pc, #568]	; (8001078 <StartDefaultTask+0x2ac>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f007 fc81 	bl	8008748 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff f9c0 	bl	80001d0 <strlen>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	f107 010c 	add.w	r1, r7, #12
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	4885      	ldr	r0, [pc, #532]	; (8001074 <StartDefaultTask+0x2a8>)
 8000e5e:	f003 fa47 	bl	80042f0 <HAL_UART_Transmit>
		if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK)
 8000e62:	4b86      	ldr	r3, [pc, #536]	; (800107c <StartDefaultTask+0x2b0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0bf      	beq.n	8000dea <StartDefaultTask+0x1e>
 8000e6a:	4b84      	ldr	r3, [pc, #528]	; (800107c <StartDefaultTask+0x2b0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fb3b 	bl	80054ec <osSemaphoreAcquire>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1b6      	bne.n	8000dea <StartDefaultTask+0x1e>
		{

			// Lock queue

			HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4619      	mov	r1, r3
 8000e82:	4878      	ldr	r0, [pc, #480]	; (8001064 <StartDefaultTask+0x298>)
 8000e84:	f002 fd68 	bl	8003958 <HAL_RNG_GenerateRandomNumber>
			unsigned int time_for_new_cust = generate_time_for_new_cust(random_time);
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fc6c 	bl	8001768 <generate_time_for_new_cust>
 8000e90:	64f8      	str	r0, [r7, #76]	; 0x4c
			customer_queue.time_for_new_customer = time_for_new_cust + master_timer;
 8000e92:	4b76      	ldr	r3, [pc, #472]	; (800106c <StartDefaultTask+0x2a0>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a73      	ldr	r2, [pc, #460]	; (8001068 <StartDefaultTask+0x29c>)
 8000e9c:	61d3      	str	r3, [r2, #28]

			HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	486f      	ldr	r0, [pc, #444]	; (8001064 <StartDefaultTask+0x298>)
 8000ea6:	f002 fd57 	bl	8003958 <HAL_RNG_GenerateRandomNumber>
			add_customer(&customer_queue,random_time);
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4619      	mov	r1, r3
 8000eae:	486e      	ldr	r0, [pc, #440]	; (8001068 <StartDefaultTask+0x29c>)
 8000eb0:	f000 fc1c 	bl	80016ec <add_customer>
			customer_queue.back_node->customer->time_joined = master_timer;
 8000eb4:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <StartDefaultTask+0x29c>)
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a6c      	ldr	r2, [pc, #432]	; (800106c <StartDefaultTask+0x2a0>)
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	601a      	str	r2, [r3, #0]
			// Unlock queue
			osSemaphoreRelease (myBinarySem01Handle);
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <StartDefaultTask+0x2b0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fb77 	bl	80055b8 <osSemaphoreRelease>
	if(master_timer > MAX_TIME)
 8000eca:	e78e      	b.n	8000dea <StartDefaultTask+0x1e>
		}
	}
  }
while(1)
{
	if (printBinarySemHandle != NULL && osSemaphoreAcquire(printBinarySemHandle,0) == osOK)
 8000ecc:	4b6c      	ldr	r3, [pc, #432]	; (8001080 <StartDefaultTask+0x2b4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0fb      	beq.n	8000ecc <StartDefaultTask+0x100>
 8000ed4:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <StartDefaultTask+0x2b4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fb06 	bl	80054ec <osSemaphoreAcquire>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f2      	bne.n	8000ecc <StartDefaultTask+0x100>
	{
		sprintf(buffer,"Total number customers served: %u\r\n",customer_queue.max_size);
 8000ee6:	4b60      	ldr	r3, [pc, #384]	; (8001068 <StartDefaultTask+0x29c>)
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4965      	ldr	r1, [pc, #404]	; (8001084 <StartDefaultTask+0x2b8>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 fc29 	bl	8008748 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f968 	bl	80001d0 <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f107 010c 	add.w	r1, r7, #12
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	4859      	ldr	r0, [pc, #356]	; (8001074 <StartDefaultTask+0x2a8>)
 8000f0e:	f003 f9ef 	bl	80042f0 <HAL_UART_Transmit>

		sprintf(buffer,"Teller 1's number of served customers: %u\r\n",tellers[0].total_served);
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <StartDefaultTask+0x2bc>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	495c      	ldr	r1, [pc, #368]	; (800108c <StartDefaultTask+0x2c0>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 fc13 	bl	8008748 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f952 	bl	80001d0 <strlen>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f107 010c 	add.w	r1, r7, #12
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	484e      	ldr	r0, [pc, #312]	; (8001074 <StartDefaultTask+0x2a8>)
 8000f3a:	f003 f9d9 	bl	80042f0 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
		// Teller 3
		//sprintf(buffer,"Teller 1's number of served customers: %u\r\n",tellers[0].total_served);
		//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);

		sprintf(buffer,"Average wait time in queue: %u minutes \r\n",(customer_queue.total_wait_time / 60) / (customer_queue.total_serviced));
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <StartDefaultTask+0x29c>)
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	4a53      	ldr	r2, [pc, #332]	; (8001090 <StartDefaultTask+0x2c4>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	095a      	lsrs	r2, r3, #5
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <StartDefaultTask+0x29c>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	494f      	ldr	r1, [pc, #316]	; (8001094 <StartDefaultTask+0x2c8>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f007 fbf5 	bl	8008748 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f934 	bl	80001d0 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f107 010c 	add.w	r1, r7, #12
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	483f      	ldr	r0, [pc, #252]	; (8001074 <StartDefaultTask+0x2a8>)
 8000f76:	f003 f9bb 	bl	80042f0 <HAL_UART_Transmit>

		sprintf(buffer,"Average time with teller: %u minutes \r\n",(customer_queue.total_interaction_time / 60) / (customer_queue.total_serviced));
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <StartDefaultTask+0x29c>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a44      	ldr	r2, [pc, #272]	; (8001090 <StartDefaultTask+0x2c4>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	095a      	lsrs	r2, r3, #5
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <StartDefaultTask+0x29c>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4941      	ldr	r1, [pc, #260]	; (8001098 <StartDefaultTask+0x2cc>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f007 fbd7 	bl	8008748 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff f916 	bl	80001d0 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f107 010c 	add.w	r1, r7, #12
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	4830      	ldr	r0, [pc, #192]	; (8001074 <StartDefaultTask+0x2a8>)
 8000fb2:	f003 f99d 	bl	80042f0 <HAL_UART_Transmit>

		sprintf(buffer,"Max time in queue: %u minutes \r\n", customer_queue.max_wait_time / 60);
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <StartDefaultTask+0x29c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a35      	ldr	r2, [pc, #212]	; (8001090 <StartDefaultTask+0x2c4>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	095a      	lsrs	r2, r3, #5
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4935      	ldr	r1, [pc, #212]	; (800109c <StartDefaultTask+0x2d0>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 fbbd 	bl	8008748 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f8fc 	bl	80001d0 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	4823      	ldr	r0, [pc, #140]	; (8001074 <StartDefaultTask+0x2a8>)
 8000fe6:	f003 f983 	bl	80042f0 <HAL_UART_Transmit>

    // Compute max time teller spent waiting for customer
    unsigned int teller_wait_time = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	667b      	str	r3, [r7, #100]	; 0x64
    for(int i = 0; i < NUM_TELLERS;i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8000ff2:	e016      	b.n	8001022 <StartDefaultTask+0x256>
    {
      if(tellers[i].max_wait_time > teller_wait_time)
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <StartDefaultTask+0x2bc>)
 8000ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ff8:	212c      	movs	r1, #44	; 0x2c
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	3310      	adds	r3, #16
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001006:	429a      	cmp	r2, r3
 8001008:	d208      	bcs.n	800101c <StartDefaultTask+0x250>
      {
        teller_wait_time = tellers[i].max_wait_time;
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <StartDefaultTask+0x2bc>)
 800100c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800100e:	212c      	movs	r1, #44	; 0x2c
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	4413      	add	r3, r2
 8001016:	3310      	adds	r3, #16
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	667b      	str	r3, [r7, #100]	; 0x64
    for(int i = 0; i < NUM_TELLERS;i++)
 800101c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800101e:	3301      	adds	r3, #1
 8001020:	663b      	str	r3, [r7, #96]	; 0x60
 8001022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001024:	2b02      	cmp	r3, #2
 8001026:	dde5      	ble.n	8000ff4 <StartDefaultTask+0x228>
      }
    }
    sprintf(buffer,"Max teller wait time for customer: %u minutes \r\n", teller_wait_time / 60);
 8001028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <StartDefaultTask+0x2c4>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	095a      	lsrs	r2, r3, #5
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	491a      	ldr	r1, [pc, #104]	; (80010a0 <StartDefaultTask+0x2d4>)
 8001038:	4618      	mov	r0, r3
 800103a:	f007 fb85 	bl	8008748 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f8c4 	bl	80001d0 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	f107 010c 	add.w	r1, r7, #12
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	4807      	ldr	r0, [pc, #28]	; (8001074 <StartDefaultTask+0x2a8>)
 8001056:	f003 f94b 	bl	80042f0 <HAL_UART_Transmit>

    unsigned int max_transaction_time = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(int i = 0; i < NUM_TELLERS;i++)
 800105e:	2300      	movs	r3, #0
 8001060:	65bb      	str	r3, [r7, #88]	; 0x58
 8001062:	e036      	b.n	80010d2 <StartDefaultTask+0x306>
 8001064:	200048fc 	.word	0x200048fc
 8001068:	20000090 	.word	0x20000090
 800106c:	200048ec 	.word	0x200048ec
 8001070:	08008fb4 	.word	0x08008fb4
 8001074:	20004950 	.word	0x20004950
 8001078:	08008fcc 	.word	0x08008fcc
 800107c:	2000490c 	.word	0x2000490c
 8001080:	200048f8 	.word	0x200048f8
 8001084:	08008fe8 	.word	0x08008fe8
 8001088:	200000bc 	.word	0x200000bc
 800108c:	0800900c 	.word	0x0800900c
 8001090:	88888889 	.word	0x88888889
 8001094:	08009038 	.word	0x08009038
 8001098:	08009064 	.word	0x08009064
 800109c:	0800908c 	.word	0x0800908c
 80010a0:	080090b0 	.word	0x080090b0
    {
      if(tellers[i].max_transaction_time > max_transaction_time)
 80010a4:	4a68      	ldr	r2, [pc, #416]	; (8001248 <StartDefaultTask+0x47c>)
 80010a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010a8:	212c      	movs	r1, #44	; 0x2c
 80010aa:	fb01 f303 	mul.w	r3, r1, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	330c      	adds	r3, #12
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d208      	bcs.n	80010cc <StartDefaultTask+0x300>
      {
        max_transaction_time = tellers[i].max_transaction_time;
 80010ba:	4a63      	ldr	r2, [pc, #396]	; (8001248 <StartDefaultTask+0x47c>)
 80010bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010be:	212c      	movs	r1, #44	; 0x2c
 80010c0:	fb01 f303 	mul.w	r3, r1, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	330c      	adds	r3, #12
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(int i = 0; i < NUM_TELLERS;i++)
 80010cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ce:	3301      	adds	r3, #1
 80010d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80010d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	dde5      	ble.n	80010a4 <StartDefaultTask+0x2d8>
      }
    }

    sprintf(buffer,"Max transaction time: %u minutes \r\n", max_transaction_time / 60);
 80010d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010da:	4a5c      	ldr	r2, [pc, #368]	; (800124c <StartDefaultTask+0x480>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	095a      	lsrs	r2, r3, #5
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	495a      	ldr	r1, [pc, #360]	; (8001250 <StartDefaultTask+0x484>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f007 fb2d 	bl	8008748 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f86c 	bl	80001d0 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f107 010c 	add.w	r1, r7, #12
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	4853      	ldr	r0, [pc, #332]	; (8001254 <StartDefaultTask+0x488>)
 8001106:	f003 f8f3 	bl	80042f0 <HAL_UART_Transmit>

    sprintf(buffer,"Max depth: %u\r\n", customer_queue.max_depth);
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <StartDefaultTask+0x48c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4952      	ldr	r1, [pc, #328]	; (800125c <StartDefaultTask+0x490>)
 8001114:	4618      	mov	r0, r3
 8001116:	f007 fb17 	bl	8008748 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f856 	bl	80001d0 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 010c 	add.w	r1, r7, #12
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	4848      	ldr	r0, [pc, #288]	; (8001254 <StartDefaultTask+0x488>)
 8001132:	f003 f8dd 	bl	80042f0 <HAL_UART_Transmit>

    sprintf(buffer,"Num breaks taken by teller 1: %u\r\n", tellers[0].break_info->num);
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <StartDefaultTask+0x47c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4947      	ldr	r1, [pc, #284]	; (8001260 <StartDefaultTask+0x494>)
 8001142:	4618      	mov	r0, r3
 8001144:	f007 fb00 	bl	8008748 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f83f 	bl	80001d0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	f107 010c 	add.w	r1, r7, #12
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	483d      	ldr	r0, [pc, #244]	; (8001254 <StartDefaultTask+0x488>)
 8001160:	f003 f8c6 	bl	80042f0 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
    

    
    //Teller 1
    sprintf(buffer,"Average length of breaks taken by teller 1: %u\r\n", tellers[0].break_info->total / tellers[0].break_info->num);
 8001164:	4b38      	ldr	r3, [pc, #224]	; (8001248 <StartDefaultTask+0x47c>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <StartDefaultTask+0x47c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	fbb2 f2f3 	udiv	r2, r2, r3
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	493a      	ldr	r1, [pc, #232]	; (8001264 <StartDefaultTask+0x498>)
 800117a:	4618      	mov	r0, r3
 800117c:	f007 fae4 	bl	8008748 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);    
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f823 	bl	80001d0 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	f107 010c 	add.w	r1, r7, #12
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	482f      	ldr	r0, [pc, #188]	; (8001254 <StartDefaultTask+0x488>)
 8001198:	f003 f8aa 	bl	80042f0 <HAL_UART_Transmit>
    //Teller 3
    // sprintf(buffer,"Average length of breaks taken by teller 3: %u\r\n", tellers[2].break_info->total / tellers[2].break_info->num);
    // HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);    

    // CHANGE 1 TO NUM_TELLERS
    for(int i = 0; i < 1;i++)
 800119c:	2300      	movs	r3, #0
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
 80011a0:	e021      	b.n	80011e6 <StartDefaultTask+0x41a>
    {
      sprintf(buffer,"Length of longest break taken by teller %u: %u\r\n",i+1, tellers[i].break_info->longest);
 80011a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a4:	1c5c      	adds	r4, r3, #1
 80011a6:	4a28      	ldr	r2, [pc, #160]	; (8001248 <StartDefaultTask+0x47c>)
 80011a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011aa:	212c      	movs	r1, #44	; 0x2c
 80011ac:	fb01 f303 	mul.w	r3, r1, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	331c      	adds	r3, #28
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f107 000c 	add.w	r0, r7, #12
 80011bc:	4622      	mov	r2, r4
 80011be:	492a      	ldr	r1, [pc, #168]	; (8001268 <StartDefaultTask+0x49c>)
 80011c0:	f007 fac2 	bl	8008748 <siprintf>
      HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);   
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f801 	bl	80001d0 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f107 010c 	add.w	r1, r7, #12
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <StartDefaultTask+0x488>)
 80011dc:	f003 f888 	bl	80042f0 <HAL_UART_Transmit>
    for(int i = 0; i < 1;i++)
 80011e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e2:	3301      	adds	r3, #1
 80011e4:	657b      	str	r3, [r7, #84]	; 0x54
 80011e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	ddda      	ble.n	80011a2 <StartDefaultTask+0x3d6>
    }
    
    // CHANGE 1 TO NUM_TELLERS
    for(int i = 0; i < 1;i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	653b      	str	r3, [r7, #80]	; 0x50
 80011f0:	e021      	b.n	8001236 <StartDefaultTask+0x46a>
    {
      sprintf(buffer,"Length of shortest break taken by teller %u: %u\r\n",i+1, tellers[i].break_info->shortest);
 80011f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011f4:	1c5c      	adds	r4, r3, #1
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <StartDefaultTask+0x47c>)
 80011f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011fa:	212c      	movs	r1, #44	; 0x2c
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	331c      	adds	r3, #28
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f107 000c 	add.w	r0, r7, #12
 800120c:	4622      	mov	r2, r4
 800120e:	4917      	ldr	r1, [pc, #92]	; (800126c <StartDefaultTask+0x4a0>)
 8001210:	f007 fa9a 	bl	8008748 <siprintf>
      HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);   
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd9 	bl	80001d0 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f107 010c 	add.w	r1, r7, #12
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <StartDefaultTask+0x488>)
 800122c:	f003 f860 	bl	80042f0 <HAL_UART_Transmit>
    for(int i = 0; i < 1;i++)
 8001230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001232:	3301      	adds	r3, #1
 8001234:	653b      	str	r3, [r7, #80]	; 0x50
 8001236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001238:	2b00      	cmp	r3, #0
 800123a:	ddda      	ble.n	80011f2 <StartDefaultTask+0x426>
    }
	  osSemaphoreRelease (printBinarySemHandle);
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <StartDefaultTask+0x4a4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f004 f9b9 	bl	80055b8 <osSemaphoreRelease>
	if (printBinarySemHandle != NULL && osSemaphoreAcquire(printBinarySemHandle,0) == osOK)
 8001246:	e641      	b.n	8000ecc <StartDefaultTask+0x100>
 8001248:	200000bc 	.word	0x200000bc
 800124c:	88888889 	.word	0x88888889
 8001250:	080090e4 	.word	0x080090e4
 8001254:	20004950 	.word	0x20004950
 8001258:	20000090 	.word	0x20000090
 800125c:	08009108 	.word	0x08009108
 8001260:	08009118 	.word	0x08009118
 8001264:	0800913c 	.word	0x0800913c
 8001268:	08009170 	.word	0x08009170
 800126c:	080091a4 	.word	0x080091a4
 8001270:	200048f8 	.word	0x200048f8

08001274 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b08b      	sub	sp, #44	; 0x2c
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	uint8_t buffer[32]="StartTask2\r\n";
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <StartTask02+0x4c>)
 800127e:	f107 0408 	add.w	r4, r7, #8
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	c407      	stmia	r4!, {r0, r1, r2}
 8001286:	7023      	strb	r3, [r4, #0]
 8001288:	f107 0315 	add.w	r3, r7, #21
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	f8c3 200f 	str.w	r2, [r3, #15]
		  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ff96 	bl	80001d0 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0108 	add.w	r1, r7, #8
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <StartTask02+0x50>)
 80012b2:	f003 f81d 	bl	80042f0 <HAL_UART_Transmit>
  for(;;)
  {
	  osDelay(1000);
 80012b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ba:	f004 f84b 	bl	8005354 <osDelay>
 80012be:	e7fa      	b.n	80012b6 <StartTask02+0x42>
 80012c0:	080091d8 	.word	0x080091d8
 80012c4:	20004950 	.word	0x20004950

080012c8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b098      	sub	sp, #96	; 0x60
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  uint8_t buffer1[64];
  unsigned int random_time;
  TellerS* teller = &tellers[0];
 80012d0:	4ba6      	ldr	r3, [pc, #664]	; (800156c <StartTask03+0x2a4>)
 80012d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	48a5      	ldr	r0, [pc, #660]	; (8001570 <StartTask03+0x2a8>)
 80012dc:	f002 fb3c 	bl	8003958 <HAL_RNG_GenerateRandomNumber>
  init_teller(teller,TELLER_1,random_time);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	461a      	mov	r2, r3
 80012e4:	2101      	movs	r1, #1
 80012e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80012e8:	f000 fc16 	bl	8001b18 <init_teller>
  while(1){
  if (printBinarySemHandle != NULL && osSemaphoreAcquire(printBinarySemHandle,0) == osOK)
 80012ec:	4ba1      	ldr	r3, [pc, #644]	; (8001574 <StartTask03+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0fb      	beq.n	80012ec <StartTask03+0x24>
 80012f4:	4b9f      	ldr	r3, [pc, #636]	; (8001574 <StartTask03+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 f8f6 	bl	80054ec <osSemaphoreAcquire>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f2      	bne.n	80012ec <StartTask03+0x24>
  {

	  sprintf(buffer1,"Teller 1 initialized\r\n");
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4a9b      	ldr	r2, [pc, #620]	; (8001578 <StartTask03+0x2b0>)
 800130c:	461c      	mov	r4, r3
 800130e:	4615      	mov	r5, r2
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001318:	6020      	str	r0, [r4, #0]
 800131a:	3404      	adds	r4, #4
 800131c:	8021      	strh	r1, [r4, #0]
 800131e:	3402      	adds	r4, #2
 8001320:	0c0b      	lsrs	r3, r1, #16
 8001322:	7023      	strb	r3, [r4, #0]
	    HAL_UART_Transmit(&huart2, buffer1, strlen((char*)buffer1), HAL_MAX_DELAY);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4618      	mov	r0, r3
 800132a:	f7fe ff51 	bl	80001d0 <strlen>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	4890      	ldr	r0, [pc, #576]	; (800157c <StartTask03+0x2b4>)
 800133c:	f002 ffd8 	bl	80042f0 <HAL_UART_Transmit>
    osSemaphoreRelease (printBinarySemHandle);
 8001340:	4b8c      	ldr	r3, [pc, #560]	; (8001574 <StartTask03+0x2ac>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f004 f937 	bl	80055b8 <osSemaphoreRelease>

  for(;;)
  {

    // If it is the end of the and there are no more customers to serve
    if (master_timer > MAX_TIME && is_empty(&customer_queue))
 800134a:	4b8d      	ldr	r3, [pc, #564]	; (8001580 <StartTask03+0x2b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f246 2270 	movw	r2, #25200	; 0x6270
 8001352:	4293      	cmp	r3, r2
 8001354:	d906      	bls.n	8001364 <StartTask03+0x9c>
 8001356:	488b      	ldr	r0, [pc, #556]	; (8001584 <StartTask03+0x2bc>)
 8001358:	f000 fa1e 	bl	8001798 <is_empty>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 80ff 	bne.w	8001562 <StartTask03+0x29a>
    {
      break;
    }
    if(teller->status == idle)
 8001364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	2b01      	cmp	r3, #1
 800136c:	f040 80d4 	bne.w	8001518 <StartTask03+0x250>
    {
        // If the teller can, they should go on break
        // The time until break is the time at which the master_timer will be at when they can take a break
        if( master_timer>= teller->time_until_break)
 8001370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001374:	4b82      	ldr	r3, [pc, #520]	; (8001580 <StartTask03+0x2b8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d84d      	bhi.n	8001418 <StartTask03+0x150>
        {
            HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	487b      	ldr	r0, [pc, #492]	; (8001570 <StartTask03+0x2a8>)
 8001384:	f002 fae8 	bl	8003958 <HAL_RNG_GenerateRandomNumber>
            unsigned int init_time_waiting= generate_break_length(random_time);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f920 	bl	80005d0 <generate_break_length>
 8001390:	65b8      	str	r0, [r7, #88]	; 0x58
            unsigned int time_waiting = init_time_waiting + master_timer;
 8001392:	4b7b      	ldr	r3, [pc, #492]	; (8001580 <StartTask03+0x2b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001398:	4413      	add	r3, r2
 800139a:	657b      	str	r3, [r7, #84]	; 0x54

            teller->busy_time = time_waiting;
 800139c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013a0:	619a      	str	r2, [r3, #24]
            teller->total_time_waiting = init_time_waiting;
 80013a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013a6:	609a      	str	r2, [r3, #8]
            teller->break_info->num++;
 80013a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	3201      	adds	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
            update_breaks_metrics(teller->break_info, time_waiting);
 80013b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8e1 	bl	8000580 <update_breaks_metrics>
            teller->status = on_break;
 80013be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c0:	2202      	movs	r2, #2
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]
            HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	4868      	ldr	r0, [pc, #416]	; (8001570 <StartTask03+0x2a8>)
 80013ce:	f002 fac3 	bl	8003958 <HAL_RNG_GenerateRandomNumber>
            teller->time_until_break = master_timer + generate_time_until_break(random_time);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f913 	bl	8000600 <generate_time_until_break>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <StartTask03+0x2b8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	441a      	add	r2, r3
 80013e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28

            sprintf(buffer1,"Teller taking break. \r\n");
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4a67      	ldr	r2, [pc, #412]	; (8001588 <StartTask03+0x2c0>)
 80013ec:	461c      	mov	r4, r3
 80013ee:	4615      	mov	r5, r2
 80013f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013f8:	e884 0003 	stmia.w	r4, {r0, r1}
		        HAL_UART_Transmit(&huart2, buffer1, strlen((char*)buffer1), HAL_MAX_DELAY);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe fee5 	bl	80001d0 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	f107 0110 	add.w	r1, r7, #16
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	485a      	ldr	r0, [pc, #360]	; (800157c <StartTask03+0x2b4>)
 8001414:	f002 ff6c 	bl	80042f0 <HAL_UART_Transmit>
        }
        // Lock the queue info
        if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK){
 8001418:	4b5c      	ldr	r3, [pc, #368]	; (800158c <StartTask03+0x2c4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d094      	beq.n	800134a <StartTask03+0x82>
 8001420:	4b5a      	ldr	r3, [pc, #360]	; (800158c <StartTask03+0x2c4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f004 f860 	bl	80054ec <osSemaphoreAcquire>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d18b      	bne.n	800134a <StartTask03+0x82>
          if(customer_queue.size > 0)
 8001432:	4b54      	ldr	r3, [pc, #336]	; (8001584 <StartTask03+0x2bc>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d068      	beq.n	800150c <StartTask03+0x244>
          {
              CustomerS* customer = dequeue(&customer_queue);
 800143a:	4852      	ldr	r0, [pc, #328]	; (8001584 <StartTask03+0x2bc>)
 800143c:	f000 f925 	bl	800168a <dequeue>
 8001440:	6538      	str	r0, [r7, #80]	; 0x50
              teller->total_served++;
 8001442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800144a:	601a      	str	r2, [r3, #0]
              teller->total_time_served += customer->interaction_time;
 800144c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	441a      	add	r2, r3
 8001456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001458:	605a      	str	r2, [r3, #4]
              teller->busy_time = master_timer + customer->interaction_time;
 800145a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	4b48      	ldr	r3, [pc, #288]	; (8001580 <StartTask03+0x2b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	441a      	add	r2, r3
 8001464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001466:	619a      	str	r2, [r3, #24]
              teller->status = busy;
 8001468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2020 	strb.w	r2, [r3, #32]
              teller->total_time_waiting = master_timer - teller->time_finished_task;
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <StartTask03+0x2b8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	1ad2      	subs	r2, r2, r3
 800147a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147c:	609a      	str	r2, [r3, #8]
              teller->time_finished_task = 0;
 800147e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001480:	2200      	movs	r2, #0
 8001482:	625a      	str	r2, [r3, #36]	; 0x24

              if (customer->interaction_time > teller->max_transaction_time)
 8001484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d903      	bls.n	8001498 <StartTask03+0x1d0>
              {
                teller->max_transaction_time = customer->interaction_time;
 8001490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001496:	60da      	str	r2, [r3, #12]
              }

              // Wait time for the customer to be serviced
              customer_queue.current_wait_time = master_timer - customer->time_joined;
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <StartTask03+0x2b8>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	4a38      	ldr	r2, [pc, #224]	; (8001584 <StartTask03+0x2bc>)
 80014a4:	6213      	str	r3, [r2, #32]
              if (customer_queue.current_wait_time > customer_queue.max_wait_time)
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <StartTask03+0x2bc>)
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <StartTask03+0x2bc>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d903      	bls.n	80014ba <StartTask03+0x1f2>
              {
                customer_queue.max_wait_time = customer_queue.current_wait_time;
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <StartTask03+0x2bc>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <StartTask03+0x2bc>)
 80014b8:	6053      	str	r3, [r2, #4]
              }

              // Add the amount of seconds the customer waited in the queue for (current time - time when they joined)
              customer_queue.total_wait_time += master_timer - customer->time_joined;
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <StartTask03+0x2bc>)
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <StartTask03+0x2b8>)
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1acb      	subs	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <StartTask03+0x2bc>)
 80014cc:	6113      	str	r3, [r2, #16]
              sprintf(buffer1,"Teller 1 serving a customer \r\n");
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <StartTask03+0x2c8>)
 80014d4:	461c      	mov	r4, r3
 80014d6:	4615      	mov	r5, r2
 80014d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014e0:	c407      	stmia	r4!, {r0, r1, r2}
 80014e2:	8023      	strh	r3, [r4, #0]
 80014e4:	3402      	adds	r4, #2
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	7023      	strb	r3, [r4, #0]
			        HAL_UART_Transmit(&huart2, buffer1, strlen((char*)buffer1), HAL_MAX_DELAY);
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe6e 	bl	80001d0 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	f107 0110 	add.w	r1, r7, #16
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001500:	481e      	ldr	r0, [pc, #120]	; (800157c <StartTask03+0x2b4>)
 8001502:	f002 fef5 	bl	80042f0 <HAL_UART_Transmit>


              // Free up the space occupied by the customer
              vPortFree(customer);
 8001506:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001508:	f006 ffcc 	bl	80084a4 <vPortFree>

              // Unlock queue

          }
          osSemaphoreRelease (myBinarySem01Handle);
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <StartTask03+0x2c4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f004 f851 	bl	80055b8 <osSemaphoreRelease>
 8001516:	e718      	b.n	800134a <StartTask03+0x82>
        }
        
    }
    else if (busy == teller->status)
 8001518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <StartTask03+0x27a>
    {
        if(master_timer >= teller->busy_time)
 8001522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <StartTask03+0x2b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	f63f af0d 	bhi.w	800134a <StartTask03+0x82>
        {
            teller->status = idle;
 8001530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2020 	strb.w	r2, [r3, #32]
            teller->time_finished_task = master_timer;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <StartTask03+0x2b8>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
 8001540:	e703      	b.n	800134a <StartTask03+0x82>
        }
    }
    else // if teller.status == on_break
    {
        if (master_timer >= teller->busy_time)
 8001542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <StartTask03+0x2b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	f63f aefd 	bhi.w	800134a <StartTask03+0x82>
        {
            teller->status = idle;
 8001550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2020 	strb.w	r2, [r3, #32]
            teller->time_finished_task = master_timer;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <StartTask03+0x2b8>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
    if (master_timer > MAX_TIME && is_empty(&customer_queue))
 8001560:	e6f3      	b.n	800134a <StartTask03+0x82>
      break;
 8001562:	bf00      	nop
    //sprintf(buffer,"Number of people served by teller 1: %u\r\n", teller.total_served);
    //HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
  }

  /* USER CODE END StartTask03 */
}
 8001564:	bf00      	nop
 8001566:	3760      	adds	r7, #96	; 0x60
 8001568:	46bd      	mov	sp, r7
 800156a:	bdb0      	pop	{r4, r5, r7, pc}
 800156c:	200000bc 	.word	0x200000bc
 8001570:	200048fc 	.word	0x200048fc
 8001574:	200048f8 	.word	0x200048f8
 8001578:	080091f8 	.word	0x080091f8
 800157c:	20004950 	.word	0x20004950
 8001580:	200048ec 	.word	0x200048ec
 8001584:	20000090 	.word	0x20000090
 8001588:	08009210 	.word	0x08009210
 800158c:	2000490c 	.word	0x2000490c
 8001590:	08009228 	.word	0x08009228

08001594 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f003 fed9 	bl	8005354 <osDelay>
 80015a2:	e7fb      	b.n	800159c <StartTask04+0x8>

080015a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015b6:	f000 fb2d 	bl	8001c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012c00 	.word	0x40012c00

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <init_queue>:
 * Sets values to 0 or NULL
 * [QueueS*] QueuePtr - Pointer to a queue to initialize
 * Returns: NULL
 * */
void init_queue(QueueS* QueuePtr,unsigned int random_time)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
    //Metric information init
    QueuePtr->max_depth = 0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    QueuePtr->max_wait_time = 0;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
    QueuePtr->max_size = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    QueuePtr->total_serviced = 0;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
    QueuePtr->total_wait_time = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
    QueuePtr->total_interaction_time = 0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]

    //Active information init
    QueuePtr->size = 0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
    QueuePtr->time_for_new_customer = generate_time_for_new_cust(random_time);
 800160a:	6838      	ldr	r0, [r7, #0]
 800160c:	f000 f8ac 	bl	8001768 <generate_time_for_new_cust>
 8001610:	4602      	mov	r2, r0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	61da      	str	r2, [r3, #28]
    QueuePtr->current_wait_time = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
    QueuePtr->front_node = NULL;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
    QueuePtr->back_node = NULL;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <enqueue>:
 * [QueueS*] QueuePtr - Pointer to a queue to add item to
 * [QueueS*] NodePtr  - Pointer to a node to add the back of the queue (back of the line)
 *  Returns: NULL
 * */
void enqueue(QueueS* QueuePtr, Queue_NodeS* NodePtr)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    if (QueuePtr->size == 0)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <enqueue+0x26>
    {
        NodePtr->next_node = NULL;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
        QueuePtr->front_node = NodePtr;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
 8001654:	e009      	b.n	800166a <enqueue+0x3a>
    }
    else
    {
        NodePtr->next_node = NULL;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node->next_node = NodePtr;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
    }
    QueuePtr->size++;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
    QueuePtr->total_serviced++;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60da      	str	r2, [r3, #12]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <dequeue>:
 * [QueueS* QueuePtr] - Pointer to a queue
 * Returns:
 *          Pointer to the removed data from node OR NULL if empty queue
 * */
CustomerS* dequeue(QueueS* QueuePtr)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    // If the queue is a single item
    if (QueuePtr->size > 0)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d023      	beq.n	80016e2 <dequeue+0x58>
    {
        Queue_NodeS* old_head = QueuePtr->front_node;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	60fb      	str	r3, [r7, #12]
        CustomerS* customer = old_head->customer;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60bb      	str	r3, [r7, #8]
        if(QueuePtr->size == 1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d106      	bne.n	80016bc <dequeue+0x32>
        {
            QueuePtr->front_node = NULL;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
            QueuePtr->back_node = NULL;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
 80016ba:	e008      	b.n	80016ce <dequeue+0x44>
        }
        else if (QueuePtr->size > 1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d904      	bls.n	80016ce <dequeue+0x44>
        {
            QueuePtr->front_node = QueuePtr->front_node->next_node;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
        }
        QueuePtr->size--;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
        vPortFree(old_head);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f006 fee3 	bl	80084a4 <vPortFree>
        return customer;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	e000      	b.n	80016e4 <dequeue+0x5a>
    }
    return NULL;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <add_customer>:
 * Adds a customer to the static Queue object
 * Inputs: None
 * Returns: None
 * */
void add_customer(QueueS* queue_ptr,unsigned int random_time)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    // Allocate Node
    Queue_NodeS* new_node = (Queue_NodeS*) pvPortMalloc(sizeof(Queue_NodeS));
 80016f6:	2008      	movs	r0, #8
 80016f8:	f006 fe12 	bl	8008320 <pvPortMalloc>
 80016fc:	4603      	mov	r3, r0
 80016fe:	617b      	str	r3, [r7, #20]
    if(new_node == NULL){
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <add_customer+0x20>
    	int x = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
    	return;
 800170a:	e029      	b.n	8001760 <add_customer+0x74>
    }

    // Create new customer to be added
    CustomerS* new_customer = Generate_Customer(random_time);
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f7fe ff8f 	bl	8000630 <Generate_Customer>
 8001712:	6138      	str	r0, [r7, #16]
    //new_customer->time_joined = current_time;
    new_node->customer = new_customer;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	601a      	str	r2, [r3, #0]

    enqueue(queue_ptr, new_node);
 800171a:	6979      	ldr	r1, [r7, #20]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff87 	bl	8001630 <enqueue>

   queue_ptr->current_wait_time += new_customer->interaction_time;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	441a      	add	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	621a      	str	r2, [r3, #32]
   queue_ptr->total_wait_time += queue_ptr->current_wait_time;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	441a      	add	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]
   queue_ptr->total_interaction_time += new_customer->interaction_time;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	441a      	add	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	615a      	str	r2, [r3, #20]
    if (queue_ptr->size > queue_ptr->max_depth)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d903      	bls.n	8001760 <add_customer+0x74>
    {
        queue_ptr->max_depth = queue_ptr->size;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	601a      	str	r2, [r3, #0]
//    if (queue_ptr->current_wait_time > queue_ptr->max_wait_time)
//    {
//        queue_ptr->max_wait_time = queue_ptr->current_wait_time;
//    }

}
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <generate_time_for_new_cust>:
 * Generates a time between 1 minute and 4 minutes
 * Inputs: None
 * Outputs: The time generated
 * */
unsigned int generate_time_for_new_cust(unsigned int random_time)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_ENTER_QUEUE_TIME;
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <generate_time_for_new_cust+0x2c>)
 8001774:	fba3 1302 	umull	r1, r3, r3, r2
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	333c      	adds	r3, #60	; 0x3c
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	91a2b3c5 	.word	0x91a2b3c5

08001798 <is_empty>:
 * Determines if the given queue is empty
 * Inputs: None
 * Returns: 1 if queue is empty 0 if not
 * */
int is_empty(QueueS* queue_ptr)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    if(queue_ptr->size == 0)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <is_empty+0x14>
    {
        return 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <is_empty+0x16>
    }
    return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_MspInit+0x4c>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_MspInit+0x4c>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6613      	str	r3, [r2, #96]	; 0x60
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_MspInit+0x4c>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_MspInit+0x4c>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_MspInit+0x4c>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	6593      	str	r3, [r2, #88]	; 0x58
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_MspInit+0x4c>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	210f      	movs	r1, #15
 80017f6:	f06f 0001 	mvn.w	r0, #1
 80017fa:	f000 fae1 	bl	8001dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_RNG_MspInit+0x38>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10b      	bne.n	8001836 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_RNG_MspInit+0x3c>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RNG_MspInit+0x3c>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_RNG_MspInit+0x3c>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	50060800 	.word	0x50060800
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d113      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_TIM_Base_MspInit+0x44>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_TIM_Base_MspInit+0x44>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6593      	str	r3, [r2, #88]	; 0x58
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_TIM_Base_MspInit+0x44>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	201c      	movs	r0, #28
 800187c:	f000 faa0 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001880:	201c      	movs	r0, #28
 8001882:	f000 fab9 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_UART_MspInit+0x8c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d12f      	bne.n	8001916 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <HAL_UART_MspInit+0x90>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_UART_MspInit+0x90>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	6593      	str	r3, [r2, #88]	; 0x58
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_UART_MspInit+0x90>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_UART_MspInit+0x90>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <HAL_UART_MspInit+0x90>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_UART_MspInit+0x90>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018e6:	2360      	movs	r3, #96	; 0x60
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f6:	2307      	movs	r3, #7
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <HAL_UART_MspInit+0x94>)
 8001902:	f000 fac9 	bl	8001e98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	2026      	movs	r0, #38	; 0x26
 800190c:	f000 fa58 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001910:	2026      	movs	r0, #38	; 0x26
 8001912:	f000 fa71 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40004400 	.word	0x40004400
 8001924:	40021000 	.word	0x40021000
 8001928:	48000c00 	.word	0x48000c00

0800192c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	2019      	movs	r0, #25
 8001942:	f000 fa3d 	bl	8001dc0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001946:	2019      	movs	r0, #25
 8001948:	f000 fa56 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_InitTick+0x9c>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_InitTick+0x9c>)
 8001952:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001956:	6613      	str	r3, [r2, #96]	; 0x60
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_InitTick+0x9c>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001964:	f107 0210 	add.w	r2, r7, #16
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fa50 	bl	8002e14 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001974:	f001 fa38 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8001978:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	4a13      	ldr	r2, [pc, #76]	; (80019cc <HAL_InitTick+0xa0>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0c9b      	lsrs	r3, r3, #18
 8001984:	3b01      	subs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_InitTick+0xa4>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <HAL_InitTick+0xa8>)
 800198c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_InitTick+0xa4>)
 8001990:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001994:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_InitTick+0xa4>)
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_InitTick+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_InitTick+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <HAL_InitTick+0xa4>)
 80019aa:	f002 f824 	bl	80039f6 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <HAL_InitTick+0xa4>)
 80019b6:	f002 f849 	bl	8003a4c <HAL_TIM_Base_Start_IT>
 80019ba:	4603      	mov	r3, r0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3730      	adds	r7, #48	; 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	200049d8 	.word	0x200049d8
 80019d4:	40012c00 	.word	0x40012c00

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a12:	f002 f845 	bl	8003aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200049d8 	.word	0x200049d8

08001a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	master_timer++;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <TIM2_IRQHandler+0x18>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <TIM2_IRQHandler+0x18>)
 8001a2c:	6013      	str	r3, [r2, #0]
	//uint8_t buffer[16];
	//sprintf(buffer, "Count: %u\r\n", master_timer);
	//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <TIM2_IRQHandler+0x1c>)
 8001a30:	f002 f836 	bl	8003aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200048ec 	.word	0x200048ec
 8001a3c:	20004910 	.word	0x20004910

08001a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <USART2_IRQHandler+0x10>)
 8001a46:	f002 fce7 	bl	8004418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20004950 	.word	0x20004950

08001a54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x50>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x16>
		heap_end = &end;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <_sbrk+0x50>)
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <_sbrk+0x54>)
 8001a68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <_sbrk+0x50>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <_sbrk+0x50>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	466a      	mov	r2, sp
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d907      	bls.n	8001a8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a7e:	f006 fe25 	bl	80086cc <__errno>
 8001a82:	4602      	mov	r2, r0
 8001a84:	230c      	movs	r3, #12
 8001a86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8c:	e006      	b.n	8001a9c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <_sbrk+0x50>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <_sbrk+0x50>)
 8001a98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000140 	.word	0x20000140
 8001aa8:	20004a60 	.word	0x20004a60

08001aac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <SystemInit+0x64>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <SystemInit+0x64>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <SystemInit+0x68>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <SystemInit+0x68>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <SystemInit+0x68>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <SystemInit+0x68>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <SystemInit+0x68>)
 8001ad8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001adc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <SystemInit+0x68>)
 8001ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <SystemInit+0x68>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <SystemInit+0x68>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <SystemInit+0x68>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SystemInit+0x64>)
 8001afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b02:	609a      	str	r2, [r3, #8]
#endif
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00
 8001b14:	40021000 	.word	0x40021000

08001b18 <init_teller>:
 * Initialization of a teller struct
 * [TellerS*] teller - pointer to a teller
 * [uint16_t] id     - Id number to initialize the teller with
 * */
void init_teller(TellerS* teller,uint16_t id, unsigned int random_time)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	460b      	mov	r3, r1
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	817b      	strh	r3, [r7, #10]
    teller->total_served = 0;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
    teller->total_time_served = 0;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
    teller->total_time_waiting = 0;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
    teller->teller_id = id;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	897a      	ldrh	r2, [r7, #10]
 8001b3c:	829a      	strh	r2, [r3, #20]
    teller->busy_time = 0;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
    teller->break_info = (BreakS*) pvPortMalloc(sizeof(BreakS));
 8001b44:	2010      	movs	r0, #16
 8001b46:	f006 fbeb 	bl	8008320 <pvPortMalloc>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	61da      	str	r2, [r3, #28]
    teller->status = idle;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]
    teller->time_until_break = generate_time_until_break(random_time);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fd50 	bl	8000600 <generate_time_until_break>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
    teller->max_transaction_time = 0;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
    teller->max_wait_time = 0;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
    teller->time_finished_task = 0;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b86:	e003      	b.n	8001b90 <LoopCopyDataInit>

08001b88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b8e:	3104      	adds	r1, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b98:	d3f6      	bcc.n	8001b88 <CopyDataInit>
	ldr	r2, =_sbss
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b9c:	e002      	b.n	8001ba4 <LoopFillZerobss>

08001b9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ba0:	f842 3b04 	str.w	r3, [r2], #4

08001ba4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <LoopForever+0x16>)
	cmp	r2, r3
 8001ba6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ba8:	d3f9      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001baa:	f7ff ff7f 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f006 fd93 	bl	80086d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bb2:	f7fe fd6d 	bl	8000690 <main>

08001bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb6:	e7fe      	b.n	8001bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001bbc:	0800939c 	.word	0x0800939c
	ldr	r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bc4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001bc8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001bcc:	20004a60 	.word	0x20004a60

08001bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_2_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_Init+0x3c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_Init+0x3c>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bea:	2003      	movs	r0, #3
 8001bec:	f000 f8dd 	bl	8001daa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7ff fe9b 	bl	800192c <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	e001      	b.n	8001c06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c02:	f7ff fddb 	bl	80017bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c06:	79fb      	ldrb	r3, [r7, #7]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_IncTick+0x1c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <HAL_IncTick+0x1c>)
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20004a18 	.word	0x20004a18
 8001c34:	20000008 	.word	0x20000008

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20004a18 	.word	0x20004a18

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff4c 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd2:	f7ff ff61 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001dd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	f7ff ffb1 	bl	8001d44 <NVIC_EncodePriority>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff80 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff54 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d005      	beq.n	8001e38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e029      	b.n	8001e8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020e 	bic.w	r2, r2, #14
 8001e46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f003 021c 	and.w	r2, r3, #28
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
    }
  }
  return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e17f      	b.n	80021a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8171 	beq.w	80021a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_GPIO_Init+0x48>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed4:	2b11      	cmp	r3, #17
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d118      	bne.n	8001f80 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x128>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b12      	cmp	r3, #18
 8001fbe:	d123      	bne.n	8002008 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	6939      	ldr	r1, [r7, #16]
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80ac 	beq.w	80021a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <HAL_GPIO_Init+0x32c>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_GPIO_Init+0x32c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6613      	str	r3, [r2, #96]	; 0x60
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <HAL_GPIO_Init+0x32c>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002062:	4a59      	ldr	r2, [pc, #356]	; (80021c8 <HAL_GPIO_Init+0x330>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800208c:	d025      	beq.n	80020da <HAL_GPIO_Init+0x242>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4e      	ldr	r2, [pc, #312]	; (80021cc <HAL_GPIO_Init+0x334>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <HAL_GPIO_Init+0x23e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_GPIO_Init+0x338>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x23a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x33c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x236>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x340>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x232>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x344>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x22e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x348>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x22a>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020da:	2300      	movs	r3, #0
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ec:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_GPIO_Init+0x330>)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020fa:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800211e:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f ae78 	bne.w	8001ea8 <HAL_GPIO_Init+0x10>
  }
}
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	48000400 	.word	0x48000400
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000c00 	.word	0x48000c00
 80021d8:	48001000 	.word	0x48001000
 80021dc:	48001400 	.word	0x48001400
 80021e0:	48001800 	.word	0x48001800
 80021e4:	40010400 	.word	0x40010400

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002204:	e002      	b.n	800220c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40007000 	.word	0x40007000

08002238 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_PWREx_GetVoltageRange+0x18>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40007000 	.word	0x40007000

08002254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002262:	d130      	bne.n	80022c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d038      	beq.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800227a:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2232      	movs	r2, #50	; 0x32
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0c9b      	lsrs	r3, r3, #18
 8002294:	3301      	adds	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002298:	e002      	b.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3b01      	subs	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ac:	d102      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f2      	bne.n	800229a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c0:	d110      	bne.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e00f      	b.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d2:	d007      	beq.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022dc:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40007000 	.word	0x40007000
 80022f8:	20000000 	.word	0x20000000
 80022fc:	431bde83 	.word	0x431bde83

08002300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e3d4      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002312:	4ba1      	ldr	r3, [pc, #644]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800231c:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80e4 	beq.w	80024fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_RCC_OscConfig+0x4a>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	f040 808b 	bne.w	8002458 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b01      	cmp	r3, #1
 8002346:	f040 8087 	bne.w	8002458 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234a:	4b93      	ldr	r3, [pc, #588]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x62>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3ac      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1a      	ldr	r2, [r3, #32]
 8002366:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <HAL_RCC_OscConfig+0x7c>
 8002372:	4b89      	ldr	r3, [pc, #548]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237a:	e005      	b.n	8002388 <HAL_RCC_OscConfig+0x88>
 800237c:	4b86      	ldr	r3, [pc, #536]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002388:	4293      	cmp	r3, r2
 800238a:	d223      	bcs.n	80023d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fd71 	bl	8002e78 <RCC_SetFlashLatencyFromMSIRange>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e38d      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b7d      	ldr	r3, [pc, #500]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a7c      	ldr	r2, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4977      	ldr	r1, [pc, #476]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4972      	ldr	r1, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
 80023d2:	e025      	b.n	8002420 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d4:	4b70      	ldr	r3, [pc, #448]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6f      	ldr	r2, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	496a      	ldr	r1, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f2:	4b69      	ldr	r3, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4965      	ldr	r1, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fd31 	bl	8002e78 <RCC_SetFlashLatencyFromMSIRange>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e34d      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002420:	f000 fc36 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002424:	4601      	mov	r1, r0
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	4a5a      	ldr	r2, [pc, #360]	; (800259c <HAL_RCC_OscConfig+0x29c>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa21 f303 	lsr.w	r3, r1, r3
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_OscConfig+0x2a0>)
 800243e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002440:	4b58      	ldr	r3, [pc, #352]	; (80025a4 <HAL_RCC_OscConfig+0x2a4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fa71 	bl	800192c <HAL_InitTick>
 800244a:	4603      	mov	r3, r0
 800244c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d052      	beq.n	80024fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	e331      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d032      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4c      	ldr	r2, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800246c:	f7ff fbe4 	bl	8001c38 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002474:	f7ff fbe0 	bl	8001c38 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e31a      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002486:	4b44      	ldr	r3, [pc, #272]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	493b      	ldr	r1, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	4936      	ldr	r1, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
 80024c4:	e01a      	b.n	80024fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a33      	ldr	r2, [pc, #204]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fbb1 	bl	8001c38 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024da:	f7ff fbad 	bl	8001c38 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e2e7      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ec:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x1da>
 80024f8:	e000      	b.n	80024fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d074      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b08      	cmp	r3, #8
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x21a>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d10e      	bne.n	8002532 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d10b      	bne.n	8002532 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d064      	beq.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d160      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e2c4      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x24a>
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e01d      	b.n	8002586 <HAL_RCC_OscConfig+0x286>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002552:	d10c      	bne.n	800256e <HAL_RCC_OscConfig+0x26e>
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 800255a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	e00b      	b.n	8002586 <HAL_RCC_OscConfig+0x286>
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a06      	ldr	r2, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x298>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7ff fb53 	bl	8001c38 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002594:	e011      	b.n	80025ba <HAL_RCC_OscConfig+0x2ba>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	08009310 	.word	0x08009310
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fb46 	bl	8001c38 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e280      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	4baf      	ldr	r3, [pc, #700]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x2a8>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff fb36 	bl	8001c38 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fb32 	bl	8001c38 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e26c      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e2:	4ba5      	ldr	r3, [pc, #660]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d0>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d060      	beq.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x310>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d119      	bne.n	800263e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d116      	bne.n	800263e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002610:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x328>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e249      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b93      	ldr	r3, [pc, #588]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4990      	ldr	r1, [pc, #576]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263c:	e040      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d023      	beq.n	800268e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002646:	4b8c      	ldr	r3, [pc, #560]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a8b      	ldr	r2, [pc, #556]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7ff faf1 	bl	8001c38 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7ff faed 	bl	8001c38 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e227      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266c:	4b82      	ldr	r3, [pc, #520]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	497c      	ldr	r1, [pc, #496]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	e018      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b7a      	ldr	r3, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a79      	ldr	r2, [pc, #484]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff facd 	bl	8001c38 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff fac9 	bl	8001c38 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e203      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b4:	4b70      	ldr	r3, [pc, #448]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03c      	beq.n	8002746 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d4:	4b68      	ldr	r3, [pc, #416]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026da:	4a67      	ldr	r2, [pc, #412]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff faa8 	bl	8001c38 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7ff faa4 	bl	8001c38 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1de      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026fe:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ef      	beq.n	80026ec <HAL_RCC_OscConfig+0x3ec>
 800270c:	e01b      	b.n	8002746 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff fa8b 	bl	8001c38 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7ff fa87 	bl	8001c38 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1c1      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002738:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800273a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ef      	bne.n	8002726 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80a6 	beq.w	80028a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002758:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	4b44      	ldr	r3, [pc, #272]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	4a43      	ldr	r2, [pc, #268]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276e:	6593      	str	r3, [r2, #88]	; 0x58
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277c:	2301      	movs	r3, #1
 800277e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_OscConfig+0x57c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d118      	bne.n	80027be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x57c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3a      	ldr	r2, [pc, #232]	; (800287c <HAL_RCC_OscConfig+0x57c>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002798:	f7ff fa4e 	bl	8001c38 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7ff fa4a 	bl	8001c38 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e184      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_RCC_OscConfig+0x57c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4d8>
 80027c6:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d6:	e024      	b.n	8002822 <HAL_RCC_OscConfig+0x522>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d110      	bne.n	8002802 <HAL_RCC_OscConfig+0x502>
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	4a24      	ldr	r2, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002800:	e00f      	b.n	8002822 <HAL_RCC_OscConfig+0x522>
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d016      	beq.n	8002858 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7ff fa05 	bl	8001c38 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff fa01 	bl	8001c38 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e139      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_OscConfig+0x578>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ed      	beq.n	8002832 <HAL_RCC_OscConfig+0x532>
 8002856:	e01a      	b.n	800288e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7ff f9ee 	bl	8001c38 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800285e:	e00f      	b.n	8002880 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7ff f9ea 	bl	8001c38 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d906      	bls.n	8002880 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e122      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	4b90      	ldr	r3, [pc, #576]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e8      	bne.n	8002860 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288e:	7ffb      	ldrb	r3, [r7, #31]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	4a8a      	ldr	r2, [pc, #552]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8108 	beq.w	8002aba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	f040 80d0 	bne.w	8002a54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028b4:	4b83      	ldr	r3, [pc, #524]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0203 	and.w	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d130      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	3b01      	subs	r3, #1
 80028d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d127      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d11f      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f4:	2a07      	cmp	r2, #7
 80028f6:	bf14      	ite	ne
 80028f8:	2201      	movne	r2, #1
 80028fa:	2200      	moveq	r2, #0
 80028fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	3b01      	subs	r3, #1
 8002910:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d109      	bne.n	800292a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d06e      	beq.n	8002a08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b0c      	cmp	r3, #12
 800292e:	d069      	beq.n	8002a04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002930:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800293c:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b7      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800294c:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a5c      	ldr	r2, [pc, #368]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002958:	f7ff f96e 	bl	8001c38 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff f96a 	bl	8001c38 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0a4      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002972:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <HAL_RCC_OscConfig+0x7c8>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800298e:	3a01      	subs	r2, #1
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002998:	0212      	lsls	r2, r2, #8
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a0:	0852      	lsrs	r2, r2, #1
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0552      	lsls	r2, r2, #21
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029ac:	0852      	lsrs	r2, r2, #1
 80029ae:	3a01      	subs	r2, #1
 80029b0:	0652      	lsls	r2, r2, #25
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b8:	0912      	lsrs	r2, r2, #4
 80029ba:	0452      	lsls	r2, r2, #17
 80029bc:	430a      	orrs	r2, r1
 80029be:	4941      	ldr	r1, [pc, #260]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c4:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3e      	ldr	r2, [pc, #248]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 80029ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a3b      	ldr	r2, [pc, #236]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029dc:	f7ff f92c 	bl	8001c38 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7ff f928 	bl	8001c38 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e062      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f6:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a02:	e05a      	b.n	8002aba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e059      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a08:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d152      	bne.n	8002aba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a14:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a2c:	f7ff f904 	bl	8001c38 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff f900 	bl	8001c38 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e03a      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x734>
 8002a52:	e032      	b.n	8002aba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d02d      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a78:	f023 0303 	bic.w	r3, r3, #3
 8002a7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002a84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7ff f8d3 	bl	8001c38 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a96:	f7ff f8cf 	bl	8001c38 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e009      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_OscConfig+0x7c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x796>
 8002ab4:	e001      	b.n	8002aba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	f99d808c 	.word	0xf99d808c

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0c8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d910      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4961      	ldr	r1, [pc, #388]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b0      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d04c      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b24:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d121      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e09e      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e092      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b54:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e086      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e07e      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	493f      	ldr	r1, [pc, #252]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7ff f857 	bl	8001c38 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7ff f853 	bl	8001c38 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e066      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 020c 	and.w	r2, r3, #12
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	492c      	ldr	r1, [pc, #176]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d210      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e036      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4918      	ldr	r1, [pc, #96]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4910      	ldr	r1, [pc, #64]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c42:	f000 f825 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c46:	4601      	mov	r1, r0
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fe60 	bl	800192c <HAL_InitTick>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08009310 	.word	0x08009310
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca8:	4b3a      	ldr	r3, [pc, #232]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d121      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d11e      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cd0:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e005      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cec:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	e004      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d133      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d002      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xaa>
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d36:	617b      	str	r3, [r7, #20]
      break;
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	3301      	adds	r3, #1
 8002d52:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	fb02 f203 	mul.w	r2, r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0e5b      	lsrs	r3, r3, #25
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d86:	69bb      	ldr	r3, [r7, #24]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3724      	adds	r7, #36	; 0x24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08009328 	.word	0x08009328
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	007a1200 	.word	0x007a1200

08002da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000000 	.word	0x20000000

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dc0:	f7ff fff0 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08009320 	.word	0x08009320

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dec:	f7ff ffda 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002df0:	4601      	mov	r1, r0
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0adb      	lsrs	r3, r3, #11
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08009320 	.word	0x08009320

08002e14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	220f      	movs	r2, #15
 8002e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_RCC_GetClockConfig+0x5c>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_RCC_GetClockConfig+0x5c>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_GetClockConfig+0x5c>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	08db      	lsrs	r3, r3, #3
 8002e4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e56:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <HAL_RCC_GetClockConfig+0x60>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0207 	and.w	r2, r3, #7
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	601a      	str	r2, [r3, #0]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40022000 	.word	0x40022000

08002e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e84:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e90:	f7ff f9d2 	bl	8002238 <HAL_PWREx_GetVoltageRange>
 8002e94:	6178      	str	r0, [r7, #20]
 8002e96:	e014      	b.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002eb0:	f7ff f9c2 	bl	8002238 <HAL_PWREx_GetVoltageRange>
 8002eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec8:	d10b      	bne.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d919      	bls.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ed4:	d902      	bls.n	8002edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	e013      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002edc:	2301      	movs	r3, #1
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e010      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d902      	bls.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee8:	2303      	movs	r3, #3
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	e00a      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b80      	cmp	r3, #128	; 0x80
 8002ef2:	d102      	bne.n	8002efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	e004      	b.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b70      	cmp	r3, #112	; 0x70
 8002efe:	d101      	bne.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f00:	2301      	movs	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 0207 	bic.w	r2, r3, #7
 8002f0c:	4909      	ldr	r1, [pc, #36]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f44:	2300      	movs	r3, #0
 8002f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d03f      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5c:	d01c      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f62:	d802      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002f68:	e01f      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f6e:	d003      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f74:	d01c      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f76:	e018      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f78:	4b85      	ldr	r3, [pc, #532]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a84      	ldr	r2, [pc, #528]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f84:	e015      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fac9 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f96:	e00c      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3320      	adds	r3, #32
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fbb0 	bl	8003704 <RCCEx_PLLSAI2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa8:	e003      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	74fb      	strb	r3, [r7, #19]
      break;
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc6:	4972      	ldr	r1, [pc, #456]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fce:	e001      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d03f      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe8:	d01c      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002fea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fee:	d802      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ff4:	e01f      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ffa:	d003      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003000:	d01c      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003002:	e018      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003004:	4b62      	ldr	r3, [pc, #392]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a61      	ldr	r2, [pc, #388]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fa83 	bl	8003524 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb6a 	bl	8003704 <RCCEx_PLLSAI2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003044:	4b52      	ldr	r3, [pc, #328]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003052:	494f      	ldr	r1, [pc, #316]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a0 	beq.w	80031ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003082:	2300      	movs	r3, #0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a40      	ldr	r2, [pc, #256]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a4:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3a      	ldr	r2, [pc, #232]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b0:	f7fe fdc2 	bl	8001c38 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fe fdbe 	bl	8001c38 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030cc:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d15c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01f      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d019      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030fc:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a20      	ldr	r2, [pc, #128]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fd7d 	bl	8001c38 <HAL_GetTick>
 800313e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	e00b      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe fd79 	bl	8001c38 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d902      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	74fb      	strb	r3, [r7, #19]
            break;
 8003158:	e006      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ec      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	4904      	ldr	r1, [pc, #16]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319c:	7c7b      	ldrb	r3, [r7, #17]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b9e      	ldr	r3, [pc, #632]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	4a9d      	ldr	r2, [pc, #628]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ba:	4b98      	ldr	r3, [pc, #608]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f023 0203 	bic.w	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	4994      	ldr	r1, [pc, #592]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031dc:	4b8f      	ldr	r3, [pc, #572]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f023 020c 	bic.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	498c      	ldr	r1, [pc, #560]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fe:	4b87      	ldr	r3, [pc, #540]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4983      	ldr	r1, [pc, #524]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	497b      	ldr	r1, [pc, #492]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003242:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	4972      	ldr	r1, [pc, #456]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003264:	4b6d      	ldr	r3, [pc, #436]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	496a      	ldr	r1, [pc, #424]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	4961      	ldr	r1, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a8:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	4959      	ldr	r1, [pc, #356]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	4950      	ldr	r1, [pc, #320]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	4948      	ldr	r1, [pc, #288]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	493f      	ldr	r1, [pc, #252]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d028      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003330:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333e:	4937      	ldr	r1, [pc, #220]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334e:	d106      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335a:	60d3      	str	r3, [r2, #12]
 800335c:	e011      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003366:	d10c      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f8d8 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d028      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800338e:	4b23      	ldr	r3, [pc, #140]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d106      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ae:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b8:	60d3      	str	r3, [r2, #12]
 80033ba:	e011      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f8a9 	bl	8003524 <RCCEx_PLLSAI1_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340a:	d109      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a02      	ldr	r2, [pc, #8]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	e014      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f877 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	4928      	ldr	r1, [pc, #160]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346e:	d10d      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f854 	bl	8003524 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d014      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	74bb      	strb	r3, [r7, #18]
 800348a:	e011      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3320      	adds	r3, #32
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f931 	bl	8003704 <RCCEx_PLLSAI2_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034bc:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ca:	490d      	ldr	r1, [pc, #52]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ee:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000

08003524 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003532:	4b73      	ldr	r3, [pc, #460]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d018      	beq.n	8003570 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800353e:	4b70      	ldr	r3, [pc, #448]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d10d      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
       ||
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003556:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
       ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d044      	beq.n	80035f4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	e041      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d00c      	beq.n	8003592 <RCCEx_PLLSAI1_Config+0x6e>
 8003578:	2b03      	cmp	r3, #3
 800357a:	d013      	beq.n	80035a4 <RCCEx_PLLSAI1_Config+0x80>
 800357c:	2b01      	cmp	r3, #1
 800357e:	d120      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003580:	4b5f      	ldr	r3, [pc, #380]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11d      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003590:	e01a      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d116      	bne.n	80035cc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a2:	e013      	b.n	80035cc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035a4:	4b56      	ldr	r3, [pc, #344]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10f      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b0:	4b53      	ldr	r3, [pc, #332]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c0:	e006      	b.n	80035d0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      break;
 80035c6:	e004      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035c8:	bf00      	nop
 80035ca:	e002      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80035d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035d8:	4b49      	ldr	r3, [pc, #292]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	430b      	orrs	r3, r1
 80035ee:	4944      	ldr	r1, [pc, #272]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d17d      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003600:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003606:	f7fe fb17 	bl	8001c38 <HAL_GetTick>
 800360a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800360c:	e009      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360e:	f7fe fb13 	bl	8001c38 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d902      	bls.n	8003622 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	73fb      	strb	r3, [r7, #15]
        break;
 8003620:	e005      	b.n	800362e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003622:	4b37      	ldr	r3, [pc, #220]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ef      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d160      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d111      	bne.n	800365e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800363a:	4b31      	ldr	r3, [pc, #196]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6892      	ldr	r2, [r2, #8]
 800364a:	0211      	lsls	r1, r2, #8
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	0912      	lsrs	r2, r2, #4
 8003652:	0452      	lsls	r2, r2, #17
 8003654:	430a      	orrs	r2, r1
 8003656:	492a      	ldr	r1, [pc, #168]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]
 800365c:	e027      	b.n	80036ae <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d112      	bne.n	800368a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003664:	4b26      	ldr	r3, [pc, #152]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800366c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	0211      	lsls	r1, r2, #8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6912      	ldr	r2, [r2, #16]
 800367a:	0852      	lsrs	r2, r2, #1
 800367c:	3a01      	subs	r2, #1
 800367e:	0552      	lsls	r2, r2, #21
 8003680:	430a      	orrs	r2, r1
 8003682:	491f      	ldr	r1, [pc, #124]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003684:	4313      	orrs	r3, r2
 8003686:	610b      	str	r3, [r1, #16]
 8003688:	e011      	b.n	80036ae <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003692:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6892      	ldr	r2, [r2, #8]
 800369a:	0211      	lsls	r1, r2, #8
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6952      	ldr	r2, [r2, #20]
 80036a0:	0852      	lsrs	r2, r2, #1
 80036a2:	3a01      	subs	r2, #1
 80036a4:	0652      	lsls	r2, r2, #25
 80036a6:	430a      	orrs	r2, r1
 80036a8:	4915      	ldr	r1, [pc, #84]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe fabd 	bl	8001c38 <HAL_GetTick>
 80036be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c0:	e009      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c2:	f7fe fab9 	bl	8001c38 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d902      	bls.n	80036d6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	73fb      	strb	r3, [r7, #15]
          break;
 80036d4:	e005      	b.n	80036e2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ef      	beq.n	80036c2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000

08003704 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003712:	4b68      	ldr	r3, [pc, #416]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d018      	beq.n	8003750 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d10d      	bne.n	800374a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
       ||
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003736:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
       ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d044      	beq.n	80037d4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e041      	b.n	80037d4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d00c      	beq.n	8003772 <RCCEx_PLLSAI2_Config+0x6e>
 8003758:	2b03      	cmp	r3, #3
 800375a:	d013      	beq.n	8003784 <RCCEx_PLLSAI2_Config+0x80>
 800375c:	2b01      	cmp	r3, #1
 800375e:	d120      	bne.n	80037a2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003760:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11d      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003770:	e01a      	b.n	80037a8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003772:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003782:	e013      	b.n	80037ac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10f      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003790:	4b48      	ldr	r3, [pc, #288]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037a0:	e006      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      break;
 80037a6:	e004      	b.n	80037b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80037b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037b8:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	430b      	orrs	r3, r1
 80037ce:	4939      	ldr	r1, [pc, #228]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d167      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a35      	ldr	r2, [pc, #212]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e6:	f7fe fa27 	bl	8001c38 <HAL_GetTick>
 80037ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037ec:	e009      	b.n	8003802 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ee:	f7fe fa23 	bl	8001c38 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d902      	bls.n	8003802 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003800:	e005      	b.n	800380e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003802:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ef      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d14a      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d111      	bne.n	800383e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6892      	ldr	r2, [r2, #8]
 800382a:	0211      	lsls	r1, r2, #8
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68d2      	ldr	r2, [r2, #12]
 8003830:	0912      	lsrs	r2, r2, #4
 8003832:	0452      	lsls	r2, r2, #17
 8003834:	430a      	orrs	r2, r1
 8003836:	491f      	ldr	r1, [pc, #124]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	614b      	str	r3, [r1, #20]
 800383c:	e011      	b.n	8003862 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003846:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6892      	ldr	r2, [r2, #8]
 800384e:	0211      	lsls	r1, r2, #8
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6912      	ldr	r2, [r2, #16]
 8003854:	0852      	lsrs	r2, r2, #1
 8003856:	3a01      	subs	r2, #1
 8003858:	0652      	lsls	r2, r2, #25
 800385a:	430a      	orrs	r2, r1
 800385c:	4915      	ldr	r1, [pc, #84]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fe f9e3 	bl	8001c38 <HAL_GetTick>
 8003872:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003874:	e009      	b.n	800388a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003876:	f7fe f9df 	bl	8001c38 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d902      	bls.n	800388a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	73fb      	strb	r3, [r7, #15]
          break;
 8003888:	e005      	b.n	8003896 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ef      	beq.n	8003876 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e042      	b.n	8003950 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	795b      	ldrb	r3, [r3, #5]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd ff96 	bl	800180c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0204 	orr.w	r2, r2, #4
 80038f4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d104      	bne.n	800390e <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2204      	movs	r2, #4
 8003908:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e020      	b.n	8003950 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800390e:	f7fe f993 	bl	8001c38 <HAL_GetTick>
 8003912:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003914:	e00e      	b.n	8003934 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003916:	f7fe f98f 	bl	8001c38 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d907      	bls.n	8003934 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2204      	movs	r2, #4
 8003928:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e00d      	b.n	8003950 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d0e9      	beq.n	8003916 <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	791b      	ldrb	r3, [r3, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_RNG_GenerateRandomNumber+0x1a>
 800396e:	2302      	movs	r3, #2
 8003970:	e03d      	b.n	80039ee <HAL_RNG_GenerateRandomNumber+0x96>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	795b      	ldrb	r3, [r3, #5]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d12c      	bne.n	80039dc <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003988:	f7fe f956 	bl	8001c38 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800398e:	e011      	b.n	80039b4 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003990:	f7fe f952 	bl	8001c38 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d90a      	bls.n	80039b4 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e01c      	b.n	80039ee <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d1e6      	bne.n	8003990 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	715a      	strb	r2, [r3, #5]
 80039da:	e004      	b.n	80039e6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2204      	movs	r2, #4
 80039e0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	711a      	strb	r2, [r3, #4]

  return status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e01d      	b.n	8003a44 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fd ff15 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f000 fa33 	bl	8003ea0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_TIM_Base_Start_IT+0x50>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d00b      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x42>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d007      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	00010007 	.word	0x00010007

08003aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d122      	bne.n	8003afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0202 	mvn.w	r2, #2
 8003acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9be 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9b0 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f9c1 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0204 	mvn.w	r2, #4
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f994 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f986 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f997 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0208 	mvn.w	r2, #8
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f96a 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f95c 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f96d 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0210 	mvn.w	r2, #16
 8003bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f940 	bl	8003e64 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f932 	bl	8003e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f943 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10e      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0201 	mvn.w	r2, #1
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fcc0 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d10e      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d107      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 faee 	bl	800422c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5e:	d10e      	bne.n	8003c7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d107      	bne.n	8003c7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fae1 	bl	8004240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d10e      	bne.n	8003caa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d107      	bne.n	8003caa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f8f1 	bl	8003e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d10e      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d107      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f06f 0220 	mvn.w	r2, #32
 8003cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 faa1 	bl	8004218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_ConfigClockSource+0x18>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0a8      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x16a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d18:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d20:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d067      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x124>
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d80b      	bhi.n	8003d4e <HAL_TIM_ConfigClockSource+0x70>
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d073      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x144>
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d802      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x66>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d06f      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d42:	e078      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d06c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x144>
 8003d48:	2b30      	cmp	r3, #48	; 0x30
 8003d4a:	d06a      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003d4c:	e073      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d4e:	2b70      	cmp	r3, #112	; 0x70
 8003d50:	d00d      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x90>
 8003d52:	2b70      	cmp	r3, #112	; 0x70
 8003d54:	d804      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x82>
 8003d56:	2b50      	cmp	r3, #80	; 0x50
 8003d58:	d033      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xe4>
 8003d5a:	2b60      	cmp	r3, #96	; 0x60
 8003d5c:	d041      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003d5e:	e06a      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	d066      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0x156>
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d017      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003d6c:	e063      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f000 f9a3 	bl	80040c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	609a      	str	r2, [r3, #8]
      break;
 8003d9a:	e04c      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f000 f98c 	bl	80040c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbe:	609a      	str	r2, [r3, #8]
      break;
 8003dc0:	e039      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 f900 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2150      	movs	r1, #80	; 0x50
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f959 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e029      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 f91f 	bl	8004032 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2160      	movs	r1, #96	; 0x60
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f949 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e019      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 f8e0 	bl	8003fd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f939 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e009      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f000 f930 	bl	8004092 <TIM_ITRx_SetConfig>
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003e34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a40      	ldr	r2, [pc, #256]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d00f      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3d      	ldr	r2, [pc, #244]	; (8003fb8 <TIM_Base_SetConfig+0x118>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <TIM_Base_SetConfig+0x11c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <TIM_Base_SetConfig+0x120>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d108      	bne.n	8003ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d01b      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <TIM_Base_SetConfig+0x118>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d017      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <TIM_Base_SetConfig+0x11c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <TIM_Base_SetConfig+0x120>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <TIM_Base_SetConfig+0x128>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <TIM_Base_SetConfig+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0x9a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a26      	ldr	r2, [pc, #152]	; (8003fd0 <TIM_Base_SetConfig+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <TIM_Base_SetConfig+0x114>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00f      	beq.n	8003f98 <TIM_Base_SetConfig+0xf8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <TIM_Base_SetConfig+0x124>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <TIM_Base_SetConfig+0xf8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <TIM_Base_SetConfig+0x128>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <TIM_Base_SetConfig+0xf8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <TIM_Base_SetConfig+0x12c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_Base_SetConfig+0xf8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <TIM_Base_SetConfig+0x130>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 030a 	bic.w	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0210 	bic.w	r2, r3, #16
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800405c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	031b      	lsls	r3, r3, #12
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800406e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f043 0307 	orr.w	r3, r3, #7
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	021a      	lsls	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800411c:	2302      	movs	r3, #2
 800411e:	e068      	b.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2e      	ldr	r2, [pc, #184]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2d      	ldr	r2, [pc, #180]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d108      	bne.n	8004166 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800415a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01d      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d018      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1a      	ldr	r2, [pc, #104]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a18      	ldr	r2, [pc, #96]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a13      	ldr	r2, [pc, #76]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10c      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40013400 	.word	0x40013400
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40014000 	.word	0x40014000

08004218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e040      	b.n	80042e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fb0c 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa1a 	bl	80046cc <UART_SetConfig>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e022      	b.n	80042e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fd80 	bl	8004db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fe07 	bl	8004ef4 <UART_CheckIdleState>
 80042e6:	4603      	mov	r3, r0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	2b20      	cmp	r3, #32
 8004306:	f040 8081 	bne.w	800440c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_UART_Transmit+0x26>
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e079      	b.n	800440e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_UART_Transmit+0x38>
 8004324:	2302      	movs	r3, #2
 8004326:	e072      	b.n	800440e <HAL_UART_Transmit+0x11e>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2221      	movs	r2, #33	; 0x21
 800433a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800433c:	f7fd fc7c 	bl	8001c38 <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d108      	bne.n	800436e <HAL_UART_Transmit+0x7e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	e003      	b.n	8004376 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800437e:	e02d      	b.n	80043dc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2200      	movs	r2, #0
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 fdf7 	bl	8004f7e <UART_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e039      	b.n	800440e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ac:	b292      	uxth	r2, r2
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	3302      	adds	r3, #2
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e008      	b.n	80043ca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b292      	uxth	r2, r2
 80043c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	3301      	adds	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1cb      	bne.n	8004380 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2200      	movs	r2, #0
 80043f0:	2140      	movs	r1, #64	; 0x40
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fdc3 	bl	8004f7e <UART_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e005      	b.n	800440e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e000      	b.n	800440e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	f640 030f 	movw	r3, #2063	; 0x80f
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d113      	bne.n	8004470 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8114 	beq.w	800468e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
      }
      return;
 800446e:	e10e      	b.n	800468e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80d6 	beq.w	8004624 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80cb 	beq.w	8004624 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00e      	beq.n	80044b6 <HAL_UART_IRQHandler+0x9e>
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <HAL_UART_IRQHandler+0xc6>
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2202      	movs	r2, #2
 80044d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00e      	beq.n	8004506 <HAL_UART_IRQHandler+0xee>
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d013      	beq.n	8004538 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004520:	2b00      	cmp	r3, #0
 8004522:	d009      	beq.n	8004538 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2208      	movs	r2, #8
 800452a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004530:	f043 0208 	orr.w	r2, r3, #8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00f      	beq.n	8004562 <HAL_UART_IRQHandler+0x14a>
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8093 	beq.w	8004692 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004594:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d004      	beq.n	80045ae <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d031      	beq.n	8004612 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fd60 	bl	8005074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d123      	bne.n	800460a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d013      	beq.n	8004602 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045de:	4a30      	ldr	r2, [pc, #192]	; (80046a0 <HAL_UART_IRQHandler+0x288>)
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd fc14 	bl	8001e14 <HAL_DMA_Abort_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80045fc:	4610      	mov	r0, r2
 80045fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	e00e      	b.n	8004620 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f858 	bl	80046b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	e00a      	b.n	8004620 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f854 	bl	80046b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	e006      	b.n	8004620 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f850 	bl	80046b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800461e:	e038      	b.n	8004692 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	bf00      	nop
    return;
 8004622:	e036      	b.n	8004692 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <HAL_UART_IRQHandler+0x232>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fd65 	bl	8005112 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004648:	e026      	b.n	8004698 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004662:	2b00      	cmp	r3, #0
 8004664:	d017      	beq.n	8004696 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
    }
    return;
 800466e:	e012      	b.n	8004696 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <HAL_UART_IRQHandler+0x280>
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fd2b 	bl	80050e0 <UART_EndTransmit_IT>
    return;
 800468a:	bf00      	nop
 800468c:	e004      	b.n	8004698 <HAL_UART_IRQHandler+0x280>
      return;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <HAL_UART_IRQHandler+0x280>
    return;
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <HAL_UART_IRQHandler+0x280>
    return;
 8004696:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	080050b5 	.word	0x080050b5

080046a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4bb8      	ldr	r3, [pc, #736]	; (80049e4 <UART_SetConfig+0x318>)
 8004702:	4013      	ands	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800470a:	430b      	orrs	r3, r1
 800470c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4aae      	ldr	r2, [pc, #696]	; (80049e8 <UART_SetConfig+0x31c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	4313      	orrs	r3, r2
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4aa5      	ldr	r2, [pc, #660]	; (80049ec <UART_SetConfig+0x320>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d126      	bne.n	80047aa <UART_SetConfig+0xde>
 800475c:	4ba4      	ldr	r3, [pc, #656]	; (80049f0 <UART_SetConfig+0x324>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b03      	cmp	r3, #3
 8004768:	d81a      	bhi.n	80047a0 <UART_SetConfig+0xd4>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0xa4>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004781 	.word	0x08004781
 8004774:	08004791 	.word	0x08004791
 8004778:	08004789 	.word	0x08004789
 800477c:	08004799 	.word	0x08004799
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e105      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004788:	2302      	movs	r3, #2
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478e:	e101      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004790:	2304      	movs	r3, #4
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e0fd      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004798:	2308      	movs	r3, #8
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e0f9      	b.n	8004994 <UART_SetConfig+0x2c8>
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	bf00      	nop
 80047a8:	e0f4      	b.n	8004994 <UART_SetConfig+0x2c8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a91      	ldr	r2, [pc, #580]	; (80049f4 <UART_SetConfig+0x328>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d138      	bne.n	8004826 <UART_SetConfig+0x15a>
 80047b4:	4b8e      	ldr	r3, [pc, #568]	; (80049f0 <UART_SetConfig+0x324>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d82c      	bhi.n	800481c <UART_SetConfig+0x150>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0xfc>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	0800481d 	.word	0x0800481d
 80047d0:	0800481d 	.word	0x0800481d
 80047d4:	0800481d 	.word	0x0800481d
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	0800481d 	.word	0x0800481d
 80047e4:	0800481d 	.word	0x0800481d
 80047e8:	08004805 	.word	0x08004805
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	0800481d 	.word	0x0800481d
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	08004815 	.word	0x08004815
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e0c7      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004804:	2302      	movs	r3, #2
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480a:	e0c3      	b.n	8004994 <UART_SetConfig+0x2c8>
 800480c:	2304      	movs	r3, #4
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004812:	e0bf      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004814:	2308      	movs	r3, #8
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481a:	e0bb      	b.n	8004994 <UART_SetConfig+0x2c8>
 800481c:	2310      	movs	r3, #16
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004822:	bf00      	nop
 8004824:	e0b6      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a73      	ldr	r2, [pc, #460]	; (80049f8 <UART_SetConfig+0x32c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d125      	bne.n	800487c <UART_SetConfig+0x1b0>
 8004830:	4b6f      	ldr	r3, [pc, #444]	; (80049f0 <UART_SetConfig+0x324>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800483a:	2b10      	cmp	r3, #16
 800483c:	d011      	beq.n	8004862 <UART_SetConfig+0x196>
 800483e:	2b10      	cmp	r3, #16
 8004840:	d802      	bhi.n	8004848 <UART_SetConfig+0x17c>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <UART_SetConfig+0x186>
 8004846:	e014      	b.n	8004872 <UART_SetConfig+0x1a6>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d006      	beq.n	800485a <UART_SetConfig+0x18e>
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d00c      	beq.n	800486a <UART_SetConfig+0x19e>
 8004850:	e00f      	b.n	8004872 <UART_SetConfig+0x1a6>
 8004852:	2300      	movs	r3, #0
 8004854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004858:	e09c      	b.n	8004994 <UART_SetConfig+0x2c8>
 800485a:	2302      	movs	r3, #2
 800485c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004860:	e098      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004862:	2304      	movs	r3, #4
 8004864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004868:	e094      	b.n	8004994 <UART_SetConfig+0x2c8>
 800486a:	2308      	movs	r3, #8
 800486c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004870:	e090      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004872:	2310      	movs	r3, #16
 8004874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004878:	bf00      	nop
 800487a:	e08b      	b.n	8004994 <UART_SetConfig+0x2c8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <UART_SetConfig+0x330>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d125      	bne.n	80048d2 <UART_SetConfig+0x206>
 8004886:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <UART_SetConfig+0x324>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d011      	beq.n	80048b8 <UART_SetConfig+0x1ec>
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d802      	bhi.n	800489e <UART_SetConfig+0x1d2>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <UART_SetConfig+0x1dc>
 800489c:	e014      	b.n	80048c8 <UART_SetConfig+0x1fc>
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d006      	beq.n	80048b0 <UART_SetConfig+0x1e4>
 80048a2:	2bc0      	cmp	r3, #192	; 0xc0
 80048a4:	d00c      	beq.n	80048c0 <UART_SetConfig+0x1f4>
 80048a6:	e00f      	b.n	80048c8 <UART_SetConfig+0x1fc>
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e071      	b.n	8004994 <UART_SetConfig+0x2c8>
 80048b0:	2302      	movs	r3, #2
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e06d      	b.n	8004994 <UART_SetConfig+0x2c8>
 80048b8:	2304      	movs	r3, #4
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e069      	b.n	8004994 <UART_SetConfig+0x2c8>
 80048c0:	2308      	movs	r3, #8
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c6:	e065      	b.n	8004994 <UART_SetConfig+0x2c8>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ce:	bf00      	nop
 80048d0:	e060      	b.n	8004994 <UART_SetConfig+0x2c8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4a      	ldr	r2, [pc, #296]	; (8004a00 <UART_SetConfig+0x334>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d129      	bne.n	8004930 <UART_SetConfig+0x264>
 80048dc:	4b44      	ldr	r3, [pc, #272]	; (80049f0 <UART_SetConfig+0x324>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d014      	beq.n	8004916 <UART_SetConfig+0x24a>
 80048ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f0:	d802      	bhi.n	80048f8 <UART_SetConfig+0x22c>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <UART_SetConfig+0x23a>
 80048f6:	e016      	b.n	8004926 <UART_SetConfig+0x25a>
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fc:	d007      	beq.n	800490e <UART_SetConfig+0x242>
 80048fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004902:	d00c      	beq.n	800491e <UART_SetConfig+0x252>
 8004904:	e00f      	b.n	8004926 <UART_SetConfig+0x25a>
 8004906:	2300      	movs	r3, #0
 8004908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490c:	e042      	b.n	8004994 <UART_SetConfig+0x2c8>
 800490e:	2302      	movs	r3, #2
 8004910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004914:	e03e      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004916:	2304      	movs	r3, #4
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491c:	e03a      	b.n	8004994 <UART_SetConfig+0x2c8>
 800491e:	2308      	movs	r3, #8
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004924:	e036      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004926:	2310      	movs	r3, #16
 8004928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492c:	bf00      	nop
 800492e:	e031      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <UART_SetConfig+0x31c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d129      	bne.n	800498e <UART_SetConfig+0x2c2>
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <UART_SetConfig+0x324>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004948:	d014      	beq.n	8004974 <UART_SetConfig+0x2a8>
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d802      	bhi.n	8004956 <UART_SetConfig+0x28a>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <UART_SetConfig+0x298>
 8004954:	e016      	b.n	8004984 <UART_SetConfig+0x2b8>
 8004956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495a:	d007      	beq.n	800496c <UART_SetConfig+0x2a0>
 800495c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004960:	d00c      	beq.n	800497c <UART_SetConfig+0x2b0>
 8004962:	e00f      	b.n	8004984 <UART_SetConfig+0x2b8>
 8004964:	2300      	movs	r3, #0
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496a:	e013      	b.n	8004994 <UART_SetConfig+0x2c8>
 800496c:	2302      	movs	r3, #2
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e00f      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e00b      	b.n	8004994 <UART_SetConfig+0x2c8>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e007      	b.n	8004994 <UART_SetConfig+0x2c8>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <UART_SetConfig+0x2c8>
 800498e:	2310      	movs	r3, #16
 8004990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <UART_SetConfig+0x31c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f040 80fe 	bne.w	8004b9c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d837      	bhi.n	8004a18 <UART_SetConfig+0x34c>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x2e4>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	08004a19 	.word	0x08004a19
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	08004a19 	.word	0x08004a19
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	08004a19 	.word	0x08004a19
 80049c8:	08004a19 	.word	0x08004a19
 80049cc:	08004a19 	.word	0x08004a19
 80049d0:	08004a11 	.word	0x08004a11
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fe f9f2 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 80049d8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049da:	e020      	b.n	8004a1e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <UART_SetConfig+0x338>)
 80049de:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049e0:	e01d      	b.n	8004a1e <UART_SetConfig+0x352>
 80049e2:	bf00      	nop
 80049e4:	efff69f3 	.word	0xefff69f3
 80049e8:	40008000 	.word	0x40008000
 80049ec:	40013800 	.word	0x40013800
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40004400 	.word	0x40004400
 80049f8:	40004800 	.word	0x40004800
 80049fc:	40004c00 	.word	0x40004c00
 8004a00:	40005000 	.word	0x40005000
 8004a04:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004a08:	f7fe f942 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004a0c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a0e:	e006      	b.n	8004a1e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a16:	e002      	b.n	8004a1e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	76fb      	strb	r3, [r7, #27]
        break;
 8004a1c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 81b9 	beq.w	8004d98 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d305      	bcc.n	8004a42 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d902      	bls.n	8004a48 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	76fb      	strb	r3, [r7, #27]
 8004a46:	e1a7      	b.n	8004d98 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	f200 8092 	bhi.w	8004b76 <UART_SetConfig+0x4aa>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <UART_SetConfig+0x38c>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004b77 	.word	0x08004b77
 8004a60:	08004acb 	.word	0x08004acb
 8004a64:	08004b77 	.word	0x08004b77
 8004a68:	08004aff 	.word	0x08004aff
 8004a6c:	08004b77 	.word	0x08004b77
 8004a70:	08004b77 	.word	0x08004b77
 8004a74:	08004b77 	.word	0x08004b77
 8004a78:	08004b4d 	.word	0x08004b4d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7fe f99e 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8004a80:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4619      	mov	r1, r3
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	0214      	lsls	r4, r2, #8
 8004a94:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a98:	020b      	lsls	r3, r1, #8
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6852      	ldr	r2, [r2, #4]
 8004a9e:	0852      	lsrs	r2, r2, #1
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	eb13 0b01 	adds.w	fp, r3, r1
 8004aaa:	eb44 0c02 	adc.w	ip, r4, r2
 8004aae:	4658      	mov	r0, fp
 8004ab0:	4661      	mov	r1, ip
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	461a      	mov	r2, r3
 8004abc:	4623      	mov	r3, r4
 8004abe:	f7fb fbdf 	bl	8000280 <__aeabi_uldivmod>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004ac8:	e058      	b.n	8004b7c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	f04f 0400 	mov.w	r4, #0
 8004ad4:	49ae      	ldr	r1, [pc, #696]	; (8004d90 <UART_SetConfig+0x6c4>)
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	eb13 0b01 	adds.w	fp, r3, r1
 8004ade:	eb44 0c02 	adc.w	ip, r4, r2
 8004ae2:	4658      	mov	r0, fp
 8004ae4:	4661      	mov	r1, ip
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f04f 0400 	mov.w	r4, #0
 8004aee:	461a      	mov	r2, r3
 8004af0:	4623      	mov	r3, r4
 8004af2:	f7fb fbc5 	bl	8000280 <__aeabi_uldivmod>
 8004af6:	4603      	mov	r3, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004afc:	e03e      	b.n	8004b7c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe f8c7 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004b02:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	0214      	lsls	r4, r2, #8
 8004b16:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b1a:	020b      	lsls	r3, r1, #8
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6852      	ldr	r2, [r2, #4]
 8004b20:	0852      	lsrs	r2, r2, #1
 8004b22:	4611      	mov	r1, r2
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	eb13 0b01 	adds.w	fp, r3, r1
 8004b2c:	eb44 0c02 	adc.w	ip, r4, r2
 8004b30:	4658      	mov	r0, fp
 8004b32:	4661      	mov	r1, ip
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f04f 0400 	mov.w	r4, #0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4623      	mov	r3, r4
 8004b40:	f7fb fb9e 	bl	8000280 <__aeabi_uldivmod>
 8004b44:	4603      	mov	r3, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b4a:	e017      	b.n	8004b7c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004b5a:	f144 0100 	adc.w	r1, r4, #0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	461a      	mov	r2, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	f7fb fb89 	bl	8000280 <__aeabi_uldivmod>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b74:	e002      	b.n	8004b7c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	76fb      	strb	r3, [r7, #27]
            break;
 8004b7a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b82:	d308      	bcc.n	8004b96 <UART_SetConfig+0x4ca>
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8a:	d204      	bcs.n	8004b96 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e100      	b.n	8004d98 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	76fb      	strb	r3, [r7, #27]
 8004b9a:	e0fd      	b.n	8004d98 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	f040 8084 	bne.w	8004cb0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d85f      	bhi.n	8004c70 <UART_SetConfig+0x5a4>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x4ec>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004c1d 	.word	0x08004c1d
 8004bc4:	08004c71 	.word	0x08004c71
 8004bc8:	08004c39 	.word	0x08004c39
 8004bcc:	08004c71 	.word	0x08004c71
 8004bd0:	08004c71 	.word	0x08004c71
 8004bd4:	08004c71 	.word	0x08004c71
 8004bd8:	08004c59 	.word	0x08004c59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7fe f8ee 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8004be0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	005a      	lsls	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bfa:	e03c      	b.n	8004c76 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bfc:	f7fe f8f4 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8004c00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	005a      	lsls	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c1a:	e02c      	b.n	8004c76 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004c26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6852      	ldr	r2, [r2, #4]
 8004c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c36:	e01e      	b.n	8004c76 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c38:	f7fe f82a 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004c3c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	005a      	lsls	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c56:	e00e      	b.n	8004c76 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c6e:	e002      	b.n	8004c76 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	76fb      	strb	r3, [r7, #27]
        break;
 8004c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	2b0f      	cmp	r3, #15
 8004c7a:	d916      	bls.n	8004caa <UART_SetConfig+0x5de>
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c82:	d212      	bcs.n	8004caa <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f023 030f 	bic.w	r3, r3, #15
 8004c8c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	89fb      	ldrh	r3, [r7, #14]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	89fa      	ldrh	r2, [r7, #14]
 8004ca6:	60da      	str	r2, [r3, #12]
 8004ca8:	e076      	b.n	8004d98 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	76fb      	strb	r3, [r7, #27]
 8004cae:	e073      	b.n	8004d98 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d85c      	bhi.n	8004d72 <UART_SetConfig+0x6a6>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0x5f4>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d73 	.word	0x08004d73
 8004cd0:	08004d3d 	.word	0x08004d3d
 8004cd4:	08004d73 	.word	0x08004d73
 8004cd8:	08004d73 	.word	0x08004d73
 8004cdc:	08004d73 	.word	0x08004d73
 8004ce0:	08004d5b 	.word	0x08004d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fe f86a 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8004ce8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	085a      	lsrs	r2, r3, #1
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	441a      	add	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d00:	e03a      	b.n	8004d78 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d02:	f7fe f871 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8004d06:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	085a      	lsrs	r2, r3, #1
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d1e:	e02b      	b.n	8004d78 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004d2a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6852      	ldr	r2, [r2, #4]
 8004d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d3a:	e01d      	b.n	8004d78 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3c:	f7fd ffa8 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004d40:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	085a      	lsrs	r2, r3, #1
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	441a      	add	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d58:	e00e      	b.n	8004d78 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d70:	e002      	b.n	8004d78 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	76fb      	strb	r3, [r7, #27]
        break;
 8004d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b0f      	cmp	r3, #15
 8004d7c:	d90a      	bls.n	8004d94 <UART_SetConfig+0x6c8>
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d206      	bcs.n	8004d94 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e003      	b.n	8004d98 <UART_SetConfig+0x6cc>
 8004d90:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004da4:	7efb      	ldrb	r3, [r7, #27]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3728      	adds	r7, #40	; 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eae:	d10a      	bne.n	8004ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004f02:	f7fc fe99 	bl	8001c38 <HAL_GetTick>
 8004f06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d10e      	bne.n	8004f34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f82a 	bl	8004f7e <UART_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e020      	b.n	8004f76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d10e      	bne.n	8004f60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f814 	bl	8004f7e <UART_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e00a      	b.n	8004f76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8e:	e05d      	b.n	800504c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d059      	beq.n	800504c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f98:	f7fc fe4e 	bl	8001c38 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11b      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e042      	b.n	800506c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02b      	beq.n	800504c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005002:	d123      	bne.n	800504c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800500c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800501c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e00f      	b.n	800506c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	429a      	cmp	r2, r3
 8005068:	d092      	beq.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800508a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff faf0 	bl	80046b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff facd 	bl	80046a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513a:	f3ef 8305 	mrs	r3, IPSR
 800513e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005140:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005146:	f3ef 8310 	mrs	r3, PRIMASK
 800514a:	607b      	str	r3, [r7, #4]
  return(result);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005152:	f3ef 8311 	mrs	r3, BASEPRI
 8005156:	603b      	str	r3, [r7, #0]
  return(result);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <osKernelInitialize+0x3a>
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <osKernelInitialize+0x64>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d103      	bne.n	800516e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005166:	f06f 0305 	mvn.w	r3, #5
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e00c      	b.n	8005188 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <osKernelInitialize+0x64>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d105      	bne.n	8005182 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <osKernelInitialize+0x64>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e002      	b.n	8005188 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005188:	68fb      	ldr	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000144 	.word	0x20000144

0800519c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a2:	f3ef 8305 	mrs	r3, IPSR
 80051a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80051a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ae:	f3ef 8310 	mrs	r3, PRIMASK
 80051b2:	607b      	str	r3, [r7, #4]
  return(result);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051ba:	f3ef 8311 	mrs	r3, BASEPRI
 80051be:	603b      	str	r3, [r7, #0]
  return(result);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <osKernelStart+0x3a>
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <osKernelStart+0x68>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d103      	bne.n	80051d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80051ce:	f06f 0305 	mvn.w	r3, #5
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e010      	b.n	80051f8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <osKernelStart+0x68>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d109      	bne.n	80051f2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80051de:	f7ff ffa2 	bl	8005126 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <osKernelStart+0x68>)
 80051e4:	2202      	movs	r2, #2
 80051e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051e8:	f001 fcea 	bl	8006bc0 <vTaskStartScheduler>
      stat = osOK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e002      	b.n	80051f8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295
 80051f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000144 	.word	0x20000144

08005208 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b090      	sub	sp, #64	; 0x40
 800520c:	af04      	add	r7, sp, #16
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005218:	f3ef 8305 	mrs	r3, IPSR
 800521c:	61fb      	str	r3, [r7, #28]
  return(result);
 800521e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 808f 	bne.w	8005344 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005226:	f3ef 8310 	mrs	r3, PRIMASK
 800522a:	61bb      	str	r3, [r7, #24]
  return(result);
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d105      	bne.n	800523e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005232:	f3ef 8311 	mrs	r3, BASEPRI
 8005236:	617b      	str	r3, [r7, #20]
  return(result);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <osThreadNew+0x3e>
 800523e:	4b44      	ldr	r3, [pc, #272]	; (8005350 <osThreadNew+0x148>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d07e      	beq.n	8005344 <osThreadNew+0x13c>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d07b      	beq.n	8005344 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005250:	2318      	movs	r3, #24
 8005252:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d045      	beq.n	80052f0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <osThreadNew+0x6a>
        name = attr->name;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <osThreadNew+0x90>
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	2b38      	cmp	r3, #56	; 0x38
 800528a:	d805      	bhi.n	8005298 <osThreadNew+0x90>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <osThreadNew+0x94>
        return (NULL);
 8005298:	2300      	movs	r3, #0
 800529a:	e054      	b.n	8005346 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <osThreadNew+0xca>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b5b      	cmp	r3, #91	; 0x5b
 80052ba:	d90a      	bls.n	80052d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d006      	beq.n	80052d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <osThreadNew+0xca>
        mem = 1;
 80052cc:	2301      	movs	r3, #1
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	e010      	b.n	80052f4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10c      	bne.n	80052f4 <osThreadNew+0xec>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <osThreadNew+0xec>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <osThreadNew+0xec>
          mem = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	e001      	b.n	80052f4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d110      	bne.n	800531c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005302:	9202      	str	r2, [sp, #8]
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f001 fa7f 	bl	8006814 <xTaskCreateStatic>
 8005316:	4603      	mov	r3, r0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	e013      	b.n	8005344 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d110      	bne.n	8005344 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	b29a      	uxth	r2, r3
 8005326:	f107 0310 	add.w	r3, r7, #16
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f001 fac7 	bl	80068c8 <xTaskCreate>
 800533a:	4603      	mov	r3, r0
 800533c:	2b01      	cmp	r3, #1
 800533e:	d001      	beq.n	8005344 <osThreadNew+0x13c>
          hTask = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005344:	693b      	ldr	r3, [r7, #16]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3730      	adds	r7, #48	; 0x30
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000144 	.word	0x20000144

08005354 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535c:	f3ef 8305 	mrs	r3, IPSR
 8005360:	613b      	str	r3, [r7, #16]
  return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10f      	bne.n	8005388 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005368:	f3ef 8310 	mrs	r3, PRIMASK
 800536c:	60fb      	str	r3, [r7, #12]
  return(result);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005374:	f3ef 8311 	mrs	r3, BASEPRI
 8005378:	60bb      	str	r3, [r7, #8]
  return(result);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <osDelay+0x3c>
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <osDelay+0x58>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d103      	bne.n	8005390 <osDelay+0x3c>
    stat = osErrorISR;
 8005388:	f06f 0305 	mvn.w	r3, #5
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e007      	b.n	80053a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 fbdc 	bl	8006b58 <vTaskDelay>
    }
  }

  return (stat);
 80053a0:	697b      	ldr	r3, [r7, #20]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000144 	.word	0x20000144

080053b0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	; 0x30
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c0:	f3ef 8305 	mrs	r3, IPSR
 80053c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80053c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f040 8087 	bne.w	80054dc <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ce:	f3ef 8310 	mrs	r3, PRIMASK
 80053d2:	617b      	str	r3, [r7, #20]
  return(result);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053da:	f3ef 8311 	mrs	r3, BASEPRI
 80053de:	613b      	str	r3, [r7, #16]
  return(result);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <osSemaphoreNew+0x3e>
 80053e6:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <osSemaphoreNew+0x138>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d076      	beq.n	80054dc <osSemaphoreNew+0x12c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d073      	beq.n	80054dc <osSemaphoreNew+0x12c>
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d86f      	bhi.n	80054dc <osSemaphoreNew+0x12c>
    mem = -1;
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005400:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d006      	beq.n	800541e <osSemaphoreNew+0x6e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b4f      	cmp	r3, #79	; 0x4f
 8005416:	d902      	bls.n	800541e <osSemaphoreNew+0x6e>
        mem = 1;
 8005418:	2301      	movs	r3, #1
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	e00c      	b.n	8005438 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <osSemaphoreNew+0x88>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <osSemaphoreNew+0x88>
          mem = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	623b      	str	r3, [r7, #32]
 8005432:	e001      	b.n	8005438 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d04d      	beq.n	80054dc <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d129      	bne.n	800549a <osSemaphoreNew+0xea>
        if (mem == 1) {
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10b      	bne.n	8005464 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	2303      	movs	r3, #3
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	2200      	movs	r2, #0
 8005458:	2100      	movs	r1, #0
 800545a:	2001      	movs	r0, #1
 800545c:	f000 fa54 	bl	8005908 <xQueueGenericCreateStatic>
 8005460:	6278      	str	r0, [r7, #36]	; 0x24
 8005462:	e005      	b.n	8005470 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005464:	2203      	movs	r2, #3
 8005466:	2100      	movs	r1, #0
 8005468:	2001      	movs	r0, #1
 800546a:	f000 fac0 	bl	80059ee <xQueueGenericCreate>
 800546e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d022      	beq.n	80054bc <osSemaphoreNew+0x10c>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01f      	beq.n	80054bc <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800547c:	2300      	movs	r3, #0
 800547e:	2200      	movs	r2, #0
 8005480:	2100      	movs	r1, #0
 8005482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005484:	f000 fb7c 	bl	8005b80 <xQueueGenericSend>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d016      	beq.n	80054bc <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800548e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005490:	f000 ffef 	bl	8006472 <vQueueDelete>
            hSemaphore = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
 8005498:	e010      	b.n	80054bc <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d108      	bne.n	80054b2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	461a      	mov	r2, r3
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fb02 	bl	8005ab2 <xQueueCreateCountingSemaphoreStatic>
 80054ae:	6278      	str	r0, [r7, #36]	; 0x24
 80054b0:	e004      	b.n	80054bc <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fb31 	bl	8005b1c <xQueueCreateCountingSemaphore>
 80054ba:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <osSemaphoreNew+0x120>
          name = attr->name;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e001      	b.n	80054d4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80054d4:	69f9      	ldr	r1, [r7, #28]
 80054d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054d8:	f001 f916 	bl	8006708 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000144 	.word	0x20000144

080054ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005504:	f06f 0303 	mvn.w	r3, #3
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e04b      	b.n	80055a4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800550c:	f3ef 8305 	mrs	r3, IPSR
 8005510:	617b      	str	r3, [r7, #20]
  return(result);
 8005512:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005518:	f3ef 8310 	mrs	r3, PRIMASK
 800551c:	613b      	str	r3, [r7, #16]
  return(result);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005524:	f3ef 8311 	mrs	r3, BASEPRI
 8005528:	60fb      	str	r3, [r7, #12]
  return(result);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d026      	beq.n	800557e <osSemaphoreAcquire+0x92>
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <osSemaphoreAcquire+0xc4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d122      	bne.n	800557e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800553e:	f06f 0303 	mvn.w	r3, #3
 8005542:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005544:	e02d      	b.n	80055a2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800554a:	f107 0308 	add.w	r3, r7, #8
 800554e:	461a      	mov	r2, r3
 8005550:	2100      	movs	r1, #0
 8005552:	69b8      	ldr	r0, [r7, #24]
 8005554:	f000 ff10 	bl	8006378 <xQueueReceiveFromISR>
 8005558:	4603      	mov	r3, r0
 800555a:	2b01      	cmp	r3, #1
 800555c:	d003      	beq.n	8005566 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800555e:	f06f 0302 	mvn.w	r3, #2
 8005562:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005564:	e01d      	b.n	80055a2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01a      	beq.n	80055a2 <osSemaphoreAcquire+0xb6>
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <osSemaphoreAcquire+0xc8>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800557c:	e011      	b.n	80055a2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	69b8      	ldr	r0, [r7, #24]
 8005582:	f000 fdf1 	bl	8006168 <xQueueSemaphoreTake>
 8005586:	4603      	mov	r3, r0
 8005588:	2b01      	cmp	r3, #1
 800558a:	d00b      	beq.n	80055a4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005592:	f06f 0301 	mvn.w	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e004      	b.n	80055a4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800559a:	f06f 0302 	mvn.w	r3, #2
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e000      	b.n	80055a4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80055a2:	bf00      	nop
      }
    }
  }

  return (stat);
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000144 	.word	0x20000144
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80055ce:	f06f 0303 	mvn.w	r3, #3
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	e03e      	b.n	8005654 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d6:	f3ef 8305 	mrs	r3, IPSR
 80055da:	617b      	str	r3, [r7, #20]
  return(result);
 80055dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	613b      	str	r3, [r7, #16]
  return(result);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d105      	bne.n	80055fa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055ee:	f3ef 8311 	mrs	r3, BASEPRI
 80055f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01e      	beq.n	8005638 <osSemaphoreRelease+0x80>
 80055fa:	4b19      	ldr	r3, [pc, #100]	; (8005660 <osSemaphoreRelease+0xa8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d11a      	bne.n	8005638 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4619      	mov	r1, r3
 800560c:	69b8      	ldr	r0, [r7, #24]
 800560e:	f000 fc45 	bl	8005e9c <xQueueGiveFromISR>
 8005612:	4603      	mov	r3, r0
 8005614:	2b01      	cmp	r3, #1
 8005616:	d003      	beq.n	8005620 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005618:	f06f 0302 	mvn.w	r3, #2
 800561c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800561e:	e018      	b.n	8005652 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d015      	beq.n	8005652 <osSemaphoreRelease+0x9a>
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <osSemaphoreRelease+0xac>)
 8005628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005636:	e00c      	b.n	8005652 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005638:	2300      	movs	r3, #0
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	69b8      	ldr	r0, [r7, #24]
 8005640:	f000 fa9e 	bl	8005b80 <xQueueGenericSend>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d004      	beq.n	8005654 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800564a:	f06f 0302 	mvn.w	r3, #2
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	e000      	b.n	8005654 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005652:	bf00      	nop
    }
  }

  return (stat);
 8005654:	69fb      	ldr	r3, [r7, #28]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000144 	.word	0x20000144
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a07      	ldr	r2, [pc, #28]	; (8005694 <vApplicationGetIdleTaskMemory+0x2c>)
 8005678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4a06      	ldr	r2, [pc, #24]	; (8005698 <vApplicationGetIdleTaskMemory+0x30>)
 800567e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000148 	.word	0x20000148
 8005698:	200001a4 	.word	0x200001a4

0800569c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a07      	ldr	r2, [pc, #28]	; (80056c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80056ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a06      	ldr	r2, [pc, #24]	; (80056cc <vApplicationGetTimerTaskMemory+0x30>)
 80056b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ba:	601a      	str	r2, [r3, #0]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	200003a4 	.word	0x200003a4
 80056cc:	20000400 	.word	0x20000400

080056d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f103 0208 	add.w	r2, r3, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f04f 32ff 	mov.w	r2, #4294967295
 80056e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f103 0208 	add.w	r2, r3, #8
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f103 0208 	add.w	r2, r3, #8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d103      	bne.n	8005792 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e00c      	b.n	80057ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3308      	adds	r3, #8
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e002      	b.n	80057a0 <vListInsert+0x2e>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d2f6      	bcs.n	800579a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	601a      	str	r2, [r3, #0]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6892      	ldr	r2, [r2, #8]
 80057fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6852      	ldr	r2, [r2, #4]
 8005804:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d103      	bne.n	8005818 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1e5a      	subs	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	e7fe      	b.n	800585e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005860:	f002 fc44 	bl	80080ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586c:	68f9      	ldr	r1, [r7, #12]
 800586e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005890:	3b01      	subs	r3, #1
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	441a      	add	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	22ff      	movs	r2, #255	; 0xff
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	22ff      	movs	r2, #255	; 0xff
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d114      	bne.n	80058e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d01a      	beq.n	80058f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3310      	adds	r3, #16
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 fbfc 	bl	80070c0 <xTaskRemoveFromEventList>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058ce:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <xQueueGenericReset+0xcc>)
 80058d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	e009      	b.n	80058f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3310      	adds	r3, #16
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fef3 	bl	80056d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3324      	adds	r3, #36	; 0x24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff feee 	bl	80056d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058f4:	f002 fc28 	bl	8008148 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058f8:	2301      	movs	r3, #1
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08e      	sub	sp, #56	; 0x38
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <xQueueGenericCreateStatic+0x28>
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
 800592e:	e7fe      	b.n	800592e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <xQueueGenericCreateStatic+0x42>
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
 8005948:	e7fe      	b.n	8005948 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <xQueueGenericCreateStatic+0x4e>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <xQueueGenericCreateStatic+0x52>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <xQueueGenericCreateStatic+0x54>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <xQueueGenericCreateStatic+0x6c>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	e7fe      	b.n	8005972 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <xQueueGenericCreateStatic+0x78>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <xQueueGenericCreateStatic+0x7c>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <xQueueGenericCreateStatic+0x7e>
 8005984:	2300      	movs	r3, #0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <xQueueGenericCreateStatic+0x96>
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	e7fe      	b.n	800599c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800599e:	2350      	movs	r3, #80	; 0x50
 80059a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b50      	cmp	r3, #80	; 0x50
 80059a6:	d009      	beq.n	80059bc <xQueueGenericCreateStatic+0xb4>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	e7fe      	b.n	80059ba <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00d      	beq.n	80059e4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f844 	bl	8005a6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3730      	adds	r7, #48	; 0x30
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b08a      	sub	sp, #40	; 0x28
 80059f2:	af02      	add	r7, sp, #8
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	4613      	mov	r3, r2
 80059fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <xQueueGenericCreate+0x28>
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	e004      	b.n	8005a2c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3350      	adds	r3, #80	; 0x50
 8005a30:	4618      	mov	r0, r3
 8005a32:	f002 fc75 	bl	8008320 <pvPortMalloc>
 8005a36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d011      	beq.n	8005a62 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	3350      	adds	r3, #80	; 0x50
 8005a46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a50:	79fa      	ldrb	r2, [r7, #7]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	4613      	mov	r3, r2
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f805 	bl	8005a6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a62:	69bb      	ldr	r3, [r7, #24]
	}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d103      	bne.n	8005a88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	69b8      	ldr	r0, [r7, #24]
 8005a9e:	f7ff fecb 	bl	8005838 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b08a      	sub	sp, #40	; 0x28
 8005ab6:	af02      	add	r7, sp, #8
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <xQueueCreateCountingSemaphoreStatic+0x26>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e7fe      	b.n	8005ad6 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d909      	bls.n	8005af4 <xQueueCreateCountingSemaphoreStatic+0x42>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e7fe      	b.n	8005af2 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005af4:	2302      	movs	r3, #2
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	2100      	movs	r1, #0
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ff02 	bl	8005908 <xQueueGenericCreateStatic>
 8005b04:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b12:	69fb      	ldr	r3, [r7, #28]
	}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <xQueueCreateCountingSemaphore+0x24>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e7fe      	b.n	8005b3e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d909      	bls.n	8005b5c <xQueueCreateCountingSemaphore+0x40>
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e7fe      	b.n	8005b5a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	2100      	movs	r1, #0
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff ff44 	bl	80059ee <xQueueGenericCreate>
 8005b66:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b74:	697b      	ldr	r3, [r7, #20]
	}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08e      	sub	sp, #56	; 0x38
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <xQueueGenericSend+0x30>
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bae:	e7fe      	b.n	8005bae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <xQueueGenericSend+0x3e>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <xQueueGenericSend+0x42>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <xQueueGenericSend+0x44>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <xQueueGenericSend+0x5c>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bda:	e7fe      	b.n	8005bda <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d103      	bne.n	8005bea <xQueueGenericSend+0x6a>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <xQueueGenericSend+0x6e>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <xQueueGenericSend+0x70>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <xQueueGenericSend+0x88>
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	e7fe      	b.n	8005c06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c08:	f001 fc20 	bl	800744c <xTaskGetSchedulerState>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <xQueueGenericSend+0x98>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <xQueueGenericSend+0x9c>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <xQueueGenericSend+0x9e>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <xQueueGenericSend+0xb6>
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	e7fe      	b.n	8005c34 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c36:	f002 fa59 	bl	80080ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d302      	bcc.n	8005c4c <xQueueGenericSend+0xcc>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d129      	bne.n	8005ca0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c52:	f000 fc48 	bl	80064e6 <prvCopyDataToQueue>
 8005c56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d010      	beq.n	8005c82 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	3324      	adds	r3, #36	; 0x24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fa2b 	bl	80070c0 <xTaskRemoveFromEventList>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c70:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <xQueueGenericSend+0x1f0>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	e00a      	b.n	8005c98 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c88:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <xQueueGenericSend+0x1f0>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c98:	f002 fa56 	bl	8008148 <vPortExitCritical>
				return pdPASS;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e063      	b.n	8005d68 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ca6:	f002 fa4f 	bl	8008148 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e05c      	b.n	8005d68 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cb4:	f107 0314 	add.w	r3, r7, #20
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 fa63 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cc2:	f002 fa41 	bl	8008148 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cc6:	f000 ffdf 	bl	8006c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cca:	f002 fa0f 	bl	80080ec <vPortEnterCritical>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd4:	b25b      	sxtb	r3, r3
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d103      	bne.n	8005ce4 <xQueueGenericSend+0x164>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cea:	b25b      	sxtb	r3, r3
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d103      	bne.n	8005cfa <xQueueGenericSend+0x17a>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cfa:	f002 fa25 	bl	8008148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cfe:	1d3a      	adds	r2, r7, #4
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 fa52 	bl	80071b0 <xTaskCheckForTimeOut>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d124      	bne.n	8005d5c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d14:	f000 fcdf 	bl	80066d6 <prvIsQueueFull>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	3310      	adds	r3, #16
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4611      	mov	r1, r2
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 f97c 	bl	8007024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2e:	f000 fc6a 	bl	8006606 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d32:	f000 ffb7 	bl	8006ca4 <xTaskResumeAll>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f47f af7c 	bne.w	8005c36 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <xQueueGenericSend+0x1f0>)
 8005d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	e772      	b.n	8005c36 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d52:	f000 fc58 	bl	8006606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d56:	f000 ffa5 	bl	8006ca4 <xTaskResumeAll>
 8005d5a:	e76c      	b.n	8005c36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d5e:	f000 fc52 	bl	8006606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d62:	f000 ff9f 	bl	8006ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3738      	adds	r7, #56	; 0x38
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08e      	sub	sp, #56	; 0x38
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <xQueueGenericSendFromISR+0x2c>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9e:	e7fe      	b.n	8005d9e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <xQueueGenericSendFromISR+0x3a>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <xQueueGenericSendFromISR+0x3e>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <xQueueGenericSendFromISR+0x40>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <xQueueGenericSendFromISR+0x58>
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	e7fe      	b.n	8005dca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d103      	bne.n	8005dda <xQueueGenericSendFromISR+0x66>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <xQueueGenericSendFromISR+0x6a>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <xQueueGenericSendFromISR+0x6c>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <xQueueGenericSendFromISR+0x84>
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	e7fe      	b.n	8005df6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005df8:	f002 fa54 	bl	80082a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dfc:	f3ef 8211 	mrs	r2, BASEPRI
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61ba      	str	r2, [r7, #24]
 8005e12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d302      	bcc.n	8005e2a <xQueueGenericSendFromISR+0xb6>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d12c      	bne.n	8005e84 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e3a:	f000 fb54 	bl	80064e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d112      	bne.n	8005e6e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	3324      	adds	r3, #36	; 0x24
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 f933 	bl	80070c0 <xTaskRemoveFromEventList>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00e      	beq.n	8005e7e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e007      	b.n	8005e7e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e72:	3301      	adds	r3, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	b25a      	sxtb	r2, r3
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005e82:	e001      	b.n	8005e88 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3738      	adds	r7, #56	; 0x38
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	e7fe      	b.n	8005ec2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d009      	beq.n	8005ee0 <xQueueGiveFromISR+0x44>
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	e7fe      	b.n	8005ede <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <xQueueGiveFromISR+0x54>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <xQueueGiveFromISR+0x58>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <xQueueGiveFromISR+0x5a>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <xQueueGiveFromISR+0x72>
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f0e:	f002 f9c9 	bl	80082a4 <vPortValidateInterruptPriority>
	__asm volatile
 8005f12:	f3ef 8211 	mrs	r2, BASEPRI
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	617a      	str	r2, [r7, #20]
 8005f28:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d22b      	bcs.n	8005f96 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d112      	bne.n	8005f80 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d016      	beq.n	8005f90 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	3324      	adds	r3, #36	; 0x24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 f8aa 	bl	80070c0 <xTaskRemoveFromEventList>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00e      	beq.n	8005f90 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e007      	b.n	8005f90 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f84:	3301      	adds	r3, #1
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	b25a      	sxtb	r2, r3
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f90:	2301      	movs	r3, #1
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
 8005f94:	e001      	b.n	8005f9a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3738      	adds	r7, #56	; 0x38
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08c      	sub	sp, #48	; 0x30
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <xQueueReceive+0x2e>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	623b      	str	r3, [r7, #32]
 8005fdc:	e7fe      	b.n	8005fdc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <xQueueReceive+0x3c>
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <xQueueReceive+0x40>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <xQueueReceive+0x42>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <xQueueReceive+0x5a>
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61fb      	str	r3, [r7, #28]
 8006008:	e7fe      	b.n	8006008 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800600a:	f001 fa1f 	bl	800744c <xTaskGetSchedulerState>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <xQueueReceive+0x6a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <xQueueReceive+0x6e>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <xQueueReceive+0x70>
 800601e:	2300      	movs	r3, #0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <xQueueReceive+0x88>
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e7fe      	b.n	8006036 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006038:	f002 f858 	bl	80080ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01f      	beq.n	8006088 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604c:	f000 fab5 	bl	80065ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	1e5a      	subs	r2, r3, #1
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00f      	beq.n	8006080 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	3310      	adds	r3, #16
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f82b 	bl	80070c0 <xTaskRemoveFromEventList>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006070:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <xQueueReceive+0x1b4>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006080:	f002 f862 	bl	8008148 <vPortExitCritical>
				return pdPASS;
 8006084:	2301      	movs	r3, #1
 8006086:	e069      	b.n	800615c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800608e:	f002 f85b 	bl	8008148 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006092:	2300      	movs	r3, #0
 8006094:	e062      	b.n	800615c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 f86f 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060aa:	f002 f84d 	bl	8008148 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ae:	f000 fdeb 	bl	8006c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060b2:	f002 f81b 	bl	80080ec <vPortEnterCritical>
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d103      	bne.n	80060cc <xQueueReceive+0x11c>
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d2:	b25b      	sxtb	r3, r3
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d103      	bne.n	80060e2 <xQueueReceive+0x132>
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060e2:	f002 f831 	bl	8008148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060e6:	1d3a      	adds	r2, r7, #4
 80060e8:	f107 0310 	add.w	r3, r7, #16
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 f85e 	bl	80071b0 <xTaskCheckForTimeOut>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d123      	bne.n	8006142 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060fc:	f000 fad5 	bl	80066aa <prvIsQueueEmpty>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d017      	beq.n	8006136 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	3324      	adds	r3, #36	; 0x24
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4611      	mov	r1, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f000 ff88 	bl	8007024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006116:	f000 fa76 	bl	8006606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800611a:	f000 fdc3 	bl	8006ca4 <xTaskResumeAll>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d189      	bne.n	8006038 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006124:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <xQueueReceive+0x1b4>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	e780      	b.n	8006038 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006138:	f000 fa65 	bl	8006606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800613c:	f000 fdb2 	bl	8006ca4 <xTaskResumeAll>
 8006140:	e77a      	b.n	8006038 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006144:	f000 fa5f 	bl	8006606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006148:	f000 fdac 	bl	8006ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800614c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614e:	f000 faac 	bl	80066aa <prvIsQueueEmpty>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f43f af6f 	beq.w	8006038 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800615a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800615c:	4618      	mov	r0, r3
 800615e:	3730      	adds	r7, #48	; 0x30
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d109      	bne.n	8006198 <xQueueSemaphoreTake+0x30>
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	e7fe      	b.n	8006196 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <xQueueSemaphoreTake+0x4c>
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e7fe      	b.n	80061b2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b4:	f001 f94a 	bl	800744c <xTaskGetSchedulerState>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <xQueueSemaphoreTake+0x5c>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <xQueueSemaphoreTake+0x60>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <xQueueSemaphoreTake+0x62>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <xQueueSemaphoreTake+0x7a>
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	e7fe      	b.n	80061e0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e2:	f001 ff83 	bl	80080ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d024      	beq.n	800623c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	1e5a      	subs	r2, r3, #1
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006202:	f001 fa95 	bl	8007730 <pvTaskIncrementMutexHeldCount>
 8006206:	4602      	mov	r2, r0
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00f      	beq.n	8006234 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	3310      	adds	r3, #16
 8006218:	4618      	mov	r0, r3
 800621a:	f000 ff51 	bl	80070c0 <xTaskRemoveFromEventList>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <xQueueSemaphoreTake+0x20c>)
 8006226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006234:	f001 ff88 	bl	8008148 <vPortExitCritical>
				return pdPASS;
 8006238:	2301      	movs	r3, #1
 800623a:	e096      	b.n	800636a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d110      	bne.n	8006264 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <xQueueSemaphoreTake+0xf4>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e7fe      	b.n	800625a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800625c:	f001 ff74 	bl	8008148 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006260:	2300      	movs	r3, #0
 8006262:	e082      	b.n	800636a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	4618      	mov	r0, r3
 8006270:	f000 ff88 	bl	8007184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006278:	f001 ff66 	bl	8008148 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800627c:	f000 fd04 	bl	8006c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006280:	f001 ff34 	bl	80080ec <vPortEnterCritical>
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800628a:	b25b      	sxtb	r3, r3
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d103      	bne.n	800629a <xQueueSemaphoreTake+0x132>
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d103      	bne.n	80062b0 <xQueueSemaphoreTake+0x148>
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b0:	f001 ff4a 	bl	8008148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b4:	463a      	mov	r2, r7
 80062b6:	f107 030c 	add.w	r3, r7, #12
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 ff77 	bl	80071b0 <xTaskCheckForTimeOut>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d132      	bne.n	800632e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062ca:	f000 f9ee 	bl	80066aa <prvIsQueueEmpty>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d026      	beq.n	8006322 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80062dc:	f001 ff06 	bl	80080ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f8cf 	bl	8007488 <xTaskPriorityInherit>
 80062ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80062ec:	f001 ff2c 	bl	8008148 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	3324      	adds	r3, #36	; 0x24
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fe93 	bl	8007024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006300:	f000 f981 	bl	8006606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006304:	f000 fcce 	bl	8006ca4 <xTaskResumeAll>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	f47f af69 	bne.w	80061e2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006310:	4b18      	ldr	r3, [pc, #96]	; (8006374 <xQueueSemaphoreTake+0x20c>)
 8006312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	e75f      	b.n	80061e2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006324:	f000 f96f 	bl	8006606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006328:	f000 fcbc 	bl	8006ca4 <xTaskResumeAll>
 800632c:	e759      	b.n	80061e2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800632e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006330:	f000 f969 	bl	8006606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006334:	f000 fcb6 	bl	8006ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800633a:	f000 f9b6 	bl	80066aa <prvIsQueueEmpty>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	f43f af4e 	beq.w	80061e2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800634c:	f001 fece 	bl	80080ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006352:	f000 f8b0 	bl	80064b6 <prvGetDisinheritPriorityAfterTimeout>
 8006356:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f966 	bl	8007630 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006364:	f001 fef0 	bl	8008148 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800636a:	4618      	mov	r0, r3
 800636c:	3738      	adds	r7, #56	; 0x38
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08e      	sub	sp, #56	; 0x38
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <xQueueReceiveFromISR+0x2a>
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	623b      	str	r3, [r7, #32]
 80063a0:	e7fe      	b.n	80063a0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <xQueueReceiveFromISR+0x38>
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <xQueueReceiveFromISR+0x3c>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <xQueueReceiveFromISR+0x3e>
 80063b4:	2300      	movs	r3, #0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <xQueueReceiveFromISR+0x56>
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	e7fe      	b.n	80063cc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ce:	f001 ff69 	bl	80082a4 <vPortValidateInterruptPriority>
	__asm volatile
 80063d2:	f3ef 8211 	mrs	r2, BASEPRI
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	61ba      	str	r2, [r7, #24]
 80063e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d02f      	beq.n	800645a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006408:	f000 f8d7 	bl	80065ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	1e5a      	subs	r2, r3, #1
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006414:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d112      	bne.n	8006444 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d016      	beq.n	8006454 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	3310      	adds	r3, #16
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fe48 	bl	80070c0 <xTaskRemoveFromEventList>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e007      	b.n	8006454 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006448:	3301      	adds	r3, #1
 800644a:	b2db      	uxtb	r3, r3
 800644c:	b25a      	sxtb	r2, r3
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006454:	2301      	movs	r3, #1
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
 8006458:	e001      	b.n	800645e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800645a:	2300      	movs	r3, #0
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800646a:	4618      	mov	r0, r3
 800646c:	3738      	adds	r7, #56	; 0x38
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <vQueueDelete+0x26>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	60bb      	str	r3, [r7, #8]
 8006496:	e7fe      	b.n	8006496 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f95d 	bl	8006758 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f001 fffb 	bl	80084a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d006      	beq.n	80064d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e001      	b.n	80064d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064d8:	68fb      	ldr	r3, [r7, #12]
	}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b086      	sub	sp, #24
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10d      	bne.n	8006520 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d14d      	bne.n	80065a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f001 f821 	bl	8007558 <xTaskPriorityDisinherit>
 8006516:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	609a      	str	r2, [r3, #8]
 800651e:	e043      	b.n	80065a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d119      	bne.n	800655a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6858      	ldr	r0, [r3, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	461a      	mov	r2, r3
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	f002 f8f5 	bl	8008720 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	441a      	add	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d32b      	bcc.n	80065a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	605a      	str	r2, [r3, #4]
 8006558:	e026      	b.n	80065a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68d8      	ldr	r0, [r3, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	461a      	mov	r2, r3
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	f002 f8db 	bl	8008720 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	425b      	negs	r3, r3
 8006574:	441a      	add	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d207      	bcs.n	8006596 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	425b      	negs	r3, r3
 8006590:	441a      	add	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d105      	bne.n	80065a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065b0:	697b      	ldr	r3, [r7, #20]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d018      	beq.n	80065fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	441a      	add	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d303      	bcc.n	80065ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68d9      	ldr	r1, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	461a      	mov	r2, r3
 80065f8:	6838      	ldr	r0, [r7, #0]
 80065fa:	f002 f891 	bl	8008720 <memcpy>
	}
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800660e:	f001 fd6d 	bl	80080ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006618:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800661a:	e011      	b.n	8006640 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d012      	beq.n	800664a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3324      	adds	r3, #36	; 0x24
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fd49 	bl	80070c0 <xTaskRemoveFromEventList>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006634:	f000 fe2c 	bl	8007290 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	3b01      	subs	r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dce9      	bgt.n	800661c <prvUnlockQueue+0x16>
 8006648:	e000      	b.n	800664c <prvUnlockQueue+0x46>
					break;
 800664a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	22ff      	movs	r2, #255	; 0xff
 8006650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006654:	f001 fd78 	bl	8008148 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006658:	f001 fd48 	bl	80080ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006662:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006664:	e011      	b.n	800668a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3310      	adds	r3, #16
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fd24 	bl	80070c0 <xTaskRemoveFromEventList>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800667e:	f000 fe07 	bl	8007290 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	3b01      	subs	r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800668a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800668e:	2b00      	cmp	r3, #0
 8006690:	dce9      	bgt.n	8006666 <prvUnlockQueue+0x60>
 8006692:	e000      	b.n	8006696 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006694:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	22ff      	movs	r2, #255	; 0xff
 800669a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800669e:	f001 fd53 	bl	8008148 <vPortExitCritical>
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066b2:	f001 fd1b 	bl	80080ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066be:	2301      	movs	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e001      	b.n	80066c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066c8:	f001 fd3e 	bl	8008148 <vPortExitCritical>

	return xReturn;
 80066cc:	68fb      	ldr	r3, [r7, #12]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066de:	f001 fd05 	bl	80080ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d102      	bne.n	80066f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066ee:	2301      	movs	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e001      	b.n	80066f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066f8:	f001 fd26 	bl	8008148 <vPortExitCritical>

	return xReturn;
 80066fc:	68fb      	ldr	r3, [r7, #12]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	e014      	b.n	8006742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006718:	4a0e      	ldr	r2, [pc, #56]	; (8006754 <vQueueAddToRegistry+0x4c>)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006724:	490b      	ldr	r1, [pc, #44]	; (8006754 <vQueueAddToRegistry+0x4c>)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800672e:	4a09      	ldr	r2, [pc, #36]	; (8006754 <vQueueAddToRegistry+0x4c>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	4413      	add	r3, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800673a:	e005      	b.n	8006748 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b07      	cmp	r3, #7
 8006746:	d9e7      	bls.n	8006718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	20004a1c 	.word	0x20004a1c

08006758 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e016      	b.n	8006794 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006766:	4a10      	ldr	r2, [pc, #64]	; (80067a8 <vQueueUnregisterQueue+0x50>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d10b      	bne.n	800678e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006776:	4a0c      	ldr	r2, [pc, #48]	; (80067a8 <vQueueUnregisterQueue+0x50>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2100      	movs	r1, #0
 800677c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006780:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <vQueueUnregisterQueue+0x50>)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	2200      	movs	r2, #0
 800678a:	605a      	str	r2, [r3, #4]
				break;
 800678c:	e005      	b.n	800679a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b07      	cmp	r3, #7
 8006798:	d9e5      	bls.n	8006766 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20004a1c 	.word	0x20004a1c

080067ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067bc:	f001 fc96 	bl	80080ec <vPortEnterCritical>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c6:	b25b      	sxtb	r3, r3
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d103      	bne.n	80067d6 <vQueueWaitForMessageRestricted+0x2a>
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067dc:	b25b      	sxtb	r3, r3
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d103      	bne.n	80067ec <vQueueWaitForMessageRestricted+0x40>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ec:	f001 fcac 	bl	8008148 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3324      	adds	r3, #36	; 0x24
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fc33 	bl	800706c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006806:	6978      	ldr	r0, [r7, #20]
 8006808:	f7ff fefd 	bl	8006606 <prvUnlockQueue>
	}
 800680c:	bf00      	nop
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08e      	sub	sp, #56	; 0x38
 8006818:	af04      	add	r7, sp, #16
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	2b00      	cmp	r3, #0
 8006826:	d109      	bne.n	800683c <xTaskCreateStatic+0x28>
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	623b      	str	r3, [r7, #32]
 800683a:	e7fe      	b.n	800683a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <xTaskCreateStatic+0x42>
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e7fe      	b.n	8006854 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006856:	235c      	movs	r3, #92	; 0x5c
 8006858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b5c      	cmp	r3, #92	; 0x5c
 800685e:	d009      	beq.n	8006874 <xTaskCreateStatic+0x60>
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	e7fe      	b.n	8006872 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006874:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01e      	beq.n	80068ba <xTaskCreateStatic+0xa6>
 800687c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01b      	beq.n	80068ba <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	2202      	movs	r2, #2
 8006890:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006894:	2300      	movs	r3, #0
 8006896:	9303      	str	r3, [sp, #12]
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	f107 0314 	add.w	r3, r7, #20
 80068a0:	9301      	str	r3, [sp, #4]
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f850 	bl	8006952 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068b4:	f000 f8e0 	bl	8006a78 <prvAddNewTaskToReadyList>
 80068b8:	e001      	b.n	80068be <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068be:	697b      	ldr	r3, [r7, #20]
	}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3728      	adds	r7, #40	; 0x28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08c      	sub	sp, #48	; 0x30
 80068cc:	af04      	add	r7, sp, #16
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 fd1f 	bl	8008320 <pvPortMalloc>
 80068e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00e      	beq.n	8006908 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068ea:	205c      	movs	r0, #92	; 0x5c
 80068ec:	f001 fd18 	bl	8008320 <pvPortMalloc>
 80068f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
 80068fe:	e005      	b.n	800690c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006900:	6978      	ldr	r0, [r7, #20]
 8006902:	f001 fdcf 	bl	80084a4 <vPortFree>
 8006906:	e001      	b.n	800690c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006908:	2300      	movs	r3, #0
 800690a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d017      	beq.n	8006942 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	2300      	movs	r3, #0
 800691e:	9303      	str	r3, [sp, #12]
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	9302      	str	r3, [sp, #8]
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f80e 	bl	8006952 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006936:	69f8      	ldr	r0, [r7, #28]
 8006938:	f000 f89e 	bl	8006a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800693c:	2301      	movs	r3, #1
 800693e:	61bb      	str	r3, [r7, #24]
 8006940:	e002      	b.n	8006948 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006942:	f04f 33ff 	mov.w	r3, #4294967295
 8006946:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006948:	69bb      	ldr	r3, [r7, #24]
	}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b088      	sub	sp, #32
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	461a      	mov	r2, r3
 800696a:	21a5      	movs	r1, #165	; 0xa5
 800696c:	f001 fee3 	bl	8008736 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800697a:	3b01      	subs	r3, #1
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f023 0307 	bic.w	r3, r3, #7
 8006988:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	2b00      	cmp	r3, #0
 8006992:	d009      	beq.n	80069a8 <prvInitialiseNewTask+0x56>
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e7fe      	b.n	80069a6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01f      	beq.n	80069ee <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	e012      	b.n	80069da <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	7819      	ldrb	r1, [r3, #0]
 80069bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	3334      	adds	r3, #52	; 0x34
 80069c4:	460a      	mov	r2, r1
 80069c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	3301      	adds	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	2b0f      	cmp	r3, #15
 80069de:	d9e9      	bls.n	80069b4 <prvInitialiseNewTask+0x62>
 80069e0:	e000      	b.n	80069e4 <prvInitialiseNewTask+0x92>
			{
				break;
 80069e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ec:	e003      	b.n	80069f6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	2b37      	cmp	r3, #55	; 0x37
 80069fa:	d901      	bls.n	8006a00 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069fc:	2337      	movs	r3, #55	; 0x37
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2200      	movs	r2, #0
 8006a10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	3304      	adds	r3, #4
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fe7a 	bl	8005710 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe fe75 	bl	8005710 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	2200      	movs	r2, #0
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	69b8      	ldr	r0, [r7, #24]
 8006a58:	f001 fa1e 	bl	8007e98 <pxPortInitialiseStack>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a6e:	bf00      	nop
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a80:	f001 fb34 	bl	80080ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a84:	4b2d      	ldr	r3, [pc, #180]	; (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a2c      	ldr	r2, [pc, #176]	; (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a8e:	4b2c      	ldr	r3, [pc, #176]	; (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a96:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a9c:	4b27      	ldr	r3, [pc, #156]	; (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d110      	bne.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006aa4:	f000 fc18 	bl	80072d8 <prvInitialiseTaskLists>
 8006aa8:	e00d      	b.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006aaa:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <prvAddNewTaskToReadyList+0xcc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ab2:	4b23      	ldr	r3, [pc, #140]	; (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d802      	bhi.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ac0:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ac6:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <prvAddNewTaskToReadyList+0xd0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <prvAddNewTaskToReadyList+0xd0>)
 8006ace:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ad0:	4b1d      	ldr	r3, [pc, #116]	; (8006b48 <prvAddNewTaskToReadyList+0xd0>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <prvAddNewTaskToReadyList+0xd4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <prvAddNewTaskToReadyList+0x74>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	4a18      	ldr	r2, [pc, #96]	; (8006b4c <prvAddNewTaskToReadyList+0xd4>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a15      	ldr	r2, [pc, #84]	; (8006b50 <prvAddNewTaskToReadyList+0xd8>)
 8006afa:	441a      	add	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe fe11 	bl	800572a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b08:	f001 fb1e 	bl	8008148 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <prvAddNewTaskToReadyList+0xcc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00e      	beq.n	8006b32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d207      	bcs.n	8006b32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <prvAddNewTaskToReadyList+0xdc>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000cd4 	.word	0x20000cd4
 8006b40:	20000800 	.word	0x20000800
 8006b44:	20000ce0 	.word	0x20000ce0
 8006b48:	20000cf0 	.word	0x20000cf0
 8006b4c:	20000cdc 	.word	0x20000cdc
 8006b50:	20000804 	.word	0x20000804
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b6a:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <vTaskDelay+0x60>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <vTaskDelay+0x2e>
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	e7fe      	b.n	8006b84 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006b86:	f000 f87f 	bl	8006c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fde3 	bl	8007758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b92:	f000 f887 	bl	8006ca4 <xTaskResumeAll>
 8006b96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d107      	bne.n	8006bae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006b9e:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <vTaskDelay+0x64>)
 8006ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000cfc 	.word	0x20000cfc
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08a      	sub	sp, #40	; 0x28
 8006bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bce:	463a      	mov	r2, r7
 8006bd0:	1d39      	adds	r1, r7, #4
 8006bd2:	f107 0308 	add.w	r3, r7, #8
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fd46 	bl	8005668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	9202      	str	r2, [sp, #8]
 8006be4:	9301      	str	r3, [sp, #4]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	2300      	movs	r3, #0
 8006bec:	460a      	mov	r2, r1
 8006bee:	4920      	ldr	r1, [pc, #128]	; (8006c70 <vTaskStartScheduler+0xb0>)
 8006bf0:	4820      	ldr	r0, [pc, #128]	; (8006c74 <vTaskStartScheduler+0xb4>)
 8006bf2:	f7ff fe0f 	bl	8006814 <xTaskCreateStatic>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <vTaskStartScheduler+0xb8>)
 8006bfa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <vTaskStartScheduler+0xb8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c04:	2301      	movs	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e001      	b.n	8006c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d102      	bne.n	8006c1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c14:	f000 fdfa 	bl	800780c <xTimerCreateTimerTask>
 8006c18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d115      	bne.n	8006c4c <vTaskStartScheduler+0x8c>
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <vTaskStartScheduler+0xbc>)
 8006c34:	f04f 32ff 	mov.w	r2, #4294967295
 8006c38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c3a:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <vTaskStartScheduler+0xc0>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c40:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <vTaskStartScheduler+0xc4>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c46:	f001 f9b3 	bl	8007fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c4a:	e00d      	b.n	8006c68 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d109      	bne.n	8006c68 <vTaskStartScheduler+0xa8>
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e7fe      	b.n	8006c66 <vTaskStartScheduler+0xa6>
}
 8006c68:	bf00      	nop
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	08009248 	.word	0x08009248
 8006c74:	080072a9 	.word	0x080072a9
 8006c78:	20000cf8 	.word	0x20000cf8
 8006c7c:	20000cf4 	.word	0x20000cf4
 8006c80:	20000ce0 	.word	0x20000ce0
 8006c84:	20000cd8 	.word	0x20000cd8

08006c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c8c:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <vTaskSuspendAll+0x18>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	4a03      	ldr	r2, [pc, #12]	; (8006ca0 <vTaskSuspendAll+0x18>)
 8006c94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c96:	bf00      	nop
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20000cfc 	.word	0x20000cfc

08006ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cb2:	4b41      	ldr	r3, [pc, #260]	; (8006db8 <xTaskResumeAll+0x114>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <xTaskResumeAll+0x2a>
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	e7fe      	b.n	8006ccc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cce:	f001 fa0d 	bl	80080ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <xTaskResumeAll+0x114>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4a37      	ldr	r2, [pc, #220]	; (8006db8 <xTaskResumeAll+0x114>)
 8006cda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cdc:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <xTaskResumeAll+0x114>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d162      	bne.n	8006daa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ce4:	4b35      	ldr	r3, [pc, #212]	; (8006dbc <xTaskResumeAll+0x118>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d05e      	beq.n	8006daa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cec:	e02f      	b.n	8006d4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cee:	4b34      	ldr	r3, [pc, #208]	; (8006dc0 <xTaskResumeAll+0x11c>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3318      	adds	r3, #24
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fd72 	bl	80057e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe fd6d 	bl	80057e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0e:	4b2d      	ldr	r3, [pc, #180]	; (8006dc4 <xTaskResumeAll+0x120>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d903      	bls.n	8006d1e <xTaskResumeAll+0x7a>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <xTaskResumeAll+0x120>)
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <xTaskResumeAll+0x124>)
 8006d2c:	441a      	add	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4619      	mov	r1, r3
 8006d34:	4610      	mov	r0, r2
 8006d36:	f7fe fcf8 	bl	800572a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3e:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <xTaskResumeAll+0x128>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d302      	bcc.n	8006d4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d48:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <xTaskResumeAll+0x12c>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <xTaskResumeAll+0x11c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1cb      	bne.n	8006cee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d5c:	f000 fb56 	bl	800740c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d60:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <xTaskResumeAll+0x130>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d010      	beq.n	8006d8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d6c:	f000 f846 	bl	8006dfc <xTaskIncrementTick>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <xTaskResumeAll+0x12c>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f1      	bne.n	8006d6c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d88:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <xTaskResumeAll+0x130>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d8e:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <xTaskResumeAll+0x12c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d9a:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <xTaskResumeAll+0x134>)
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006daa:	f001 f9cd 	bl	8008148 <vPortExitCritical>

	return xAlreadyYielded;
 8006dae:	68bb      	ldr	r3, [r7, #8]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000cfc 	.word	0x20000cfc
 8006dbc:	20000cd4 	.word	0x20000cd4
 8006dc0:	20000c94 	.word	0x20000c94
 8006dc4:	20000cdc 	.word	0x20000cdc
 8006dc8:	20000804 	.word	0x20000804
 8006dcc:	20000800 	.word	0x20000800
 8006dd0:	20000ce8 	.word	0x20000ce8
 8006dd4:	20000ce4 	.word	0x20000ce4
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <xTaskGetTickCount+0x1c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006de8:	687b      	ldr	r3, [r7, #4]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20000cd8 	.word	0x20000cd8

08006dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e06:	4b4e      	ldr	r3, [pc, #312]	; (8006f40 <xTaskIncrementTick+0x144>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 8088 	bne.w	8006f20 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e10:	4b4c      	ldr	r3, [pc, #304]	; (8006f44 <xTaskIncrementTick+0x148>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e18:	4a4a      	ldr	r2, [pc, #296]	; (8006f44 <xTaskIncrementTick+0x148>)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11f      	bne.n	8006e64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e24:	4b48      	ldr	r3, [pc, #288]	; (8006f48 <xTaskIncrementTick+0x14c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <xTaskIncrementTick+0x46>
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	e7fe      	b.n	8006e40 <xTaskIncrementTick+0x44>
 8006e42:	4b41      	ldr	r3, [pc, #260]	; (8006f48 <xTaskIncrementTick+0x14c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	4b40      	ldr	r3, [pc, #256]	; (8006f4c <xTaskIncrementTick+0x150>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a3e      	ldr	r2, [pc, #248]	; (8006f48 <xTaskIncrementTick+0x14c>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4a3e      	ldr	r2, [pc, #248]	; (8006f4c <xTaskIncrementTick+0x150>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	4b3e      	ldr	r3, [pc, #248]	; (8006f50 <xTaskIncrementTick+0x154>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	4a3c      	ldr	r2, [pc, #240]	; (8006f50 <xTaskIncrementTick+0x154>)
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	f000 fad4 	bl	800740c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e64:	4b3b      	ldr	r3, [pc, #236]	; (8006f54 <xTaskIncrementTick+0x158>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d349      	bcc.n	8006f02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6e:	4b36      	ldr	r3, [pc, #216]	; (8006f48 <xTaskIncrementTick+0x14c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e78:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <xTaskIncrementTick+0x158>)
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	601a      	str	r2, [r3, #0]
					break;
 8006e80:	e03f      	b.n	8006f02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e82:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <xTaskIncrementTick+0x14c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d203      	bcs.n	8006ea2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e9a:	4a2e      	ldr	r2, [pc, #184]	; (8006f54 <xTaskIncrementTick+0x158>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ea0:	e02f      	b.n	8006f02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fc9c 	bl	80057e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fc93 	bl	80057e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec2:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <xTaskIncrementTick+0x15c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d903      	bls.n	8006ed2 <xTaskIncrementTick+0xd6>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	4a22      	ldr	r2, [pc, #136]	; (8006f58 <xTaskIncrementTick+0x15c>)
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <xTaskIncrementTick+0x160>)
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4610      	mov	r0, r2
 8006eea:	f7fe fc1e 	bl	800572a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <xTaskIncrementTick+0x164>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d3b8      	bcc.n	8006e6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f00:	e7b5      	b.n	8006e6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f02:	4b17      	ldr	r3, [pc, #92]	; (8006f60 <xTaskIncrementTick+0x164>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	4914      	ldr	r1, [pc, #80]	; (8006f5c <xTaskIncrementTick+0x160>)
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d907      	bls.n	8006f2a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e004      	b.n	8006f2a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f20:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <xTaskIncrementTick+0x168>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	4a0f      	ldr	r2, [pc, #60]	; (8006f64 <xTaskIncrementTick+0x168>)
 8006f28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <xTaskIncrementTick+0x16c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006f32:	2301      	movs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f36:	697b      	ldr	r3, [r7, #20]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000cfc 	.word	0x20000cfc
 8006f44:	20000cd8 	.word	0x20000cd8
 8006f48:	20000c8c 	.word	0x20000c8c
 8006f4c:	20000c90 	.word	0x20000c90
 8006f50:	20000cec 	.word	0x20000cec
 8006f54:	20000cf4 	.word	0x20000cf4
 8006f58:	20000cdc 	.word	0x20000cdc
 8006f5c:	20000804 	.word	0x20000804
 8006f60:	20000800 	.word	0x20000800
 8006f64:	20000ce4 	.word	0x20000ce4
 8006f68:	20000ce8 	.word	0x20000ce8

08006f6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f72:	4b27      	ldr	r3, [pc, #156]	; (8007010 <vTaskSwitchContext+0xa4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <vTaskSwitchContext+0xa8>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f80:	e040      	b.n	8007004 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <vTaskSwitchContext+0xa8>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	4b23      	ldr	r3, [pc, #140]	; (8007018 <vTaskSwitchContext+0xac>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	e00f      	b.n	8006fb0 <vTaskSwitchContext+0x44>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <vTaskSwitchContext+0x3e>
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	e7fe      	b.n	8006fa8 <vTaskSwitchContext+0x3c>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	491a      	ldr	r1, [pc, #104]	; (800701c <vTaskSwitchContext+0xb0>)
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0e5      	beq.n	8006f90 <vTaskSwitchContext+0x24>
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4a13      	ldr	r2, [pc, #76]	; (800701c <vTaskSwitchContext+0xb0>)
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d104      	bne.n	8006ff4 <vTaskSwitchContext+0x88>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	4a09      	ldr	r2, [pc, #36]	; (8007020 <vTaskSwitchContext+0xb4>)
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	4a06      	ldr	r2, [pc, #24]	; (8007018 <vTaskSwitchContext+0xac>)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6013      	str	r3, [r2, #0]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000cfc 	.word	0x20000cfc
 8007014:	20000ce8 	.word	0x20000ce8
 8007018:	20000cdc 	.word	0x20000cdc
 800701c:	20000804 	.word	0x20000804
 8007020:	20000800 	.word	0x20000800

08007024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d109      	bne.n	8007048 <vTaskPlaceOnEventList+0x24>
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	e7fe      	b.n	8007046 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007048:	4b07      	ldr	r3, [pc, #28]	; (8007068 <vTaskPlaceOnEventList+0x44>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3318      	adds	r3, #24
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fe fb8e 	bl	8005772 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007056:	2101      	movs	r1, #1
 8007058:	6838      	ldr	r0, [r7, #0]
 800705a:	f000 fb7d 	bl	8007758 <prvAddCurrentTaskToDelayedList>
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000800 	.word	0x20000800

0800706c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <vTaskPlaceOnEventListRestricted+0x26>
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	e7fe      	b.n	8007090 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007092:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <vTaskPlaceOnEventListRestricted+0x50>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3318      	adds	r3, #24
 8007098:	4619      	mov	r1, r3
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7fe fb45 	bl	800572a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80070a6:	f04f 33ff 	mov.w	r3, #4294967295
 80070aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	68b8      	ldr	r0, [r7, #8]
 80070b0:	f000 fb52 	bl	8007758 <prvAddCurrentTaskToDelayedList>
	}
 80070b4:	bf00      	nop
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000800 	.word	0x20000800

080070c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <xTaskRemoveFromEventList+0x2a>
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e7fe      	b.n	80070e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fb78 	bl	80057e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f4:	4b1d      	ldr	r3, [pc, #116]	; (800716c <xTaskRemoveFromEventList+0xac>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d11d      	bne.n	8007138 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fb6f 	bl	80057e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710a:	4b19      	ldr	r3, [pc, #100]	; (8007170 <xTaskRemoveFromEventList+0xb0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d903      	bls.n	800711a <xTaskRemoveFromEventList+0x5a>
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	4a16      	ldr	r2, [pc, #88]	; (8007170 <xTaskRemoveFromEventList+0xb0>)
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4a13      	ldr	r2, [pc, #76]	; (8007174 <xTaskRemoveFromEventList+0xb4>)
 8007128:	441a      	add	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	3304      	adds	r3, #4
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f7fe fafa 	bl	800572a <vListInsertEnd>
 8007136:	e005      	b.n	8007144 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3318      	adds	r3, #24
 800713c:	4619      	mov	r1, r3
 800713e:	480e      	ldr	r0, [pc, #56]	; (8007178 <xTaskRemoveFromEventList+0xb8>)
 8007140:	f7fe faf3 	bl	800572a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <xTaskRemoveFromEventList+0xbc>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	429a      	cmp	r2, r3
 8007150:	d905      	bls.n	800715e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007152:	2301      	movs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007156:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <xTaskRemoveFromEventList+0xc0>)
 8007158:	2201      	movs	r2, #1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	e001      	b.n	8007162 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007162:	697b      	ldr	r3, [r7, #20]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20000cfc 	.word	0x20000cfc
 8007170:	20000cdc 	.word	0x20000cdc
 8007174:	20000804 	.word	0x20000804
 8007178:	20000c94 	.word	0x20000c94
 800717c:	20000800 	.word	0x20000800
 8007180:	20000ce8 	.word	0x20000ce8

08007184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <vTaskInternalSetTimeOutState+0x24>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <vTaskInternalSetTimeOutState+0x28>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	605a      	str	r2, [r3, #4]
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	20000cec 	.word	0x20000cec
 80071ac:	20000cd8 	.word	0x20000cd8

080071b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d109      	bne.n	80071d4 <xTaskCheckForTimeOut+0x24>
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	e7fe      	b.n	80071d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <xTaskCheckForTimeOut+0x3e>
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	e7fe      	b.n	80071ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80071ee:	f000 ff7d 	bl	80080ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <xTaskCheckForTimeOut+0xd4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8007202:	4b21      	ldr	r3, [pc, #132]	; (8007288 <xTaskCheckForTimeOut+0xd8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800720e:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <xTaskCheckForTimeOut+0xd8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	e02b      	b.n	8007276 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d102      	bne.n	800722e <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	e023      	b.n	8007276 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <xTaskCheckForTimeOut+0xdc>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d007      	beq.n	800724a <xTaskCheckForTimeOut+0x9a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	429a      	cmp	r2, r3
 8007242:	d302      	bcc.n	800724a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007244:	2301      	movs	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e015      	b.n	8007276 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	429a      	cmp	r2, r3
 8007252:	d20b      	bcs.n	800726c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff ff8f 	bl	8007184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	e004      	b.n	8007276 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007272:	2301      	movs	r3, #1
 8007274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007276:	f000 ff67 	bl	8008148 <vPortExitCritical>

	return xReturn;
 800727a:	69fb      	ldr	r3, [r7, #28]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000cd8 	.word	0x20000cd8
 8007288:	20000800 	.word	0x20000800
 800728c:	20000cec 	.word	0x20000cec

08007290 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007294:	4b03      	ldr	r3, [pc, #12]	; (80072a4 <vTaskMissedYield+0x14>)
 8007296:	2201      	movs	r2, #1
 8007298:	601a      	str	r2, [r3, #0]
}
 800729a:	bf00      	nop
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20000ce8 	.word	0x20000ce8

080072a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072b0:	f000 f852 	bl	8007358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <prvIdleTask+0x28>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d9f9      	bls.n	80072b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <prvIdleTask+0x2c>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072cc:	e7f0      	b.n	80072b0 <prvIdleTask+0x8>
 80072ce:	bf00      	nop
 80072d0:	20000804 	.word	0x20000804
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	e00c      	b.n	80072fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4a12      	ldr	r2, [pc, #72]	; (8007338 <prvInitialiseTaskLists+0x60>)
 80072f0:	4413      	add	r3, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe f9ec 	bl	80056d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3301      	adds	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b37      	cmp	r3, #55	; 0x37
 8007302:	d9ef      	bls.n	80072e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007304:	480d      	ldr	r0, [pc, #52]	; (800733c <prvInitialiseTaskLists+0x64>)
 8007306:	f7fe f9e3 	bl	80056d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800730a:	480d      	ldr	r0, [pc, #52]	; (8007340 <prvInitialiseTaskLists+0x68>)
 800730c:	f7fe f9e0 	bl	80056d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007310:	480c      	ldr	r0, [pc, #48]	; (8007344 <prvInitialiseTaskLists+0x6c>)
 8007312:	f7fe f9dd 	bl	80056d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007316:	480c      	ldr	r0, [pc, #48]	; (8007348 <prvInitialiseTaskLists+0x70>)
 8007318:	f7fe f9da 	bl	80056d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800731c:	480b      	ldr	r0, [pc, #44]	; (800734c <prvInitialiseTaskLists+0x74>)
 800731e:	f7fe f9d7 	bl	80056d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007322:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <prvInitialiseTaskLists+0x78>)
 8007324:	4a05      	ldr	r2, [pc, #20]	; (800733c <prvInitialiseTaskLists+0x64>)
 8007326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007328:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <prvInitialiseTaskLists+0x7c>)
 800732a:	4a05      	ldr	r2, [pc, #20]	; (8007340 <prvInitialiseTaskLists+0x68>)
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20000804 	.word	0x20000804
 800733c:	20000c64 	.word	0x20000c64
 8007340:	20000c78 	.word	0x20000c78
 8007344:	20000c94 	.word	0x20000c94
 8007348:	20000ca8 	.word	0x20000ca8
 800734c:	20000cc0 	.word	0x20000cc0
 8007350:	20000c8c 	.word	0x20000c8c
 8007354:	20000c90 	.word	0x20000c90

08007358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800735e:	e019      	b.n	8007394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007360:	f000 fec4 	bl	80080ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <prvCheckTasksWaitingTermination+0x4c>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fa37 	bl	80057e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <prvCheckTasksWaitingTermination+0x50>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3b01      	subs	r3, #1
 800737c:	4a0a      	ldr	r2, [pc, #40]	; (80073a8 <prvCheckTasksWaitingTermination+0x50>)
 800737e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <prvCheckTasksWaitingTermination+0x54>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3b01      	subs	r3, #1
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <prvCheckTasksWaitingTermination+0x54>)
 8007388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800738a:	f000 fedd 	bl	8008148 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f80e 	bl	80073b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <prvCheckTasksWaitingTermination+0x54>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e1      	bne.n	8007360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000ca8 	.word	0x20000ca8
 80073a8:	20000cd4 	.word	0x20000cd4
 80073ac:	20000cbc 	.word	0x20000cbc

080073b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d108      	bne.n	80073d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 f86c 	bl	80084a4 <vPortFree>
				vPortFree( pxTCB );
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f869 	bl	80084a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073d2:	e017      	b.n	8007404 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d103      	bne.n	80073e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 f860 	bl	80084a4 <vPortFree>
	}
 80073e4:	e00e      	b.n	8007404 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d009      	beq.n	8007404 <prvDeleteTCB+0x54>
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e7fe      	b.n	8007402 <prvDeleteTCB+0x52>
	}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <prvResetNextTaskUnblockTime+0x38>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <prvResetNextTaskUnblockTime+0x3c>)
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007424:	e008      	b.n	8007438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007426:	4b07      	ldr	r3, [pc, #28]	; (8007444 <prvResetNextTaskUnblockTime+0x38>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4a04      	ldr	r2, [pc, #16]	; (8007448 <prvResetNextTaskUnblockTime+0x3c>)
 8007436:	6013      	str	r3, [r2, #0]
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	20000c8c 	.word	0x20000c8c
 8007448:	20000cf4 	.word	0x20000cf4

0800744c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007452:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <xTaskGetSchedulerState+0x34>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800745a:	2301      	movs	r3, #1
 800745c:	607b      	str	r3, [r7, #4]
 800745e:	e008      	b.n	8007472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007460:	4b08      	ldr	r3, [pc, #32]	; (8007484 <xTaskGetSchedulerState+0x38>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007468:	2302      	movs	r3, #2
 800746a:	607b      	str	r3, [r7, #4]
 800746c:	e001      	b.n	8007472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800746e:	2300      	movs	r3, #0
 8007470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007472:	687b      	ldr	r3, [r7, #4]
	}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000ce0 	.word	0x20000ce0
 8007484:	20000cfc 	.word	0x20000cfc

08007488 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d051      	beq.n	8007542 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a2:	4b2a      	ldr	r3, [pc, #168]	; (800754c <xTaskPriorityInherit+0xc4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d241      	bcs.n	8007530 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	db06      	blt.n	80074c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b4:	4b25      	ldr	r3, [pc, #148]	; (800754c <xTaskPriorityInherit+0xc4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6959      	ldr	r1, [r3, #20]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <xTaskPriorityInherit+0xc8>)
 80074d4:	4413      	add	r3, r2
 80074d6:	4299      	cmp	r1, r3
 80074d8:	d122      	bne.n	8007520 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3304      	adds	r3, #4
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f980 	bl	80057e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074e4:	4b19      	ldr	r3, [pc, #100]	; (800754c <xTaskPriorityInherit+0xc4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	4b18      	ldr	r3, [pc, #96]	; (8007554 <xTaskPriorityInherit+0xcc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d903      	bls.n	8007502 <xTaskPriorityInherit+0x7a>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	4a15      	ldr	r2, [pc, #84]	; (8007554 <xTaskPriorityInherit+0xcc>)
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4a10      	ldr	r2, [pc, #64]	; (8007550 <xTaskPriorityInherit+0xc8>)
 8007510:	441a      	add	r2, r3
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	3304      	adds	r3, #4
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f7fe f906 	bl	800572a <vListInsertEnd>
 800751e:	e004      	b.n	800752a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007520:	4b0a      	ldr	r3, [pc, #40]	; (800754c <xTaskPriorityInherit+0xc4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800752a:	2301      	movs	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	e008      	b.n	8007542 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <xTaskPriorityInherit+0xc4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	429a      	cmp	r2, r3
 800753c:	d201      	bcs.n	8007542 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800753e:	2301      	movs	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007542:	68fb      	ldr	r3, [r7, #12]
	}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000800 	.word	0x20000800
 8007550:	20000804 	.word	0x20000804
 8007554:	20000cdc 	.word	0x20000cdc

08007558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d054      	beq.n	8007618 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800756e:	4b2d      	ldr	r3, [pc, #180]	; (8007624 <xTaskPriorityDisinherit+0xcc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	429a      	cmp	r2, r3
 8007576:	d009      	beq.n	800758c <xTaskPriorityDisinherit+0x34>
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e7fe      	b.n	800758a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	2b00      	cmp	r3, #0
 8007592:	d109      	bne.n	80075a8 <xTaskPriorityDisinherit+0x50>
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	e7fe      	b.n	80075a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	1e5a      	subs	r2, r3, #1
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d02c      	beq.n	8007618 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d128      	bne.n	8007618 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe f90a 	bl	80057e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <xTaskPriorityDisinherit+0xd0>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d903      	bls.n	80075f8 <xTaskPriorityDisinherit+0xa0>
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4a0c      	ldr	r2, [pc, #48]	; (8007628 <xTaskPriorityDisinherit+0xd0>)
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4a09      	ldr	r2, [pc, #36]	; (800762c <xTaskPriorityDisinherit+0xd4>)
 8007606:	441a      	add	r2, r3
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f7fe f88b 	bl	800572a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007614:	2301      	movs	r3, #1
 8007616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007618:	697b      	ldr	r3, [r7, #20]
	}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000800 	.word	0x20000800
 8007628:	20000cdc 	.word	0x20000cdc
 800762c:	20000804 	.word	0x20000804

08007630 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800763e:	2301      	movs	r3, #1
 8007640:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d068      	beq.n	800771a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	2b00      	cmp	r3, #0
 800764e:	d109      	bne.n	8007664 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	e7fe      	b.n	8007662 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d902      	bls.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	e002      	b.n	800767a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007678:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	429a      	cmp	r2, r3
 8007682:	d04a      	beq.n	800771a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	429a      	cmp	r2, r3
 800768c:	d145      	bne.n	800771a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800768e:	4b25      	ldr	r3, [pc, #148]	; (8007724 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	429a      	cmp	r2, r3
 8007696:	d109      	bne.n	80076ac <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	e7fe      	b.n	80076aa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	db04      	blt.n	80076ca <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	6959      	ldr	r1, [r3, #20]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4a13      	ldr	r2, [pc, #76]	; (8007728 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80076da:	4413      	add	r3, r2
 80076dc:	4299      	cmp	r1, r3
 80076de:	d11c      	bne.n	800771a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe f87d 	bl	80057e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d903      	bls.n	80076fe <vTaskPriorityDisinheritAfterTimeout+0xce>
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4a07      	ldr	r2, [pc, #28]	; (8007728 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800770c:	441a      	add	r2, r3
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	3304      	adds	r3, #4
 8007712:	4619      	mov	r1, r3
 8007714:	4610      	mov	r0, r2
 8007716:	f7fe f808 	bl	800572a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800771a:	bf00      	nop
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000800 	.word	0x20000800
 8007728:	20000804 	.word	0x20000804
 800772c:	20000cdc 	.word	0x20000cdc

08007730 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007734:	4b07      	ldr	r3, [pc, #28]	; (8007754 <pvTaskIncrementMutexHeldCount+0x24>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <pvTaskIncrementMutexHeldCount+0x24>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007742:	3201      	adds	r2, #1
 8007744:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007746:	4b03      	ldr	r3, [pc, #12]	; (8007754 <pvTaskIncrementMutexHeldCount+0x24>)
 8007748:	681b      	ldr	r3, [r3, #0]
	}
 800774a:	4618      	mov	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	20000800 	.word	0x20000800

08007758 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007762:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007768:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007772:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3304      	adds	r3, #4
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe f833 	bl	80057e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d10a      	bne.n	800779c <prvAddCurrentTaskToDelayedList+0x44>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800778c:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4819      	ldr	r0, [pc, #100]	; (80077fc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007796:	f7fd ffc8 	bl	800572a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800779a:	e026      	b.n	80077ea <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4413      	add	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077a4:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d209      	bcs.n	80077c8 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b4:	4b12      	ldr	r3, [pc, #72]	; (8007800 <prvAddCurrentTaskToDelayedList+0xa8>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3304      	adds	r3, #4
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f7fd ffd6 	bl	8005772 <vListInsert>
}
 80077c6:	e010      	b.n	80077ea <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c8:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <prvAddCurrentTaskToDelayedList+0xac>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3304      	adds	r3, #4
 80077d2:	4619      	mov	r1, r3
 80077d4:	4610      	mov	r0, r2
 80077d6:	f7fd ffcc 	bl	8005772 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d202      	bcs.n	80077ea <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80077e4:	4a08      	ldr	r2, [pc, #32]	; (8007808 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	6013      	str	r3, [r2, #0]
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000cd8 	.word	0x20000cd8
 80077f8:	20000800 	.word	0x20000800
 80077fc:	20000cc0 	.word	0x20000cc0
 8007800:	20000c90 	.word	0x20000c90
 8007804:	20000c8c 	.word	0x20000c8c
 8007808:	20000cf4 	.word	0x20000cf4

0800780c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007816:	f000 faff 	bl	8007e18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800781a:	4b1c      	ldr	r3, [pc, #112]	; (800788c <xTimerCreateTimerTask+0x80>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d021      	beq.n	8007866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800782a:	1d3a      	adds	r2, r7, #4
 800782c:	f107 0108 	add.w	r1, r7, #8
 8007830:	f107 030c 	add.w	r3, r7, #12
 8007834:	4618      	mov	r0, r3
 8007836:	f7fd ff31 	bl	800569c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	2302      	movs	r3, #2
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2300      	movs	r3, #0
 800784a:	460a      	mov	r2, r1
 800784c:	4910      	ldr	r1, [pc, #64]	; (8007890 <xTimerCreateTimerTask+0x84>)
 800784e:	4811      	ldr	r0, [pc, #68]	; (8007894 <xTimerCreateTimerTask+0x88>)
 8007850:	f7fe ffe0 	bl	8006814 <xTaskCreateStatic>
 8007854:	4602      	mov	r2, r0
 8007856:	4b10      	ldr	r3, [pc, #64]	; (8007898 <xTimerCreateTimerTask+0x8c>)
 8007858:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800785a:	4b0f      	ldr	r3, [pc, #60]	; (8007898 <xTimerCreateTimerTask+0x8c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007862:	2301      	movs	r3, #1
 8007864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d109      	bne.n	8007880 <xTimerCreateTimerTask+0x74>
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	e7fe      	b.n	800787e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007880:	697b      	ldr	r3, [r7, #20]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000d30 	.word	0x20000d30
 8007890:	08009250 	.word	0x08009250
 8007894:	080079cd 	.word	0x080079cd
 8007898:	20000d34 	.word	0x20000d34

0800789c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	; 0x28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <xTimerGenericCommand+0x2c>
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	623b      	str	r3, [r7, #32]
 80078c6:	e7fe      	b.n	80078c6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078c8:	4b19      	ldr	r3, [pc, #100]	; (8007930 <xTimerGenericCommand+0x94>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d02a      	beq.n	8007926 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b05      	cmp	r3, #5
 80078e0:	dc18      	bgt.n	8007914 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078e2:	f7ff fdb3 	bl	800744c <xTaskGetSchedulerState>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d109      	bne.n	8007900 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078ec:	4b10      	ldr	r3, [pc, #64]	; (8007930 <xTimerGenericCommand+0x94>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	f107 0110 	add.w	r1, r7, #16
 80078f4:	2300      	movs	r3, #0
 80078f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f8:	f7fe f942 	bl	8005b80 <xQueueGenericSend>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24
 80078fe:	e012      	b.n	8007926 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <xTimerGenericCommand+0x94>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	f107 0110 	add.w	r1, r7, #16
 8007908:	2300      	movs	r3, #0
 800790a:	2200      	movs	r2, #0
 800790c:	f7fe f938 	bl	8005b80 <xQueueGenericSend>
 8007910:	6278      	str	r0, [r7, #36]	; 0x24
 8007912:	e008      	b.n	8007926 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <xTimerGenericCommand+0x94>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	f107 0110 	add.w	r1, r7, #16
 800791c:	2300      	movs	r3, #0
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	f7fe fa28 	bl	8005d74 <xQueueGenericSendFromISR>
 8007924:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	; 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000d30 	.word	0x20000d30

08007934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af02      	add	r7, sp, #8
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793e:	4b22      	ldr	r3, [pc, #136]	; (80079c8 <prvProcessExpiredTimer+0x94>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fd ff49 	bl	80057e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d021      	beq.n	80079a4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	18d1      	adds	r1, r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	6978      	ldr	r0, [r7, #20]
 800796e:	f000 f8d1 	bl	8007b14 <prvInsertTimerInActiveList>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01e      	beq.n	80079b6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007978:	2300      	movs	r3, #0
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	2300      	movs	r3, #0
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	2100      	movs	r1, #0
 8007982:	6978      	ldr	r0, [r7, #20]
 8007984:	f7ff ff8a 	bl	800789c <xTimerGenericCommand>
 8007988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d112      	bne.n	80079b6 <prvProcessExpiredTimer+0x82>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e7fe      	b.n	80079a2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	4798      	blx	r3
}
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000d28 	.word	0x20000d28

080079cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079d4:	f107 0308 	add.w	r3, r7, #8
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 f857 	bl	8007a8c <prvGetNextExpireTime>
 80079de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4619      	mov	r1, r3
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f803 	bl	80079f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ea:	f000 f8d5 	bl	8007b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079ee:	e7f1      	b.n	80079d4 <prvTimerTask+0x8>

080079f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079fa:	f7ff f945 	bl	8006c88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079fe:	f107 0308 	add.w	r3, r7, #8
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 f866 	bl	8007ad4 <prvSampleTimeNow>
 8007a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d130      	bne.n	8007a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10a      	bne.n	8007a2c <prvProcessTimerOrBlockTask+0x3c>
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d806      	bhi.n	8007a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a1e:	f7ff f941 	bl	8006ca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff ff85 	bl	8007934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a2a:	e024      	b.n	8007a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d008      	beq.n	8007a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <prvProcessTimerOrBlockTask+0x90>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <prvProcessTimerOrBlockTask+0x50>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <prvProcessTimerOrBlockTask+0x52>
 8007a40:	2300      	movs	r3, #0
 8007a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <prvProcessTimerOrBlockTask+0x94>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	4619      	mov	r1, r3
 8007a52:	f7fe feab 	bl	80067ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a56:	f7ff f925 	bl	8006ca4 <xTaskResumeAll>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a60:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <prvProcessTimerOrBlockTask+0x98>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
}
 8007a70:	e001      	b.n	8007a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a72:	f7ff f917 	bl	8006ca4 <xTaskResumeAll>
}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000d2c 	.word	0x20000d2c
 8007a84:	20000d30 	.word	0x20000d30
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a94:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <prvGetNextExpireTime+0x44>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <prvGetNextExpireTime+0x16>
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	e000      	b.n	8007aa4 <prvGetNextExpireTime+0x18>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <prvGetNextExpireTime+0x44>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	e001      	b.n	8007ac0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000d28 	.word	0x20000d28

08007ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007adc:	f7ff f97e 	bl	8006ddc <xTaskGetTickCount>
 8007ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <prvSampleTimeNow+0x3c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d205      	bcs.n	8007af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007aec:	f000 f930 	bl	8007d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	e002      	b.n	8007afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007afe:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <prvSampleTimeNow+0x3c>)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000d38 	.word	0x20000d38

08007b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d812      	bhi.n	8007b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d302      	bcc.n	8007b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	e01b      	b.n	8007b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b4e:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <prvInsertTimerInActiveList+0x7c>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4619      	mov	r1, r3
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f7fd fe0a 	bl	8005772 <vListInsert>
 8007b5e:	e012      	b.n	8007b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d206      	bcs.n	8007b76 <prvInsertTimerInActiveList+0x62>
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d302      	bcc.n	8007b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b70:	2301      	movs	r3, #1
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	e007      	b.n	8007b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b76:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <prvInsertTimerInActiveList+0x80>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f7fd fdf6 	bl	8005772 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b86:	697b      	ldr	r3, [r7, #20]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000d2c 	.word	0x20000d2c
 8007b94:	20000d28 	.word	0x20000d28

08007b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08e      	sub	sp, #56	; 0x38
 8007b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b9e:	e0c6      	b.n	8007d2e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	da17      	bge.n	8007bd6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ba6:	1d3b      	adds	r3, r7, #4
 8007ba8:	3304      	adds	r3, #4
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <prvProcessReceivedCommands+0x2e>
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	61fb      	str	r3, [r7, #28]
 8007bc4:	e7fe      	b.n	8007bc4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bcc:	6850      	ldr	r0, [r2, #4]
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	6892      	ldr	r2, [r2, #8]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f2c0 80a7 	blt.w	8007d2c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	3304      	adds	r3, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fd fdf8 	bl	80057e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff6c 	bl	8007ad4 <prvSampleTimeNow>
 8007bfc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	f200 8094 	bhi.w	8007d2e <prvProcessReceivedCommands+0x196>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <prvProcessReceivedCommands+0x74>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	08007c35 	.word	0x08007c35
 8007c14:	08007c35 	.word	0x08007c35
 8007c18:	08007ca7 	.word	0x08007ca7
 8007c1c:	08007cbb 	.word	0x08007cbb
 8007c20:	08007d03 	.word	0x08007d03
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c35 	.word	0x08007c35
 8007c2c:	08007ca7 	.word	0x08007ca7
 8007c30:	08007cbb 	.word	0x08007cbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c3a:	f043 0301 	orr.w	r3, r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	18d1      	adds	r1, r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c54:	f7ff ff5e 	bl	8007b14 <prvInsertTimerInActiveList>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d067      	beq.n	8007d2e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d05c      	beq.n	8007d2e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	441a      	add	r2, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2300      	movs	r3, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c86:	f7ff fe09 	bl	800789c <xTimerGenericCommand>
 8007c8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d14d      	bne.n	8007d2e <prvProcessReceivedCommands+0x196>
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	61bb      	str	r3, [r7, #24]
 8007ca4:	e7fe      	b.n	8007ca4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cb8:	e039      	b.n	8007d2e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <prvProcessReceivedCommands+0x156>
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	e7fe      	b.n	8007cec <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	18d1      	adds	r1, r2, r3
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfc:	f7ff ff0a 	bl	8007b14 <prvInsertTimerInActiveList>
					break;
 8007d00:	e015      	b.n	8007d2e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d12:	f000 fbc7 	bl	80084a4 <vPortFree>
 8007d16:	e00a      	b.n	8007d2e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d2a:	e000      	b.n	8007d2e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d2e:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <prvProcessReceivedCommands+0x1b4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	1d39      	adds	r1, r7, #4
 8007d34:	2200      	movs	r2, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe f93a 	bl	8005fb0 <xQueueReceive>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f47f af2e 	bne.w	8007ba0 <prvProcessReceivedCommands+0x8>
	}
}
 8007d44:	bf00      	nop
 8007d46:	3730      	adds	r7, #48	; 0x30
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000d30 	.word	0x20000d30

08007d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d56:	e047      	b.n	8007de8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d58:	4b2d      	ldr	r3, [pc, #180]	; (8007e10 <prvSwitchTimerLists+0xc0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <prvSwitchTimerLists+0xc0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fd fd37 	bl	80057e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d02d      	beq.n	8007de8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d90e      	bls.n	8007dbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007daa:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <prvSwitchTimerLists+0xc0>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fd fcdc 	bl	8005772 <vListInsert>
 8007dba:	e015      	b.n	8007de8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff fd68 	bl	800789c <xTimerGenericCommand>
 8007dcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <prvSwitchTimerLists+0x98>
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	e7fe      	b.n	8007de6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007de8:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <prvSwitchTimerLists+0xc0>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1b2      	bne.n	8007d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <prvSwitchTimerLists+0xc0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <prvSwitchTimerLists+0xc4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a04      	ldr	r2, [pc, #16]	; (8007e10 <prvSwitchTimerLists+0xc0>)
 8007dfe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e00:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <prvSwitchTimerLists+0xc4>)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	6013      	str	r3, [r2, #0]
}
 8007e06:	bf00      	nop
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000d28 	.word	0x20000d28
 8007e14:	20000d2c 	.word	0x20000d2c

08007e18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e1e:	f000 f965 	bl	80080ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e22:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <prvCheckForValidListAndQueue+0x60>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d120      	bne.n	8007e6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e2a:	4814      	ldr	r0, [pc, #80]	; (8007e7c <prvCheckForValidListAndQueue+0x64>)
 8007e2c:	f7fd fc50 	bl	80056d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e30:	4813      	ldr	r0, [pc, #76]	; (8007e80 <prvCheckForValidListAndQueue+0x68>)
 8007e32:	f7fd fc4d 	bl	80056d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e36:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <prvCheckForValidListAndQueue+0x6c>)
 8007e38:	4a10      	ldr	r2, [pc, #64]	; (8007e7c <prvCheckForValidListAndQueue+0x64>)
 8007e3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e3c:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <prvCheckForValidListAndQueue+0x70>)
 8007e3e:	4a10      	ldr	r2, [pc, #64]	; (8007e80 <prvCheckForValidListAndQueue+0x68>)
 8007e40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e42:	2300      	movs	r3, #0
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <prvCheckForValidListAndQueue+0x74>)
 8007e48:	4a11      	ldr	r2, [pc, #68]	; (8007e90 <prvCheckForValidListAndQueue+0x78>)
 8007e4a:	2110      	movs	r1, #16
 8007e4c:	200a      	movs	r0, #10
 8007e4e:	f7fd fd5b 	bl	8005908 <xQueueGenericCreateStatic>
 8007e52:	4602      	mov	r2, r0
 8007e54:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <prvCheckForValidListAndQueue+0x60>)
 8007e56:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <prvCheckForValidListAndQueue+0x60>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <prvCheckForValidListAndQueue+0x60>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	490b      	ldr	r1, [pc, #44]	; (8007e94 <prvCheckForValidListAndQueue+0x7c>)
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fc4e 	bl	8006708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e6c:	f000 f96c 	bl	8008148 <vPortExitCritical>
}
 8007e70:	bf00      	nop
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000d30 	.word	0x20000d30
 8007e7c:	20000d00 	.word	0x20000d00
 8007e80:	20000d14 	.word	0x20000d14
 8007e84:	20000d28 	.word	0x20000d28
 8007e88:	20000d2c 	.word	0x20000d2c
 8007e8c:	20000ddc 	.word	0x20000ddc
 8007e90:	20000d3c 	.word	0x20000d3c
 8007e94:	08009258 	.word	0x08009258

08007e98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3b04      	subs	r3, #4
 8007ea8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f023 0201 	bic.w	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ec8:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <pxPortInitialiseStack+0x64>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b14      	subs	r3, #20
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b04      	subs	r3, #4
 8007ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f06f 0202 	mvn.w	r2, #2
 8007ee6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3b20      	subs	r3, #32
 8007eec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	08007f01 	.word	0x08007f01

08007f00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <prvTaskExitError+0x50>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d009      	beq.n	8007f28 <prvTaskExitError+0x28>
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	e7fe      	b.n	8007f26 <prvTaskExitError+0x26>
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f3a:	bf00      	nop
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0fc      	beq.n	8007f3c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	2000000c 	.word	0x2000000c
	...

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	4770      	bx	lr
 8007f7c:	f3af 8000 	nop.w

08007f80 <pxCurrentTCBConst2>:
 8007f80:	20000800 	.word	0x20000800
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f88:	4808      	ldr	r0, [pc, #32]	; (8007fac <prvPortStartFirstTask+0x24>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8814 	msr	CONTROL, r0
 8007f9a:	b662      	cpsie	i
 8007f9c:	b661      	cpsie	f
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	df00      	svc	0
 8007fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007faa:	bf00      	nop
 8007fac:	e000ed08 	.word	0xe000ed08

08007fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fb6:	4b44      	ldr	r3, [pc, #272]	; (80080c8 <xPortStartScheduler+0x118>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a44      	ldr	r2, [pc, #272]	; (80080cc <xPortStartScheduler+0x11c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d109      	bne.n	8007fd4 <xPortStartScheduler+0x24>
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	e7fe      	b.n	8007fd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fd4:	4b3c      	ldr	r3, [pc, #240]	; (80080c8 <xPortStartScheduler+0x118>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a3d      	ldr	r2, [pc, #244]	; (80080d0 <xPortStartScheduler+0x120>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d109      	bne.n	8007ff2 <xPortStartScheduler+0x42>
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	e7fe      	b.n	8007ff0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ff2:	4b38      	ldr	r3, [pc, #224]	; (80080d4 <xPortStartScheduler+0x124>)
 8007ff4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	22ff      	movs	r2, #255	; 0xff
 8008002:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008014:	b2da      	uxtb	r2, r3
 8008016:	4b30      	ldr	r3, [pc, #192]	; (80080d8 <xPortStartScheduler+0x128>)
 8008018:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800801a:	4b30      	ldr	r3, [pc, #192]	; (80080dc <xPortStartScheduler+0x12c>)
 800801c:	2207      	movs	r2, #7
 800801e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008020:	e009      	b.n	8008036 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008022:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <xPortStartScheduler+0x12c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3b01      	subs	r3, #1
 8008028:	4a2c      	ldr	r2, [pc, #176]	; (80080dc <xPortStartScheduler+0x12c>)
 800802a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	b2db      	uxtb	r3, r3
 8008034:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d0ef      	beq.n	8008022 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008042:	4b26      	ldr	r3, [pc, #152]	; (80080dc <xPortStartScheduler+0x12c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f1c3 0307 	rsb	r3, r3, #7
 800804a:	2b04      	cmp	r3, #4
 800804c:	d009      	beq.n	8008062 <xPortStartScheduler+0xb2>
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	e7fe      	b.n	8008060 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <xPortStartScheduler+0x12c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <xPortStartScheduler+0x12c>)
 800806a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800806c:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <xPortStartScheduler+0x12c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008074:	4a19      	ldr	r2, [pc, #100]	; (80080dc <xPortStartScheduler+0x12c>)
 8008076:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	b2da      	uxtb	r2, r3
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008080:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <xPortStartScheduler+0x130>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <xPortStartScheduler+0x130>)
 8008086:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800808a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800808c:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <xPortStartScheduler+0x130>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a13      	ldr	r2, [pc, #76]	; (80080e0 <xPortStartScheduler+0x130>)
 8008092:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008096:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008098:	f000 f8d6 	bl	8008248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <xPortStartScheduler+0x134>)
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080a2:	f000 f8f5 	bl	8008290 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080a6:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <xPortStartScheduler+0x138>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a0f      	ldr	r2, [pc, #60]	; (80080e8 <xPortStartScheduler+0x138>)
 80080ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080b2:	f7ff ff69 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080b6:	f7fe ff59 	bl	8006f6c <vTaskSwitchContext>
	prvTaskExitError();
 80080ba:	f7ff ff21 	bl	8007f00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed00 	.word	0xe000ed00
 80080cc:	410fc271 	.word	0x410fc271
 80080d0:	410fc270 	.word	0x410fc270
 80080d4:	e000e400 	.word	0xe000e400
 80080d8:	20000e2c 	.word	0x20000e2c
 80080dc:	20000e30 	.word	0x20000e30
 80080e0:	e000ed20 	.word	0xe000ed20
 80080e4:	2000000c 	.word	0x2000000c
 80080e8:	e000ef34 	.word	0xe000ef34

080080ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008104:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <vPortEnterCritical+0x54>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	4a0d      	ldr	r2, [pc, #52]	; (8008140 <vPortEnterCritical+0x54>)
 800810c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <vPortEnterCritical+0x54>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10e      	bne.n	8008134 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <vPortEnterCritical+0x58>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <vPortEnterCritical+0x48>
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	603b      	str	r3, [r7, #0]
 8008132:	e7fe      	b.n	8008132 <vPortEnterCritical+0x46>
	}
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	2000000c 	.word	0x2000000c
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <vPortExitCritical+0x4c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <vPortExitCritical+0x22>
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	607b      	str	r3, [r7, #4]
 8008168:	e7fe      	b.n	8008168 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800816a:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <vPortExitCritical+0x4c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3b01      	subs	r3, #1
 8008170:	4a08      	ldr	r2, [pc, #32]	; (8008194 <vPortExitCritical+0x4c>)
 8008172:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <vPortExitCritical+0x4c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <vPortExitCritical+0x3e>
 800817c:	2300      	movs	r3, #0
 800817e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000000c 	.word	0x2000000c
	...

080081a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081a0:	f3ef 8009 	mrs	r0, PSP
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4b15      	ldr	r3, [pc, #84]	; (8008200 <pxCurrentTCBConst>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	f01e 0f10 	tst.w	lr, #16
 80081b0:	bf08      	it	eq
 80081b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	6010      	str	r0, [r2, #0]
 80081bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081c4:	f380 8811 	msr	BASEPRI, r0
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f7fe fecc 	bl	8006f6c <vTaskSwitchContext>
 80081d4:	f04f 0000 	mov.w	r0, #0
 80081d8:	f380 8811 	msr	BASEPRI, r0
 80081dc:	bc09      	pop	{r0, r3}
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	6808      	ldr	r0, [r1, #0]
 80081e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e6:	f01e 0f10 	tst.w	lr, #16
 80081ea:	bf08      	it	eq
 80081ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081f0:	f380 8809 	msr	PSP, r0
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w

08008200 <pxCurrentTCBConst>:
 8008200:	20000800 	.word	0x20000800
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop

08008208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008220:	f7fe fdec 	bl	8006dfc <xTaskIncrementTick>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <SysTick_Handler+0x3c>)
 800822c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	e000ed04 	.word	0xe000ed04

08008248 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <vPortSetupTimerInterrupt+0x34>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008252:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortSetupTimerInterrupt+0x38>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <vPortSetupTimerInterrupt+0x3c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <vPortSetupTimerInterrupt+0x40>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	099b      	lsrs	r3, r3, #6
 8008264:	4a09      	ldr	r2, [pc, #36]	; (800828c <vPortSetupTimerInterrupt+0x44>)
 8008266:	3b01      	subs	r3, #1
 8008268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800826a:	4b04      	ldr	r3, [pc, #16]	; (800827c <vPortSetupTimerInterrupt+0x34>)
 800826c:	2207      	movs	r2, #7
 800826e:	601a      	str	r2, [r3, #0]
}
 8008270:	bf00      	nop
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	e000e010 	.word	0xe000e010
 8008280:	e000e018 	.word	0xe000e018
 8008284:	20000000 	.word	0x20000000
 8008288:	10624dd3 	.word	0x10624dd3
 800828c:	e000e014 	.word	0xe000e014

08008290 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008290:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082a0 <vPortEnableVFP+0x10>
 8008294:	6801      	ldr	r1, [r0, #0]
 8008296:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800829a:	6001      	str	r1, [r0, #0]
 800829c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800829e:	bf00      	nop
 80082a0:	e000ed88 	.word	0xe000ed88

080082a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082aa:	f3ef 8305 	mrs	r3, IPSR
 80082ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	d913      	bls.n	80082de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082b6:	4a16      	ldr	r2, [pc, #88]	; (8008310 <vPortValidateInterruptPriority+0x6c>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4413      	add	r3, r2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082c0:	4b14      	ldr	r3, [pc, #80]	; (8008314 <vPortValidateInterruptPriority+0x70>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	7afa      	ldrb	r2, [r7, #11]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d209      	bcs.n	80082de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	e7fe      	b.n	80082dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082de:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <vPortValidateInterruptPriority+0x74>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082e6:	4b0d      	ldr	r3, [pc, #52]	; (800831c <vPortValidateInterruptPriority+0x78>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d909      	bls.n	8008302 <vPortValidateInterruptPriority+0x5e>
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	e7fe      	b.n	8008300 <vPortValidateInterruptPriority+0x5c>
	}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	e000e3f0 	.word	0xe000e3f0
 8008314:	20000e2c 	.word	0x20000e2c
 8008318:	e000ed0c 	.word	0xe000ed0c
 800831c:	20000e30 	.word	0x20000e30

08008320 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800832c:	f7fe fcac 	bl	8006c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008330:	4b57      	ldr	r3, [pc, #348]	; (8008490 <pvPortMalloc+0x170>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008338:	f000 f90c 	bl	8008554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800833c:	4b55      	ldr	r3, [pc, #340]	; (8008494 <pvPortMalloc+0x174>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4013      	ands	r3, r2
 8008344:	2b00      	cmp	r3, #0
 8008346:	f040 808c 	bne.w	8008462 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01c      	beq.n	800838a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008350:	2208      	movs	r2, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4413      	add	r3, r2
 8008356:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b00      	cmp	r3, #0
 8008360:	d013      	beq.n	800838a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	3308      	adds	r3, #8
 800836a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f003 0307 	and.w	r3, r3, #7
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <pvPortMalloc+0x6a>
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e7fe      	b.n	8008388 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d068      	beq.n	8008462 <pvPortMalloc+0x142>
 8008390:	4b41      	ldr	r3, [pc, #260]	; (8008498 <pvPortMalloc+0x178>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d863      	bhi.n	8008462 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800839a:	4b40      	ldr	r3, [pc, #256]	; (800849c <pvPortMalloc+0x17c>)
 800839c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800839e:	4b3f      	ldr	r3, [pc, #252]	; (800849c <pvPortMalloc+0x17c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083a4:	e004      	b.n	80083b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d903      	bls.n	80083c2 <pvPortMalloc+0xa2>
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f1      	bne.n	80083a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083c2:	4b33      	ldr	r3, [pc, #204]	; (8008490 <pvPortMalloc+0x170>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d04a      	beq.n	8008462 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2208      	movs	r2, #8
 80083d2:	4413      	add	r3, r2
 80083d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	2308      	movs	r3, #8
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d91e      	bls.n	800842c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <pvPortMalloc+0xf4>
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	e7fe      	b.n	8008412 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008426:	69b8      	ldr	r0, [r7, #24]
 8008428:	f000 f8f6 	bl	8008618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800842c:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <pvPortMalloc+0x178>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	4a18      	ldr	r2, [pc, #96]	; (8008498 <pvPortMalloc+0x178>)
 8008438:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800843a:	4b17      	ldr	r3, [pc, #92]	; (8008498 <pvPortMalloc+0x178>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <pvPortMalloc+0x180>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d203      	bcs.n	800844e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008446:	4b14      	ldr	r3, [pc, #80]	; (8008498 <pvPortMalloc+0x178>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <pvPortMalloc+0x180>)
 800844c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	4b10      	ldr	r3, [pc, #64]	; (8008494 <pvPortMalloc+0x174>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	431a      	orrs	r2, r3
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008462:	f7fe fc1f 	bl	8006ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <pvPortMalloc+0x164>
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	e7fe      	b.n	8008482 <pvPortMalloc+0x162>
	return pvReturn;
 8008484:	69fb      	ldr	r3, [r7, #28]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3728      	adds	r7, #40	; 0x28
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	200048d4 	.word	0x200048d4
 8008494:	200048e0 	.word	0x200048e0
 8008498:	200048d8 	.word	0x200048d8
 800849c:	200048cc 	.word	0x200048cc
 80084a0:	200048dc 	.word	0x200048dc

080084a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d046      	beq.n	8008544 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084b6:	2308      	movs	r3, #8
 80084b8:	425b      	negs	r3, r3
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4413      	add	r3, r2
 80084be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	4b20      	ldr	r3, [pc, #128]	; (800854c <vPortFree+0xa8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4013      	ands	r3, r2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <vPortFree+0x42>
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e7fe      	b.n	80084e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d009      	beq.n	8008502 <vPortFree+0x5e>
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	e7fe      	b.n	8008500 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	4b11      	ldr	r3, [pc, #68]	; (800854c <vPortFree+0xa8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d019      	beq.n	8008544 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d115      	bne.n	8008544 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <vPortFree+0xa8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	43db      	mvns	r3, r3
 8008522:	401a      	ands	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008528:	f7fe fbae 	bl	8006c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <vPortFree+0xac>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4413      	add	r3, r2
 8008536:	4a06      	ldr	r2, [pc, #24]	; (8008550 <vPortFree+0xac>)
 8008538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f000 f86c 	bl	8008618 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008540:	f7fe fbb0 	bl	8006ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008544:	bf00      	nop
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	200048e0 	.word	0x200048e0
 8008550:	200048d8 	.word	0x200048d8

08008554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800855a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800855e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008560:	4b27      	ldr	r3, [pc, #156]	; (8008600 <prvHeapInit+0xac>)
 8008562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3307      	adds	r3, #7
 8008572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0307 	bic.w	r3, r3, #7
 800857a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <prvHeapInit+0xac>)
 8008584:	4413      	add	r3, r2
 8008586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800858c:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <prvHeapInit+0xb0>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <prvHeapInit+0xb0>)
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4413      	add	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085a0:	2208      	movs	r2, #8
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0307 	bic.w	r3, r3, #7
 80085ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4a15      	ldr	r2, [pc, #84]	; (8008608 <prvHeapInit+0xb4>)
 80085b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085b6:	4b14      	ldr	r3, [pc, #80]	; (8008608 <prvHeapInit+0xb4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <prvHeapInit+0xb4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085d4:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <prvHeapInit+0xb4>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4a0a      	ldr	r2, [pc, #40]	; (800860c <prvHeapInit+0xb8>)
 80085e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4a09      	ldr	r2, [pc, #36]	; (8008610 <prvHeapInit+0xbc>)
 80085ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <prvHeapInit+0xc0>)
 80085ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20000e34 	.word	0x20000e34
 8008604:	200048cc 	.word	0x200048cc
 8008608:	200048d4 	.word	0x200048d4
 800860c:	200048dc 	.word	0x200048dc
 8008610:	200048d8 	.word	0x200048d8
 8008614:	200048e0 	.word	0x200048e0

08008618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <prvInsertBlockIntoFreeList+0xac>)
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e002      	b.n	800862c <prvInsertBlockIntoFreeList+0x14>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d8f7      	bhi.n	8008626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d108      	bne.n	800865a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	441a      	add	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	441a      	add	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d118      	bne.n	80086a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d00d      	beq.n	8008696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	441a      	add	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e008      	b.n	80086a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e003      	b.n	80086a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d002      	beq.n	80086b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	200048cc 	.word	0x200048cc
 80086c8:	200048d4 	.word	0x200048d4

080086cc <__errno>:
 80086cc:	4b01      	ldr	r3, [pc, #4]	; (80086d4 <__errno+0x8>)
 80086ce:	6818      	ldr	r0, [r3, #0]
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	20000010 	.word	0x20000010

080086d8 <__libc_init_array>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	4e0d      	ldr	r6, [pc, #52]	; (8008710 <__libc_init_array+0x38>)
 80086dc:	4c0d      	ldr	r4, [pc, #52]	; (8008714 <__libc_init_array+0x3c>)
 80086de:	1ba4      	subs	r4, r4, r6
 80086e0:	10a4      	asrs	r4, r4, #2
 80086e2:	2500      	movs	r5, #0
 80086e4:	42a5      	cmp	r5, r4
 80086e6:	d109      	bne.n	80086fc <__libc_init_array+0x24>
 80086e8:	4e0b      	ldr	r6, [pc, #44]	; (8008718 <__libc_init_array+0x40>)
 80086ea:	4c0c      	ldr	r4, [pc, #48]	; (800871c <__libc_init_array+0x44>)
 80086ec:	f000 fc28 	bl	8008f40 <_init>
 80086f0:	1ba4      	subs	r4, r4, r6
 80086f2:	10a4      	asrs	r4, r4, #2
 80086f4:	2500      	movs	r5, #0
 80086f6:	42a5      	cmp	r5, r4
 80086f8:	d105      	bne.n	8008706 <__libc_init_array+0x2e>
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008700:	4798      	blx	r3
 8008702:	3501      	adds	r5, #1
 8008704:	e7ee      	b.n	80086e4 <__libc_init_array+0xc>
 8008706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800870a:	4798      	blx	r3
 800870c:	3501      	adds	r5, #1
 800870e:	e7f2      	b.n	80086f6 <__libc_init_array+0x1e>
 8008710:	08009394 	.word	0x08009394
 8008714:	08009394 	.word	0x08009394
 8008718:	08009394 	.word	0x08009394
 800871c:	08009398 	.word	0x08009398

08008720 <memcpy>:
 8008720:	b510      	push	{r4, lr}
 8008722:	1e43      	subs	r3, r0, #1
 8008724:	440a      	add	r2, r1
 8008726:	4291      	cmp	r1, r2
 8008728:	d100      	bne.n	800872c <memcpy+0xc>
 800872a:	bd10      	pop	{r4, pc}
 800872c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008734:	e7f7      	b.n	8008726 <memcpy+0x6>

08008736 <memset>:
 8008736:	4402      	add	r2, r0
 8008738:	4603      	mov	r3, r0
 800873a:	4293      	cmp	r3, r2
 800873c:	d100      	bne.n	8008740 <memset+0xa>
 800873e:	4770      	bx	lr
 8008740:	f803 1b01 	strb.w	r1, [r3], #1
 8008744:	e7f9      	b.n	800873a <memset+0x4>
	...

08008748 <siprintf>:
 8008748:	b40e      	push	{r1, r2, r3}
 800874a:	b500      	push	{lr}
 800874c:	b09c      	sub	sp, #112	; 0x70
 800874e:	ab1d      	add	r3, sp, #116	; 0x74
 8008750:	9002      	str	r0, [sp, #8]
 8008752:	9006      	str	r0, [sp, #24]
 8008754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008758:	4809      	ldr	r0, [pc, #36]	; (8008780 <siprintf+0x38>)
 800875a:	9107      	str	r1, [sp, #28]
 800875c:	9104      	str	r1, [sp, #16]
 800875e:	4909      	ldr	r1, [pc, #36]	; (8008784 <siprintf+0x3c>)
 8008760:	f853 2b04 	ldr.w	r2, [r3], #4
 8008764:	9105      	str	r1, [sp, #20]
 8008766:	6800      	ldr	r0, [r0, #0]
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	a902      	add	r1, sp, #8
 800876c:	f000 f866 	bl	800883c <_svfiprintf_r>
 8008770:	9b02      	ldr	r3, [sp, #8]
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	b01c      	add	sp, #112	; 0x70
 8008778:	f85d eb04 	ldr.w	lr, [sp], #4
 800877c:	b003      	add	sp, #12
 800877e:	4770      	bx	lr
 8008780:	20000010 	.word	0x20000010
 8008784:	ffff0208 	.word	0xffff0208

08008788 <__ssputs_r>:
 8008788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	688e      	ldr	r6, [r1, #8]
 800878e:	429e      	cmp	r6, r3
 8008790:	4682      	mov	sl, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4690      	mov	r8, r2
 8008796:	4699      	mov	r9, r3
 8008798:	d837      	bhi.n	800880a <__ssputs_r+0x82>
 800879a:	898a      	ldrh	r2, [r1, #12]
 800879c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087a0:	d031      	beq.n	8008806 <__ssputs_r+0x7e>
 80087a2:	6825      	ldr	r5, [r4, #0]
 80087a4:	6909      	ldr	r1, [r1, #16]
 80087a6:	1a6f      	subs	r7, r5, r1
 80087a8:	6965      	ldr	r5, [r4, #20]
 80087aa:	2302      	movs	r3, #2
 80087ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80087b4:	f109 0301 	add.w	r3, r9, #1
 80087b8:	443b      	add	r3, r7
 80087ba:	429d      	cmp	r5, r3
 80087bc:	bf38      	it	cc
 80087be:	461d      	movcc	r5, r3
 80087c0:	0553      	lsls	r3, r2, #21
 80087c2:	d530      	bpl.n	8008826 <__ssputs_r+0x9e>
 80087c4:	4629      	mov	r1, r5
 80087c6:	f000 fb21 	bl	8008e0c <_malloc_r>
 80087ca:	4606      	mov	r6, r0
 80087cc:	b950      	cbnz	r0, 80087e4 <__ssputs_r+0x5c>
 80087ce:	230c      	movs	r3, #12
 80087d0:	f8ca 3000 	str.w	r3, [sl]
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e4:	463a      	mov	r2, r7
 80087e6:	6921      	ldr	r1, [r4, #16]
 80087e8:	f7ff ff9a 	bl	8008720 <memcpy>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	6126      	str	r6, [r4, #16]
 80087fa:	6165      	str	r5, [r4, #20]
 80087fc:	443e      	add	r6, r7
 80087fe:	1bed      	subs	r5, r5, r7
 8008800:	6026      	str	r6, [r4, #0]
 8008802:	60a5      	str	r5, [r4, #8]
 8008804:	464e      	mov	r6, r9
 8008806:	454e      	cmp	r6, r9
 8008808:	d900      	bls.n	800880c <__ssputs_r+0x84>
 800880a:	464e      	mov	r6, r9
 800880c:	4632      	mov	r2, r6
 800880e:	4641      	mov	r1, r8
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	f000 fa93 	bl	8008d3c <memmove>
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	1b9b      	subs	r3, r3, r6
 800881a:	60a3      	str	r3, [r4, #8]
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	441e      	add	r6, r3
 8008820:	6026      	str	r6, [r4, #0]
 8008822:	2000      	movs	r0, #0
 8008824:	e7dc      	b.n	80087e0 <__ssputs_r+0x58>
 8008826:	462a      	mov	r2, r5
 8008828:	f000 fb4a 	bl	8008ec0 <_realloc_r>
 800882c:	4606      	mov	r6, r0
 800882e:	2800      	cmp	r0, #0
 8008830:	d1e2      	bne.n	80087f8 <__ssputs_r+0x70>
 8008832:	6921      	ldr	r1, [r4, #16]
 8008834:	4650      	mov	r0, sl
 8008836:	f000 fa9b 	bl	8008d70 <_free_r>
 800883a:	e7c8      	b.n	80087ce <__ssputs_r+0x46>

0800883c <_svfiprintf_r>:
 800883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	461d      	mov	r5, r3
 8008842:	898b      	ldrh	r3, [r1, #12]
 8008844:	061f      	lsls	r7, r3, #24
 8008846:	b09d      	sub	sp, #116	; 0x74
 8008848:	4680      	mov	r8, r0
 800884a:	460c      	mov	r4, r1
 800884c:	4616      	mov	r6, r2
 800884e:	d50f      	bpl.n	8008870 <_svfiprintf_r+0x34>
 8008850:	690b      	ldr	r3, [r1, #16]
 8008852:	b96b      	cbnz	r3, 8008870 <_svfiprintf_r+0x34>
 8008854:	2140      	movs	r1, #64	; 0x40
 8008856:	f000 fad9 	bl	8008e0c <_malloc_r>
 800885a:	6020      	str	r0, [r4, #0]
 800885c:	6120      	str	r0, [r4, #16]
 800885e:	b928      	cbnz	r0, 800886c <_svfiprintf_r+0x30>
 8008860:	230c      	movs	r3, #12
 8008862:	f8c8 3000 	str.w	r3, [r8]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	e0c8      	b.n	80089fe <_svfiprintf_r+0x1c2>
 800886c:	2340      	movs	r3, #64	; 0x40
 800886e:	6163      	str	r3, [r4, #20]
 8008870:	2300      	movs	r3, #0
 8008872:	9309      	str	r3, [sp, #36]	; 0x24
 8008874:	2320      	movs	r3, #32
 8008876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800887a:	2330      	movs	r3, #48	; 0x30
 800887c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008880:	9503      	str	r5, [sp, #12]
 8008882:	f04f 0b01 	mov.w	fp, #1
 8008886:	4637      	mov	r7, r6
 8008888:	463d      	mov	r5, r7
 800888a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800888e:	b10b      	cbz	r3, 8008894 <_svfiprintf_r+0x58>
 8008890:	2b25      	cmp	r3, #37	; 0x25
 8008892:	d13e      	bne.n	8008912 <_svfiprintf_r+0xd6>
 8008894:	ebb7 0a06 	subs.w	sl, r7, r6
 8008898:	d00b      	beq.n	80088b2 <_svfiprintf_r+0x76>
 800889a:	4653      	mov	r3, sl
 800889c:	4632      	mov	r2, r6
 800889e:	4621      	mov	r1, r4
 80088a0:	4640      	mov	r0, r8
 80088a2:	f7ff ff71 	bl	8008788 <__ssputs_r>
 80088a6:	3001      	adds	r0, #1
 80088a8:	f000 80a4 	beq.w	80089f4 <_svfiprintf_r+0x1b8>
 80088ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ae:	4453      	add	r3, sl
 80088b0:	9309      	str	r3, [sp, #36]	; 0x24
 80088b2:	783b      	ldrb	r3, [r7, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 809d 	beq.w	80089f4 <_svfiprintf_r+0x1b8>
 80088ba:	2300      	movs	r3, #0
 80088bc:	f04f 32ff 	mov.w	r2, #4294967295
 80088c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088cc:	931a      	str	r3, [sp, #104]	; 0x68
 80088ce:	462f      	mov	r7, r5
 80088d0:	2205      	movs	r2, #5
 80088d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80088d6:	4850      	ldr	r0, [pc, #320]	; (8008a18 <_svfiprintf_r+0x1dc>)
 80088d8:	f7f7 fc82 	bl	80001e0 <memchr>
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	b9d0      	cbnz	r0, 8008916 <_svfiprintf_r+0xda>
 80088e0:	06d9      	lsls	r1, r3, #27
 80088e2:	bf44      	itt	mi
 80088e4:	2220      	movmi	r2, #32
 80088e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088ea:	071a      	lsls	r2, r3, #28
 80088ec:	bf44      	itt	mi
 80088ee:	222b      	movmi	r2, #43	; 0x2b
 80088f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088f4:	782a      	ldrb	r2, [r5, #0]
 80088f6:	2a2a      	cmp	r2, #42	; 0x2a
 80088f8:	d015      	beq.n	8008926 <_svfiprintf_r+0xea>
 80088fa:	9a07      	ldr	r2, [sp, #28]
 80088fc:	462f      	mov	r7, r5
 80088fe:	2000      	movs	r0, #0
 8008900:	250a      	movs	r5, #10
 8008902:	4639      	mov	r1, r7
 8008904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008908:	3b30      	subs	r3, #48	; 0x30
 800890a:	2b09      	cmp	r3, #9
 800890c:	d94d      	bls.n	80089aa <_svfiprintf_r+0x16e>
 800890e:	b1b8      	cbz	r0, 8008940 <_svfiprintf_r+0x104>
 8008910:	e00f      	b.n	8008932 <_svfiprintf_r+0xf6>
 8008912:	462f      	mov	r7, r5
 8008914:	e7b8      	b.n	8008888 <_svfiprintf_r+0x4c>
 8008916:	4a40      	ldr	r2, [pc, #256]	; (8008a18 <_svfiprintf_r+0x1dc>)
 8008918:	1a80      	subs	r0, r0, r2
 800891a:	fa0b f000 	lsl.w	r0, fp, r0
 800891e:	4318      	orrs	r0, r3
 8008920:	9004      	str	r0, [sp, #16]
 8008922:	463d      	mov	r5, r7
 8008924:	e7d3      	b.n	80088ce <_svfiprintf_r+0x92>
 8008926:	9a03      	ldr	r2, [sp, #12]
 8008928:	1d11      	adds	r1, r2, #4
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	9103      	str	r1, [sp, #12]
 800892e:	2a00      	cmp	r2, #0
 8008930:	db01      	blt.n	8008936 <_svfiprintf_r+0xfa>
 8008932:	9207      	str	r2, [sp, #28]
 8008934:	e004      	b.n	8008940 <_svfiprintf_r+0x104>
 8008936:	4252      	negs	r2, r2
 8008938:	f043 0302 	orr.w	r3, r3, #2
 800893c:	9207      	str	r2, [sp, #28]
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	783b      	ldrb	r3, [r7, #0]
 8008942:	2b2e      	cmp	r3, #46	; 0x2e
 8008944:	d10c      	bne.n	8008960 <_svfiprintf_r+0x124>
 8008946:	787b      	ldrb	r3, [r7, #1]
 8008948:	2b2a      	cmp	r3, #42	; 0x2a
 800894a:	d133      	bne.n	80089b4 <_svfiprintf_r+0x178>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	1d1a      	adds	r2, r3, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	9203      	str	r2, [sp, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfb8      	it	lt
 8008958:	f04f 33ff 	movlt.w	r3, #4294967295
 800895c:	3702      	adds	r7, #2
 800895e:	9305      	str	r3, [sp, #20]
 8008960:	4d2e      	ldr	r5, [pc, #184]	; (8008a1c <_svfiprintf_r+0x1e0>)
 8008962:	7839      	ldrb	r1, [r7, #0]
 8008964:	2203      	movs	r2, #3
 8008966:	4628      	mov	r0, r5
 8008968:	f7f7 fc3a 	bl	80001e0 <memchr>
 800896c:	b138      	cbz	r0, 800897e <_svfiprintf_r+0x142>
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	1b40      	subs	r0, r0, r5
 8008972:	fa03 f000 	lsl.w	r0, r3, r0
 8008976:	9b04      	ldr	r3, [sp, #16]
 8008978:	4303      	orrs	r3, r0
 800897a:	3701      	adds	r7, #1
 800897c:	9304      	str	r3, [sp, #16]
 800897e:	7839      	ldrb	r1, [r7, #0]
 8008980:	4827      	ldr	r0, [pc, #156]	; (8008a20 <_svfiprintf_r+0x1e4>)
 8008982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008986:	2206      	movs	r2, #6
 8008988:	1c7e      	adds	r6, r7, #1
 800898a:	f7f7 fc29 	bl	80001e0 <memchr>
 800898e:	2800      	cmp	r0, #0
 8008990:	d038      	beq.n	8008a04 <_svfiprintf_r+0x1c8>
 8008992:	4b24      	ldr	r3, [pc, #144]	; (8008a24 <_svfiprintf_r+0x1e8>)
 8008994:	bb13      	cbnz	r3, 80089dc <_svfiprintf_r+0x1a0>
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	3307      	adds	r3, #7
 800899a:	f023 0307 	bic.w	r3, r3, #7
 800899e:	3308      	adds	r3, #8
 80089a0:	9303      	str	r3, [sp, #12]
 80089a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a4:	444b      	add	r3, r9
 80089a6:	9309      	str	r3, [sp, #36]	; 0x24
 80089a8:	e76d      	b.n	8008886 <_svfiprintf_r+0x4a>
 80089aa:	fb05 3202 	mla	r2, r5, r2, r3
 80089ae:	2001      	movs	r0, #1
 80089b0:	460f      	mov	r7, r1
 80089b2:	e7a6      	b.n	8008902 <_svfiprintf_r+0xc6>
 80089b4:	2300      	movs	r3, #0
 80089b6:	3701      	adds	r7, #1
 80089b8:	9305      	str	r3, [sp, #20]
 80089ba:	4619      	mov	r1, r3
 80089bc:	250a      	movs	r5, #10
 80089be:	4638      	mov	r0, r7
 80089c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089c4:	3a30      	subs	r2, #48	; 0x30
 80089c6:	2a09      	cmp	r2, #9
 80089c8:	d903      	bls.n	80089d2 <_svfiprintf_r+0x196>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0c8      	beq.n	8008960 <_svfiprintf_r+0x124>
 80089ce:	9105      	str	r1, [sp, #20]
 80089d0:	e7c6      	b.n	8008960 <_svfiprintf_r+0x124>
 80089d2:	fb05 2101 	mla	r1, r5, r1, r2
 80089d6:	2301      	movs	r3, #1
 80089d8:	4607      	mov	r7, r0
 80089da:	e7f0      	b.n	80089be <_svfiprintf_r+0x182>
 80089dc:	ab03      	add	r3, sp, #12
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	4622      	mov	r2, r4
 80089e2:	4b11      	ldr	r3, [pc, #68]	; (8008a28 <_svfiprintf_r+0x1ec>)
 80089e4:	a904      	add	r1, sp, #16
 80089e6:	4640      	mov	r0, r8
 80089e8:	f3af 8000 	nop.w
 80089ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089f0:	4681      	mov	r9, r0
 80089f2:	d1d6      	bne.n	80089a2 <_svfiprintf_r+0x166>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	065b      	lsls	r3, r3, #25
 80089f8:	f53f af35 	bmi.w	8008866 <_svfiprintf_r+0x2a>
 80089fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089fe:	b01d      	add	sp, #116	; 0x74
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a04:	ab03      	add	r3, sp, #12
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <_svfiprintf_r+0x1ec>)
 8008a0c:	a904      	add	r1, sp, #16
 8008a0e:	4640      	mov	r0, r8
 8008a10:	f000 f882 	bl	8008b18 <_printf_i>
 8008a14:	e7ea      	b.n	80089ec <_svfiprintf_r+0x1b0>
 8008a16:	bf00      	nop
 8008a18:	08009358 	.word	0x08009358
 8008a1c:	0800935e 	.word	0x0800935e
 8008a20:	08009362 	.word	0x08009362
 8008a24:	00000000 	.word	0x00000000
 8008a28:	08008789 	.word	0x08008789

08008a2c <_printf_common>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	4691      	mov	r9, r2
 8008a32:	461f      	mov	r7, r3
 8008a34:	688a      	ldr	r2, [r1, #8]
 8008a36:	690b      	ldr	r3, [r1, #16]
 8008a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	bfb8      	it	lt
 8008a40:	4613      	movlt	r3, r2
 8008a42:	f8c9 3000 	str.w	r3, [r9]
 8008a46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	b112      	cbz	r2, 8008a56 <_printf_common+0x2a>
 8008a50:	3301      	adds	r3, #1
 8008a52:	f8c9 3000 	str.w	r3, [r9]
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	0699      	lsls	r1, r3, #26
 8008a5a:	bf42      	ittt	mi
 8008a5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a60:	3302      	addmi	r3, #2
 8008a62:	f8c9 3000 	strmi.w	r3, [r9]
 8008a66:	6825      	ldr	r5, [r4, #0]
 8008a68:	f015 0506 	ands.w	r5, r5, #6
 8008a6c:	d107      	bne.n	8008a7e <_printf_common+0x52>
 8008a6e:	f104 0a19 	add.w	sl, r4, #25
 8008a72:	68e3      	ldr	r3, [r4, #12]
 8008a74:	f8d9 2000 	ldr.w	r2, [r9]
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	42ab      	cmp	r3, r5
 8008a7c:	dc28      	bgt.n	8008ad0 <_printf_common+0xa4>
 8008a7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a82:	6822      	ldr	r2, [r4, #0]
 8008a84:	3300      	adds	r3, #0
 8008a86:	bf18      	it	ne
 8008a88:	2301      	movne	r3, #1
 8008a8a:	0692      	lsls	r2, r2, #26
 8008a8c:	d42d      	bmi.n	8008aea <_printf_common+0xbe>
 8008a8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a92:	4639      	mov	r1, r7
 8008a94:	4630      	mov	r0, r6
 8008a96:	47c0      	blx	r8
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d020      	beq.n	8008ade <_printf_common+0xb2>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	68e5      	ldr	r5, [r4, #12]
 8008aa0:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa4:	f003 0306 	and.w	r3, r3, #6
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	bf08      	it	eq
 8008aac:	1aad      	subeq	r5, r5, r2
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	6922      	ldr	r2, [r4, #16]
 8008ab2:	bf0c      	ite	eq
 8008ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ab8:	2500      	movne	r5, #0
 8008aba:	4293      	cmp	r3, r2
 8008abc:	bfc4      	itt	gt
 8008abe:	1a9b      	subgt	r3, r3, r2
 8008ac0:	18ed      	addgt	r5, r5, r3
 8008ac2:	f04f 0900 	mov.w	r9, #0
 8008ac6:	341a      	adds	r4, #26
 8008ac8:	454d      	cmp	r5, r9
 8008aca:	d11a      	bne.n	8008b02 <_printf_common+0xd6>
 8008acc:	2000      	movs	r0, #0
 8008ace:	e008      	b.n	8008ae2 <_printf_common+0xb6>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	47c0      	blx	r8
 8008ada:	3001      	adds	r0, #1
 8008adc:	d103      	bne.n	8008ae6 <_printf_common+0xba>
 8008ade:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae6:	3501      	adds	r5, #1
 8008ae8:	e7c3      	b.n	8008a72 <_printf_common+0x46>
 8008aea:	18e1      	adds	r1, r4, r3
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	2030      	movs	r0, #48	; 0x30
 8008af0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008af4:	4422      	add	r2, r4
 8008af6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008afa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008afe:	3302      	adds	r3, #2
 8008b00:	e7c5      	b.n	8008a8e <_printf_common+0x62>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4622      	mov	r2, r4
 8008b06:	4639      	mov	r1, r7
 8008b08:	4630      	mov	r0, r6
 8008b0a:	47c0      	blx	r8
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d0e6      	beq.n	8008ade <_printf_common+0xb2>
 8008b10:	f109 0901 	add.w	r9, r9, #1
 8008b14:	e7d8      	b.n	8008ac8 <_printf_common+0x9c>
	...

08008b18 <_printf_i>:
 8008b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b20:	460c      	mov	r4, r1
 8008b22:	7e09      	ldrb	r1, [r1, #24]
 8008b24:	b085      	sub	sp, #20
 8008b26:	296e      	cmp	r1, #110	; 0x6e
 8008b28:	4617      	mov	r7, r2
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	4698      	mov	r8, r3
 8008b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b30:	f000 80b3 	beq.w	8008c9a <_printf_i+0x182>
 8008b34:	d822      	bhi.n	8008b7c <_printf_i+0x64>
 8008b36:	2963      	cmp	r1, #99	; 0x63
 8008b38:	d036      	beq.n	8008ba8 <_printf_i+0x90>
 8008b3a:	d80a      	bhi.n	8008b52 <_printf_i+0x3a>
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	f000 80b9 	beq.w	8008cb4 <_printf_i+0x19c>
 8008b42:	2958      	cmp	r1, #88	; 0x58
 8008b44:	f000 8083 	beq.w	8008c4e <_printf_i+0x136>
 8008b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b50:	e032      	b.n	8008bb8 <_printf_i+0xa0>
 8008b52:	2964      	cmp	r1, #100	; 0x64
 8008b54:	d001      	beq.n	8008b5a <_printf_i+0x42>
 8008b56:	2969      	cmp	r1, #105	; 0x69
 8008b58:	d1f6      	bne.n	8008b48 <_printf_i+0x30>
 8008b5a:	6820      	ldr	r0, [r4, #0]
 8008b5c:	6813      	ldr	r3, [r2, #0]
 8008b5e:	0605      	lsls	r5, r0, #24
 8008b60:	f103 0104 	add.w	r1, r3, #4
 8008b64:	d52a      	bpl.n	8008bbc <_printf_i+0xa4>
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	da03      	bge.n	8008b76 <_printf_i+0x5e>
 8008b6e:	222d      	movs	r2, #45	; 0x2d
 8008b70:	425b      	negs	r3, r3
 8008b72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b76:	486f      	ldr	r0, [pc, #444]	; (8008d34 <_printf_i+0x21c>)
 8008b78:	220a      	movs	r2, #10
 8008b7a:	e039      	b.n	8008bf0 <_printf_i+0xd8>
 8008b7c:	2973      	cmp	r1, #115	; 0x73
 8008b7e:	f000 809d 	beq.w	8008cbc <_printf_i+0x1a4>
 8008b82:	d808      	bhi.n	8008b96 <_printf_i+0x7e>
 8008b84:	296f      	cmp	r1, #111	; 0x6f
 8008b86:	d020      	beq.n	8008bca <_printf_i+0xb2>
 8008b88:	2970      	cmp	r1, #112	; 0x70
 8008b8a:	d1dd      	bne.n	8008b48 <_printf_i+0x30>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	f043 0320 	orr.w	r3, r3, #32
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	e003      	b.n	8008b9e <_printf_i+0x86>
 8008b96:	2975      	cmp	r1, #117	; 0x75
 8008b98:	d017      	beq.n	8008bca <_printf_i+0xb2>
 8008b9a:	2978      	cmp	r1, #120	; 0x78
 8008b9c:	d1d4      	bne.n	8008b48 <_printf_i+0x30>
 8008b9e:	2378      	movs	r3, #120	; 0x78
 8008ba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ba4:	4864      	ldr	r0, [pc, #400]	; (8008d38 <_printf_i+0x220>)
 8008ba6:	e055      	b.n	8008c54 <_printf_i+0x13c>
 8008ba8:	6813      	ldr	r3, [r2, #0]
 8008baa:	1d19      	adds	r1, r3, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6011      	str	r1, [r2, #0]
 8008bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e08c      	b.n	8008cd6 <_printf_i+0x1be>
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6011      	str	r1, [r2, #0]
 8008bc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bc4:	bf18      	it	ne
 8008bc6:	b21b      	sxthne	r3, r3
 8008bc8:	e7cf      	b.n	8008b6a <_printf_i+0x52>
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	6825      	ldr	r5, [r4, #0]
 8008bce:	1d18      	adds	r0, r3, #4
 8008bd0:	6010      	str	r0, [r2, #0]
 8008bd2:	0628      	lsls	r0, r5, #24
 8008bd4:	d501      	bpl.n	8008bda <_printf_i+0xc2>
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	e002      	b.n	8008be0 <_printf_i+0xc8>
 8008bda:	0668      	lsls	r0, r5, #25
 8008bdc:	d5fb      	bpl.n	8008bd6 <_printf_i+0xbe>
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	4854      	ldr	r0, [pc, #336]	; (8008d34 <_printf_i+0x21c>)
 8008be2:	296f      	cmp	r1, #111	; 0x6f
 8008be4:	bf14      	ite	ne
 8008be6:	220a      	movne	r2, #10
 8008be8:	2208      	moveq	r2, #8
 8008bea:	2100      	movs	r1, #0
 8008bec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bf0:	6865      	ldr	r5, [r4, #4]
 8008bf2:	60a5      	str	r5, [r4, #8]
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	f2c0 8095 	blt.w	8008d24 <_printf_i+0x20c>
 8008bfa:	6821      	ldr	r1, [r4, #0]
 8008bfc:	f021 0104 	bic.w	r1, r1, #4
 8008c00:	6021      	str	r1, [r4, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d13d      	bne.n	8008c82 <_printf_i+0x16a>
 8008c06:	2d00      	cmp	r5, #0
 8008c08:	f040 808e 	bne.w	8008d28 <_printf_i+0x210>
 8008c0c:	4665      	mov	r5, ip
 8008c0e:	2a08      	cmp	r2, #8
 8008c10:	d10b      	bne.n	8008c2a <_printf_i+0x112>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	07db      	lsls	r3, r3, #31
 8008c16:	d508      	bpl.n	8008c2a <_printf_i+0x112>
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	bfde      	ittt	le
 8008c20:	2330      	movle	r3, #48	; 0x30
 8008c22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c2a:	ebac 0305 	sub.w	r3, ip, r5
 8008c2e:	6123      	str	r3, [r4, #16]
 8008c30:	f8cd 8000 	str.w	r8, [sp]
 8008c34:	463b      	mov	r3, r7
 8008c36:	aa03      	add	r2, sp, #12
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff fef6 	bl	8008a2c <_printf_common>
 8008c40:	3001      	adds	r0, #1
 8008c42:	d14d      	bne.n	8008ce0 <_printf_i+0x1c8>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	b005      	add	sp, #20
 8008c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	4839      	ldr	r0, [pc, #228]	; (8008d34 <_printf_i+0x21c>)
 8008c50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c54:	6813      	ldr	r3, [r2, #0]
 8008c56:	6821      	ldr	r1, [r4, #0]
 8008c58:	1d1d      	adds	r5, r3, #4
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6015      	str	r5, [r2, #0]
 8008c5e:	060a      	lsls	r2, r1, #24
 8008c60:	d50b      	bpl.n	8008c7a <_printf_i+0x162>
 8008c62:	07ca      	lsls	r2, r1, #31
 8008c64:	bf44      	itt	mi
 8008c66:	f041 0120 	orrmi.w	r1, r1, #32
 8008c6a:	6021      	strmi	r1, [r4, #0]
 8008c6c:	b91b      	cbnz	r3, 8008c76 <_printf_i+0x15e>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	f022 0220 	bic.w	r2, r2, #32
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	2210      	movs	r2, #16
 8008c78:	e7b7      	b.n	8008bea <_printf_i+0xd2>
 8008c7a:	064d      	lsls	r5, r1, #25
 8008c7c:	bf48      	it	mi
 8008c7e:	b29b      	uxthmi	r3, r3
 8008c80:	e7ef      	b.n	8008c62 <_printf_i+0x14a>
 8008c82:	4665      	mov	r5, ip
 8008c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c88:	fb02 3311 	mls	r3, r2, r1, r3
 8008c8c:	5cc3      	ldrb	r3, [r0, r3]
 8008c8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c92:	460b      	mov	r3, r1
 8008c94:	2900      	cmp	r1, #0
 8008c96:	d1f5      	bne.n	8008c84 <_printf_i+0x16c>
 8008c98:	e7b9      	b.n	8008c0e <_printf_i+0xf6>
 8008c9a:	6813      	ldr	r3, [r2, #0]
 8008c9c:	6825      	ldr	r5, [r4, #0]
 8008c9e:	6961      	ldr	r1, [r4, #20]
 8008ca0:	1d18      	adds	r0, r3, #4
 8008ca2:	6010      	str	r0, [r2, #0]
 8008ca4:	0628      	lsls	r0, r5, #24
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	d501      	bpl.n	8008cae <_printf_i+0x196>
 8008caa:	6019      	str	r1, [r3, #0]
 8008cac:	e002      	b.n	8008cb4 <_printf_i+0x19c>
 8008cae:	066a      	lsls	r2, r5, #25
 8008cb0:	d5fb      	bpl.n	8008caa <_printf_i+0x192>
 8008cb2:	8019      	strh	r1, [r3, #0]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	4665      	mov	r5, ip
 8008cba:	e7b9      	b.n	8008c30 <_printf_i+0x118>
 8008cbc:	6813      	ldr	r3, [r2, #0]
 8008cbe:	1d19      	adds	r1, r3, #4
 8008cc0:	6011      	str	r1, [r2, #0]
 8008cc2:	681d      	ldr	r5, [r3, #0]
 8008cc4:	6862      	ldr	r2, [r4, #4]
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f7f7 fa89 	bl	80001e0 <memchr>
 8008cce:	b108      	cbz	r0, 8008cd4 <_printf_i+0x1bc>
 8008cd0:	1b40      	subs	r0, r0, r5
 8008cd2:	6060      	str	r0, [r4, #4]
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cde:	e7a7      	b.n	8008c30 <_printf_i+0x118>
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	47c0      	blx	r8
 8008cea:	3001      	adds	r0, #1
 8008cec:	d0aa      	beq.n	8008c44 <_printf_i+0x12c>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	079b      	lsls	r3, r3, #30
 8008cf2:	d413      	bmi.n	8008d1c <_printf_i+0x204>
 8008cf4:	68e0      	ldr	r0, [r4, #12]
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	4298      	cmp	r0, r3
 8008cfa:	bfb8      	it	lt
 8008cfc:	4618      	movlt	r0, r3
 8008cfe:	e7a3      	b.n	8008c48 <_printf_i+0x130>
 8008d00:	2301      	movs	r3, #1
 8008d02:	464a      	mov	r2, r9
 8008d04:	4639      	mov	r1, r7
 8008d06:	4630      	mov	r0, r6
 8008d08:	47c0      	blx	r8
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d09a      	beq.n	8008c44 <_printf_i+0x12c>
 8008d0e:	3501      	adds	r5, #1
 8008d10:	68e3      	ldr	r3, [r4, #12]
 8008d12:	9a03      	ldr	r2, [sp, #12]
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	42ab      	cmp	r3, r5
 8008d18:	dcf2      	bgt.n	8008d00 <_printf_i+0x1e8>
 8008d1a:	e7eb      	b.n	8008cf4 <_printf_i+0x1dc>
 8008d1c:	2500      	movs	r5, #0
 8008d1e:	f104 0919 	add.w	r9, r4, #25
 8008d22:	e7f5      	b.n	8008d10 <_printf_i+0x1f8>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1ac      	bne.n	8008c82 <_printf_i+0x16a>
 8008d28:	7803      	ldrb	r3, [r0, #0]
 8008d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d32:	e76c      	b.n	8008c0e <_printf_i+0xf6>
 8008d34:	08009369 	.word	0x08009369
 8008d38:	0800937a 	.word	0x0800937a

08008d3c <memmove>:
 8008d3c:	4288      	cmp	r0, r1
 8008d3e:	b510      	push	{r4, lr}
 8008d40:	eb01 0302 	add.w	r3, r1, r2
 8008d44:	d807      	bhi.n	8008d56 <memmove+0x1a>
 8008d46:	1e42      	subs	r2, r0, #1
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	d00a      	beq.n	8008d62 <memmove+0x26>
 8008d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d54:	e7f8      	b.n	8008d48 <memmove+0xc>
 8008d56:	4283      	cmp	r3, r0
 8008d58:	d9f5      	bls.n	8008d46 <memmove+0xa>
 8008d5a:	1881      	adds	r1, r0, r2
 8008d5c:	1ad2      	subs	r2, r2, r3
 8008d5e:	42d3      	cmn	r3, r2
 8008d60:	d100      	bne.n	8008d64 <memmove+0x28>
 8008d62:	bd10      	pop	{r4, pc}
 8008d64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d6c:	e7f7      	b.n	8008d5e <memmove+0x22>
	...

08008d70 <_free_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4605      	mov	r5, r0
 8008d74:	2900      	cmp	r1, #0
 8008d76:	d045      	beq.n	8008e04 <_free_r+0x94>
 8008d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d7c:	1f0c      	subs	r4, r1, #4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfb8      	it	lt
 8008d82:	18e4      	addlt	r4, r4, r3
 8008d84:	f000 f8d2 	bl	8008f2c <__malloc_lock>
 8008d88:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <_free_r+0x98>)
 8008d8a:	6813      	ldr	r3, [r2, #0]
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	b933      	cbnz	r3, 8008d9e <_free_r+0x2e>
 8008d90:	6063      	str	r3, [r4, #4]
 8008d92:	6014      	str	r4, [r2, #0]
 8008d94:	4628      	mov	r0, r5
 8008d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d9a:	f000 b8c8 	b.w	8008f2e <__malloc_unlock>
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	d90c      	bls.n	8008dbc <_free_r+0x4c>
 8008da2:	6821      	ldr	r1, [r4, #0]
 8008da4:	1862      	adds	r2, r4, r1
 8008da6:	4293      	cmp	r3, r2
 8008da8:	bf04      	itt	eq
 8008daa:	681a      	ldreq	r2, [r3, #0]
 8008dac:	685b      	ldreq	r3, [r3, #4]
 8008dae:	6063      	str	r3, [r4, #4]
 8008db0:	bf04      	itt	eq
 8008db2:	1852      	addeq	r2, r2, r1
 8008db4:	6022      	streq	r2, [r4, #0]
 8008db6:	6004      	str	r4, [r0, #0]
 8008db8:	e7ec      	b.n	8008d94 <_free_r+0x24>
 8008dba:	4613      	mov	r3, r2
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	b10a      	cbz	r2, 8008dc4 <_free_r+0x54>
 8008dc0:	42a2      	cmp	r2, r4
 8008dc2:	d9fa      	bls.n	8008dba <_free_r+0x4a>
 8008dc4:	6819      	ldr	r1, [r3, #0]
 8008dc6:	1858      	adds	r0, r3, r1
 8008dc8:	42a0      	cmp	r0, r4
 8008dca:	d10b      	bne.n	8008de4 <_free_r+0x74>
 8008dcc:	6820      	ldr	r0, [r4, #0]
 8008dce:	4401      	add	r1, r0
 8008dd0:	1858      	adds	r0, r3, r1
 8008dd2:	4282      	cmp	r2, r0
 8008dd4:	6019      	str	r1, [r3, #0]
 8008dd6:	d1dd      	bne.n	8008d94 <_free_r+0x24>
 8008dd8:	6810      	ldr	r0, [r2, #0]
 8008dda:	6852      	ldr	r2, [r2, #4]
 8008ddc:	605a      	str	r2, [r3, #4]
 8008dde:	4401      	add	r1, r0
 8008de0:	6019      	str	r1, [r3, #0]
 8008de2:	e7d7      	b.n	8008d94 <_free_r+0x24>
 8008de4:	d902      	bls.n	8008dec <_free_r+0x7c>
 8008de6:	230c      	movs	r3, #12
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	e7d3      	b.n	8008d94 <_free_r+0x24>
 8008dec:	6820      	ldr	r0, [r4, #0]
 8008dee:	1821      	adds	r1, r4, r0
 8008df0:	428a      	cmp	r2, r1
 8008df2:	bf04      	itt	eq
 8008df4:	6811      	ldreq	r1, [r2, #0]
 8008df6:	6852      	ldreq	r2, [r2, #4]
 8008df8:	6062      	str	r2, [r4, #4]
 8008dfa:	bf04      	itt	eq
 8008dfc:	1809      	addeq	r1, r1, r0
 8008dfe:	6021      	streq	r1, [r4, #0]
 8008e00:	605c      	str	r4, [r3, #4]
 8008e02:	e7c7      	b.n	8008d94 <_free_r+0x24>
 8008e04:	bd38      	pop	{r3, r4, r5, pc}
 8008e06:	bf00      	nop
 8008e08:	200048e4 	.word	0x200048e4

08008e0c <_malloc_r>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	1ccd      	adds	r5, r1, #3
 8008e10:	f025 0503 	bic.w	r5, r5, #3
 8008e14:	3508      	adds	r5, #8
 8008e16:	2d0c      	cmp	r5, #12
 8008e18:	bf38      	it	cc
 8008e1a:	250c      	movcc	r5, #12
 8008e1c:	2d00      	cmp	r5, #0
 8008e1e:	4606      	mov	r6, r0
 8008e20:	db01      	blt.n	8008e26 <_malloc_r+0x1a>
 8008e22:	42a9      	cmp	r1, r5
 8008e24:	d903      	bls.n	8008e2e <_malloc_r+0x22>
 8008e26:	230c      	movs	r3, #12
 8008e28:	6033      	str	r3, [r6, #0]
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	bd70      	pop	{r4, r5, r6, pc}
 8008e2e:	f000 f87d 	bl	8008f2c <__malloc_lock>
 8008e32:	4a21      	ldr	r2, [pc, #132]	; (8008eb8 <_malloc_r+0xac>)
 8008e34:	6814      	ldr	r4, [r2, #0]
 8008e36:	4621      	mov	r1, r4
 8008e38:	b991      	cbnz	r1, 8008e60 <_malloc_r+0x54>
 8008e3a:	4c20      	ldr	r4, [pc, #128]	; (8008ebc <_malloc_r+0xb0>)
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	b91b      	cbnz	r3, 8008e48 <_malloc_r+0x3c>
 8008e40:	4630      	mov	r0, r6
 8008e42:	f000 f863 	bl	8008f0c <_sbrk_r>
 8008e46:	6020      	str	r0, [r4, #0]
 8008e48:	4629      	mov	r1, r5
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f000 f85e 	bl	8008f0c <_sbrk_r>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d124      	bne.n	8008e9e <_malloc_r+0x92>
 8008e54:	230c      	movs	r3, #12
 8008e56:	6033      	str	r3, [r6, #0]
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 f868 	bl	8008f2e <__malloc_unlock>
 8008e5e:	e7e4      	b.n	8008e2a <_malloc_r+0x1e>
 8008e60:	680b      	ldr	r3, [r1, #0]
 8008e62:	1b5b      	subs	r3, r3, r5
 8008e64:	d418      	bmi.n	8008e98 <_malloc_r+0x8c>
 8008e66:	2b0b      	cmp	r3, #11
 8008e68:	d90f      	bls.n	8008e8a <_malloc_r+0x7e>
 8008e6a:	600b      	str	r3, [r1, #0]
 8008e6c:	50cd      	str	r5, [r1, r3]
 8008e6e:	18cc      	adds	r4, r1, r3
 8008e70:	4630      	mov	r0, r6
 8008e72:	f000 f85c 	bl	8008f2e <__malloc_unlock>
 8008e76:	f104 000b 	add.w	r0, r4, #11
 8008e7a:	1d23      	adds	r3, r4, #4
 8008e7c:	f020 0007 	bic.w	r0, r0, #7
 8008e80:	1ac3      	subs	r3, r0, r3
 8008e82:	d0d3      	beq.n	8008e2c <_malloc_r+0x20>
 8008e84:	425a      	negs	r2, r3
 8008e86:	50e2      	str	r2, [r4, r3]
 8008e88:	e7d0      	b.n	8008e2c <_malloc_r+0x20>
 8008e8a:	428c      	cmp	r4, r1
 8008e8c:	684b      	ldr	r3, [r1, #4]
 8008e8e:	bf16      	itet	ne
 8008e90:	6063      	strne	r3, [r4, #4]
 8008e92:	6013      	streq	r3, [r2, #0]
 8008e94:	460c      	movne	r4, r1
 8008e96:	e7eb      	b.n	8008e70 <_malloc_r+0x64>
 8008e98:	460c      	mov	r4, r1
 8008e9a:	6849      	ldr	r1, [r1, #4]
 8008e9c:	e7cc      	b.n	8008e38 <_malloc_r+0x2c>
 8008e9e:	1cc4      	adds	r4, r0, #3
 8008ea0:	f024 0403 	bic.w	r4, r4, #3
 8008ea4:	42a0      	cmp	r0, r4
 8008ea6:	d005      	beq.n	8008eb4 <_malloc_r+0xa8>
 8008ea8:	1a21      	subs	r1, r4, r0
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 f82e 	bl	8008f0c <_sbrk_r>
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d0cf      	beq.n	8008e54 <_malloc_r+0x48>
 8008eb4:	6025      	str	r5, [r4, #0]
 8008eb6:	e7db      	b.n	8008e70 <_malloc_r+0x64>
 8008eb8:	200048e4 	.word	0x200048e4
 8008ebc:	200048e8 	.word	0x200048e8

08008ec0 <_realloc_r>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	4607      	mov	r7, r0
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	460e      	mov	r6, r1
 8008ec8:	b921      	cbnz	r1, 8008ed4 <_realloc_r+0x14>
 8008eca:	4611      	mov	r1, r2
 8008ecc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ed0:	f7ff bf9c 	b.w	8008e0c <_malloc_r>
 8008ed4:	b922      	cbnz	r2, 8008ee0 <_realloc_r+0x20>
 8008ed6:	f7ff ff4b 	bl	8008d70 <_free_r>
 8008eda:	4625      	mov	r5, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee0:	f000 f826 	bl	8008f30 <_malloc_usable_size_r>
 8008ee4:	42a0      	cmp	r0, r4
 8008ee6:	d20f      	bcs.n	8008f08 <_realloc_r+0x48>
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4638      	mov	r0, r7
 8008eec:	f7ff ff8e 	bl	8008e0c <_malloc_r>
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d0f2      	beq.n	8008edc <_realloc_r+0x1c>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4622      	mov	r2, r4
 8008efa:	f7ff fc11 	bl	8008720 <memcpy>
 8008efe:	4631      	mov	r1, r6
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ff35 	bl	8008d70 <_free_r>
 8008f06:	e7e9      	b.n	8008edc <_realloc_r+0x1c>
 8008f08:	4635      	mov	r5, r6
 8008f0a:	e7e7      	b.n	8008edc <_realloc_r+0x1c>

08008f0c <_sbrk_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4c06      	ldr	r4, [pc, #24]	; (8008f28 <_sbrk_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4605      	mov	r5, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	f7f8 fd9c 	bl	8001a54 <_sbrk>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_sbrk_r+0x1a>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_sbrk_r+0x1a>
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20004a5c 	.word	0x20004a5c

08008f2c <__malloc_lock>:
 8008f2c:	4770      	bx	lr

08008f2e <__malloc_unlock>:
 8008f2e:	4770      	bx	lr

08008f30 <_malloc_usable_size_r>:
 8008f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f34:	1f18      	subs	r0, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	bfbc      	itt	lt
 8008f3a:	580b      	ldrlt	r3, [r1, r0]
 8008f3c:	18c0      	addlt	r0, r0, r3
 8008f3e:	4770      	bx	lr

08008f40 <_init>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	bf00      	nop
 8008f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f46:	bc08      	pop	{r3}
 8008f48:	469e      	mov	lr, r3
 8008f4a:	4770      	bx	lr

08008f4c <_fini>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	bf00      	nop
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr
