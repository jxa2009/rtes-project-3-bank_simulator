
Proj3Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f9c  08008f9c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008f9c  08008f9c  00018f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fa4  08008fa4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa4  08008fa4  00018fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fa8  08008fa8  00018fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f0  20000074  08009020  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a64  08009020  00024a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020538  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d5f  00000000  00000000  000405dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a8  00000000  00000000  00044340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  00045ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac34  00000000  00000000  000470b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000143f9  00000000  00000000  00071ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000feacf  00000000  00000000  000860dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00184bac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  00184c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b90 	.word	0x08008b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008b90 	.word	0x08008b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <update_breaks_metrics>:
 * Updates the metrics of the break info for a teller
 * [BreakS*]  break_info   - Pointer to the break information to be changed
 * [uint32_t] break_length - Length of the break to be taken
 * */
void update_breaks_metrics(BreakS* break_info, uint32_t break_length)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
    break_info->num++;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
    break_info->total += break_length;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	605a      	str	r2, [r3, #4]
    if (break_length < break_info->shortest)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d203      	bcs.n	80005b2 <update_breaks_metrics+0x32>
    {
        break_info->shortest = break_length;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	609a      	str	r2, [r3, #8]
    else if ( break_length > break_info->longest)
    {
        break_info->longest = break_length;
    }

}
 80005b0:	e007      	b.n	80005c2 <update_breaks_metrics+0x42>
    else if ( break_length > break_info->longest)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d902      	bls.n	80005c2 <update_breaks_metrics+0x42>
        break_info->longest = break_length;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	60da      	str	r2, [r3, #12]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <generate_break_length>:
 * Randomly generate a break length using RNG function of STM32 peripheral
 * Inputs: None
 * Returns: Randomly generated number between 1 minute and 4 minutes
 * */
unsigned int generate_break_length(unsigned int random_time)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    return ((random_time % DIFF_BREAK_LENGTH) + MIN_BREAK_LENGTH);
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	0893      	lsrs	r3, r2, #2
 80005dc:	4907      	ldr	r1, [pc, #28]	; (80005fc <generate_break_length+0x2c>)
 80005de:	fba1 1303 	umull	r1, r3, r1, r3
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	21b4      	movs	r1, #180	; 0xb4
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	333c      	adds	r3, #60	; 0x3c
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	16c16c17 	.word	0x16c16c17

08000600 <generate_time_until_break>:
 * Randomly generate when a teller can take their next breakusing RNG function of STM32 peripheral
 * Inputs: None
 * Returns: Randomly generated number between 30 minutes and 60 minutes
 * */
unsigned int generate_time_until_break(unsigned int random_time)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

    return ((random_time % DIFF_TIME_UNTIL_BREAK) + MIN_TIME_UNTIL_BREAK);
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <generate_time_until_break+0x2c>)
 800060c:	fba3 1302 	umull	r1, r3, r3, r2
 8000610:	0a9b      	lsrs	r3, r3, #10
 8000612:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	91a2b3c5 	.word	0x91a2b3c5

08000630 <Generate_Customer>:
 * Allocates memory for customer and generates random interactino time for them
 * Inputs: None
 * Returns: Pointer to new customer
 * */
CustomerS* Generate_Customer(unsigned int random_time)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    CustomerS* new_customer = (CustomerS*) pvPortMalloc(sizeof(CustomerS));
 8000638:	200c      	movs	r0, #12
 800063a:	f007 fc99 	bl	8007f70 <pvPortMalloc>
 800063e:	4603      	mov	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]
    new_customer->time_joined = 0;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
    new_customer->interaction_time = generate_interaction_time(random_time);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f809 	bl	8000660 <generate_interaction_time>
 800064e:	4602      	mov	r2, r0
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	609a      	str	r2, [r3, #8]
    return new_customer;
 8000654:	68fb      	ldr	r3, [r7, #12]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <generate_interaction_time>:
 * Randomly generates an interaction time for customers (between 30 seconds and 4 minutes)
 * Inputs: None
 * Returns: Random time
 * */
static unsigned int generate_interaction_time(unsigned int random_time)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_INTERACTION_TIME;
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <generate_interaction_time+0x2c>)
 800066c:	fba3 1302 	umull	r1, r3, r3, r2
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	331e      	adds	r3, #30
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	91a2b3c5 	.word	0x91a2b3c5

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f001 fac0 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f86e 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f9a2 	bl	80009e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 f970 	bl	8000984 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80006a4:	f000 f904 	bl	80008b0 <MX_RNG_Init>
  MX_TIM2_Init();
 80006a8:	f000 f916 	bl	80008d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006ac:	481f      	ldr	r0, [pc, #124]	; (800072c <main+0x9c>)
 80006ae:	f003 f9ad 	bl	8003a0c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80006b2:	f004 fb6d 	bl	8004d90 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <main+0xa0>)
 80006b8:	2101      	movs	r1, #1
 80006ba:	2001      	movs	r0, #1
 80006bc:	f004 fca6 	bl	800500c <osSemaphoreNew>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <main+0xa4>)
 80006c4:	601a      	str	r2, [r3, #0]

  /* creation of printBinarySem */
  printBinarySemHandle = osSemaphoreNew(1, 1, &printBinarySem_attributes);
 80006c6:	4a1c      	ldr	r2, [pc, #112]	; (8000738 <main+0xa8>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	2001      	movs	r0, #1
 80006cc:	f004 fc9e 	bl	800500c <osSemaphoreNew>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <main+0xac>)
 80006d4:	601a      	str	r2, [r3, #0]

  /* creation of rngBinarySem */
  rngBinarySemHandle = osSemaphoreNew(1, 1, &rngBinarySem_attributes);
 80006d6:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <main+0xb0>)
 80006d8:	2101      	movs	r1, #1
 80006da:	2001      	movs	r0, #1
 80006dc:	f004 fc96 	bl	800500c <osSemaphoreNew>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <main+0xb4>)
 80006e4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <main+0xb8>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4818      	ldr	r0, [pc, #96]	; (800074c <main+0xbc>)
 80006ec:	f004 fbba 	bl	8004e64 <osThreadNew>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <main+0xc0>)
 80006f4:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread1 */
  TellerThread1Handle = osThreadNew(StartTask02, NULL, &TellerThread1_attributes);
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <main+0xc4>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4817      	ldr	r0, [pc, #92]	; (8000758 <main+0xc8>)
 80006fc:	f004 fbb2 	bl	8004e64 <osThreadNew>
 8000700:	4602      	mov	r2, r0
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <main+0xcc>)
 8000704:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread2 */
  TellerThread2Handle = osThreadNew(StartTask03, NULL, &TellerThread2_attributes);
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <main+0xd0>)
 8000708:	2100      	movs	r1, #0
 800070a:	4816      	ldr	r0, [pc, #88]	; (8000764 <main+0xd4>)
 800070c:	f004 fbaa 	bl	8004e64 <osThreadNew>
 8000710:	4602      	mov	r2, r0
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <main+0xd8>)
 8000714:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread3 */
  TellerThread3Handle = osThreadNew(StartTask04, NULL, &TellerThread3_attributes);
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <main+0xdc>)
 8000718:	2100      	movs	r1, #0
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0xe0>)
 800071c:	f004 fba2 	bl	8004e64 <osThreadNew>
 8000720:	4602      	mov	r2, r0
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <main+0xe4>)
 8000724:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000726:	f004 fb67 	bl	8004df8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0x9a>
 800072c:	20004914 	.word	0x20004914
 8000730:	08008ef0 	.word	0x08008ef0
 8000734:	20004910 	.word	0x20004910
 8000738:	08008f00 	.word	0x08008f00
 800073c:	200048fc 	.word	0x200048fc
 8000740:	08008f10 	.word	0x08008f10
 8000744:	200048f4 	.word	0x200048f4
 8000748:	08008e60 	.word	0x08008e60
 800074c:	08000de5 	.word	0x08000de5
 8000750:	200048f0 	.word	0x200048f0
 8000754:	08008e84 	.word	0x08008e84
 8000758:	08001399 	.word	0x08001399
 800075c:	200049d8 	.word	0x200049d8
 8000760:	08008ea8 	.word	0x08008ea8
 8000764:	080015f9 	.word	0x080015f9
 8000768:	200049d4 	.word	0x200049d4
 800076c:	08008ecc 	.word	0x08008ecc
 8000770:	08001609 	.word	0x08001609
 8000774:	200048f8 	.word	0x200048f8

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0b8      	sub	sp, #224	; 0xe0
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000782:	2244      	movs	r2, #68	; 0x44
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f007 fdfd 	bl	8008386 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2288      	movs	r2, #136	; 0x88
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 fdef 	bl	8008386 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80007a8:	f001 fd16 	bl	80021d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007ac:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <SystemClock_Config+0x130>)
 80007ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007b2:	4a3d      	ldr	r2, [pc, #244]	; (80008a8 <SystemClock_Config+0x130>)
 80007b4:	f023 0318 	bic.w	r3, r3, #24
 80007b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007bc:	2314      	movs	r3, #20
 80007be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007ec:	2328      	movs	r3, #40	; 0x28
 80007ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f2:	2307      	movs	r3, #7
 80007f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fd59 	bl	80022c0 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000814:	f000 ff12 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000836:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800083a:	2104      	movs	r1, #4
 800083c:	4618      	mov	r0, r3
 800083e:	f002 f925 	bl	8002a8c <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000848:	f000 fef8 	bl	800163c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <SystemClock_Config+0x134>)
 800084e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000850:	2300      	movs	r3, #0
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000854:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000858:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000862:	2310      	movs	r3, #16
 8000864:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000866:	2307      	movs	r3, #7
 8000868:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000872:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000876:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fb3c 	bl	8002ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000886:	f000 fed9 	bl	800163c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088e:	f001 fcc1 	bl	8002214 <HAL_PWREx_ControlVoltageScaling>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000898:	f000 fed0 	bl	800163c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800089c:	f002 fe12 	bl	80034c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008a0:	bf00      	nop
 80008a2:	37e0      	adds	r7, #224	; 0xe0
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	00040002 	.word	0x00040002

080008b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_RNG_Init+0x20>)
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <MX_RNG_Init+0x24>)
 80008b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_RNG_Init+0x20>)
 80008bc:	f002 ffdc 	bl	8003878 <HAL_RNG_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008c6:	f000 feb9 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20004900 	.word	0x20004900
 80008d4:	50060800 	.word	0x50060800

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_TIM2_Init+0xa8>)
 80008f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 13332;
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_TIM2_Init+0xa8>)
 8000900:	f243 4214 	movw	r2, #13332	; 0x3414
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <MX_TIM2_Init+0xa8>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_TIM2_Init+0xa8>)
 800090e:	220a      	movs	r2, #10
 8000910:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_TIM2_Init+0xa8>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_TIM2_Init+0xa8>)
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091e:	4818      	ldr	r0, [pc, #96]	; (8000980 <MX_TIM2_Init+0xa8>)
 8000920:	f003 f849 	bl	80039b6 <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800092a:	f000 fe87 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_TIM2_Init+0xa8>)
 800093c:	f003 f9af 	bl	8003c9e <HAL_TIM_ConfigClockSource>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000946:	f000 fe79 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <MX_TIM2_Init+0xa8>)
 8000958:	f003 fbb6 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000962:	f000 fe6b 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	201c      	movs	r0, #28
 800096c:	f001 fa4a 	bl	8001e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000970:	201c      	movs	r0, #28
 8000972:	f001 fa63 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20004914 	.word	0x20004914

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c8:	f003 fc24 	bl	8004214 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 fe33 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20004954 	.word	0x20004954
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4bb7      	ldr	r3, [pc, #732]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4ab6      	ldr	r2, [pc, #728]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4bb4      	ldr	r3, [pc, #720]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4bb1      	ldr	r3, [pc, #708]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4ab0      	ldr	r2, [pc, #704]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4bae      	ldr	r3, [pc, #696]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4bab      	ldr	r3, [pc, #684]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4aaa      	ldr	r2, [pc, #680]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4ba8      	ldr	r3, [pc, #672]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4ba5      	ldr	r3, [pc, #660]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4aa4      	ldr	r2, [pc, #656]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4ba2      	ldr	r3, [pc, #648]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b9f      	ldr	r3, [pc, #636]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a9e      	ldr	r2, [pc, #632]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b9c      	ldr	r3, [pc, #624]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b99      	ldr	r3, [pc, #612]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a98      	ldr	r2, [pc, #608]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b96      	ldr	r3, [pc, #600]	; (8000cd8 <MX_GPIO_Init+0x2f4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f240 1109 	movw	r1, #265	; 0x109
 8000a90:	4892      	ldr	r0, [pc, #584]	; (8000cdc <MX_GPIO_Init+0x2f8>)
 8000a92:	f001 fb89 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210c      	movs	r1, #12
 8000a9a:	4891      	ldr	r0, [pc, #580]	; (8000ce0 <MX_GPIO_Init+0x2fc>)
 8000a9c:	f001 fb84 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa6:	488f      	ldr	r0, [pc, #572]	; (8000ce4 <MX_GPIO_Init+0x300>)
 8000aa8:	f001 fb7e 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab2:	488c      	ldr	r0, [pc, #560]	; (8000ce4 <MX_GPIO_Init+0x300>)
 8000ab4:	f001 fb78 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	488a      	ldr	r0, [pc, #552]	; (8000ce8 <MX_GPIO_Init+0x304>)
 8000abe:	f001 fb73 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 8000ac2:	23f4      	movs	r3, #244	; 0xf4
 8000ac4:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ad2:	230d      	movs	r3, #13
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	487f      	ldr	r0, [pc, #508]	; (8000cdc <MX_GPIO_Init+0x2f8>)
 8000ade:	f001 f9bb 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aee:	2302      	movs	r3, #2
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4878      	ldr	r0, [pc, #480]	; (8000cdc <MX_GPIO_Init+0x2f8>)
 8000afa:	f001 f9ad 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000afe:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b04:	4b79      	ldr	r3, [pc, #484]	; (8000cec <MX_GPIO_Init+0x308>)
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4874      	ldr	r0, [pc, #464]	; (8000ce4 <MX_GPIO_Init+0x300>)
 8000b14:	f001 f9a0 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	486e      	ldr	r0, [pc, #440]	; (8000ce4 <MX_GPIO_Init+0x300>)
 8000b2c:	f001 f994 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000b30:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000b34:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b42:	230b      	movs	r3, #11
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4865      	ldr	r0, [pc, #404]	; (8000ce4 <MX_GPIO_Init+0x300>)
 8000b4e:	f001 f983 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000b52:	232f      	movs	r3, #47	; 0x2f
 8000b54:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f001 f976 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b70:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <MX_GPIO_Init+0x308>)
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f001 f969 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000b86:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000b8a:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f001 f957 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000baa:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000bae:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4846      	ldr	r0, [pc, #280]	; (8000ce0 <MX_GPIO_Init+0x2fc>)
 8000bc8:	f001 f946 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	483f      	ldr	r0, [pc, #252]	; (8000ce0 <MX_GPIO_Init+0x2fc>)
 8000be4:	f001 f938 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4836      	ldr	r0, [pc, #216]	; (8000cdc <MX_GPIO_Init+0x2f8>)
 8000c02:	f001 f929 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c18:	230d      	movs	r3, #13
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	482e      	ldr	r0, [pc, #184]	; (8000cdc <MX_GPIO_Init+0x2f8>)
 8000c24:	f001 f918 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000c28:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000c2c:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4825      	ldr	r0, [pc, #148]	; (8000cdc <MX_GPIO_Init+0x2f8>)
 8000c46:	f001 f907 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_I2C_SLC_Pin MFX_I2C_SDA_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <MX_GPIO_Init+0x2fc>)
 8000c68:	f001 f8f6 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000c6c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c70:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <MX_GPIO_Init+0x304>)
 8000c8a:	f001 f8e5 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000c8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_GPIO_Init+0x300>)
 8000ca8:	f001 f8d6 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000cac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f001 f8c4 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000cd0:	2305      	movs	r3, #5
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	e00c      	b.n	8000cf0 <MX_GPIO_Init+0x30c>
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48001000 	.word	0x48001000
 8000ce0:	48000400 	.word	0x48000400
 8000ce4:	48000800 	.word	0x48000800
 8000ce8:	48000c00 	.word	0x48000c00
 8000cec:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <MX_GPIO_Init+0x3f0>)
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <MX_GPIO_Init+0x3f4>)
 8000d00:	f001 f8aa 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_SCK_Pin MEMS_MISO_Pin MEMS_MOSI_Pin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000d04:	231a      	movs	r3, #26
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d14:	2305      	movs	r3, #5
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	482e      	ldr	r0, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0x3f4>)
 8000d20:	f001 f89a 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4827      	ldr	r0, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0x3f4>)
 8000d3c:	f001 f88c 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000d40:	2308      	movs	r3, #8
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4821      	ldr	r0, [pc, #132]	; (8000ddc <MX_GPIO_Init+0x3f8>)
 8000d58:	f001 f87e 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d5c:	23c0      	movs	r3, #192	; 0xc0
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d60:	2312      	movs	r3, #18
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <MX_GPIO_Init+0x3f8>)
 8000d78:	f001 f86e 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_GPIO_Init+0x3f0>)
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4812      	ldr	r0, [pc, #72]	; (8000ddc <MX_GPIO_Init+0x3f8>)
 8000d92:	f001 f861 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_GPIO_Init+0x3fc>)
 8000dae:	f001 f853 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_GPIO_Init+0x3f0>)
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_GPIO_Init+0x3fc>)
 8000dc6:	f001 f847 	bl	8001e58 <HAL_GPIO_Init>

}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48001000 	.word	0x48001000

08000de4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b09a      	sub	sp, #104	; 0x68
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	uint8_t buffer[64];
	unsigned int random_time;

	while(1)
	{
		if (printBinarySemHandle != NULL && osSemaphoreAcquire(printBinarySemHandle,0) == osOK)
 8000dec:	4b7a      	ldr	r3, [pc, #488]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0fb      	beq.n	8000dec <StartDefaultTask+0x8>
 8000df4:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f004 f9a4 	bl	8005148 <osSemaphoreAcquire>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f2      	bne.n	8000dec <StartDefaultTask+0x8>
		{
			sprintf(buffer,"Queue Init\r\n");
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4a74      	ldr	r2, [pc, #464]	; (8000fdc <StartDefaultTask+0x1f8>)
 8000e0c:	461c      	mov	r4, r3
 8000e0e:	4613      	mov	r3, r2
 8000e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e12:	c407      	stmia	r4!, {r0, r1, r2}
 8000e14:	7023      	strb	r3, [r4, #0]

			osSemaphoreRelease(printBinarySemHandle);
 8000e16:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 f9fa 	bl	8005214 <osSemaphoreRelease>
		}
	}

	while(1)
	{
		if (rngBinarySemHandle != NULL && osSemaphoreAcquire(rngBinarySemHandle,0) == osOK)
 8000e20:	4b6f      	ldr	r3, [pc, #444]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0fb      	beq.n	8000e20 <StartDefaultTask+0x3c>
 8000e28:	4b6d      	ldr	r3, [pc, #436]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 f98a 	bl	8005148 <osSemaphoreAcquire>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f2      	bne.n	8000e20 <StartDefaultTask+0x3c>
		{
			HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4868      	ldr	r0, [pc, #416]	; (8000fe4 <StartDefaultTask+0x200>)
 8000e42:	f002 fd69 	bl	8003918 <HAL_RNG_GenerateRandomNumber>
			osSemaphoreRelease(rngBinarySemHandle);
 8000e46:	4b66      	ldr	r3, [pc, #408]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 f9e2 	bl	8005214 <osSemaphoreRelease>
			break;
 8000e50:	bf00      	nop
		}
	}
	
	init_queue(&customer_queue,random_time);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4864      	ldr	r0, [pc, #400]	; (8000fe8 <StartDefaultTask+0x204>)
 8000e58:	f000 fbf7 	bl	800164a <init_queue>
	  //HAL_UART_Receive(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	  sprintf(buffer,"%u\r\n",rand);
	  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
	  */

	if(master_timer > MAX_TIME)
 8000e5c:	4b63      	ldr	r3, [pc, #396]	; (8000fec <StartDefaultTask+0x208>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f246 2270 	movw	r2, #25200	; 0x6270
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d92c      	bls.n	8000ec2 <StartDefaultTask+0xde>
	{

		while(1)
		{
			if (printBinarySemHandle != NULL && osSemaphoreAcquire(printBinarySemHandle,0) == osOK)
 8000e68:	4b5b      	ldr	r3, [pc, #364]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0fb      	beq.n	8000e68 <StartDefaultTask+0x84>
 8000e70:	4b59      	ldr	r3, [pc, #356]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 f966 	bl	8005148 <osSemaphoreAcquire>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f2      	bne.n	8000e68 <StartDefaultTask+0x84>
			{
				sprintf(buffer,"Time exceeded 4:00 pm\r\n");
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4a5a      	ldr	r2, [pc, #360]	; (8000ff0 <StartDefaultTask+0x20c>)
 8000e88:	461c      	mov	r4, r3
 8000e8a:	4615      	mov	r5, r2
 8000e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e94:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f997 	bl	80001d0 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f107 010c 	add.w	r1, r7, #12
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	4851      	ldr	r0, [pc, #324]	; (8000ff4 <StartDefaultTask+0x210>)
 8000eb0:	f003 f9fe 	bl	80042b0 <HAL_UART_Transmit>
				osSemaphoreRelease(printBinarySemHandle);
 8000eb4:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 f9ab 	bl	8005214 <osSemaphoreRelease>
				break;
 8000ebe:	bf00      	nop
			}
		}

		break;
 8000ec0:	e09e      	b.n	8001000 <StartDefaultTask+0x21c>

	}
	if(master_timer >= customer_queue.time_for_new_customer)
 8000ec2:	4b49      	ldr	r3, [pc, #292]	; (8000fe8 <StartDefaultTask+0x204>)
 8000ec4:	69da      	ldr	r2, [r3, #28]
 8000ec6:	4b49      	ldr	r3, [pc, #292]	; (8000fec <StartDefaultTask+0x208>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d8c6      	bhi.n	8000e5c <StartDefaultTask+0x78>
	{
		while(1)
		{
			if (printBinarySemHandle != NULL && osSemaphoreAcquire(printBinarySemHandle,0) == osOK)
 8000ece:	4b42      	ldr	r3, [pc, #264]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0fb      	beq.n	8000ece <StartDefaultTask+0xea>
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 f933 	bl	8005148 <osSemaphoreAcquire>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f2      	bne.n	8000ece <StartDefaultTask+0xea>
			{
				sprintf(buffer,"Current size of queue: %u\r\n", customer_queue.size);
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <StartDefaultTask+0x204>)
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4941      	ldr	r1, [pc, #260]	; (8000ff8 <StartDefaultTask+0x214>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f007 fa50 	bl	8008398 <siprintf>
				HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f967 	bl	80001d0 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f107 010c 	add.w	r1, r7, #12
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <StartDefaultTask+0x210>)
 8000f10:	f003 f9ce 	bl	80042b0 <HAL_UART_Transmit>
				osSemaphoreRelease(printBinarySemHandle);
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <StartDefaultTask+0x1f4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 f97b 	bl	8005214 <osSemaphoreRelease>
				break;
 8000f1e:	bf00      	nop
			}
		}

		if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK)
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <StartDefaultTask+0x218>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d099      	beq.n	8000e5c <StartDefaultTask+0x78>
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <StartDefaultTask+0x218>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 f90a 	bl	8005148 <osSemaphoreAcquire>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d190      	bne.n	8000e5c <StartDefaultTask+0x78>
		{
			// Lock queue
			while(1)
			{
				if (rngBinarySemHandle != NULL && osSemaphoreAcquire(rngBinarySemHandle,0) == osOK)
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0fb      	beq.n	8000f3a <StartDefaultTask+0x156>
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 f8fd 	bl	8005148 <osSemaphoreAcquire>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f2      	bne.n	8000f3a <StartDefaultTask+0x156>
				{
					HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <StartDefaultTask+0x200>)
 8000f5c:	f002 fcdc 	bl	8003918 <HAL_RNG_GenerateRandomNumber>
					osSemaphoreRelease(rngBinarySemHandle);
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 f955 	bl	8005214 <osSemaphoreRelease>
					break;
 8000f6a:	bf00      	nop

				}
			}

			unsigned int time_for_new_cust = generate_time_for_new_cust(random_time);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fc2e 	bl	80017d0 <generate_time_for_new_cust>
 8000f74:	64f8      	str	r0, [r7, #76]	; 0x4c
			customer_queue.time_for_new_customer = time_for_new_cust + master_timer;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <StartDefaultTask+0x208>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <StartDefaultTask+0x204>)
 8000f80:	61d3      	str	r3, [r2, #28]

			while(1)
			{
				if (rngBinarySemHandle != NULL && osSemaphoreAcquire(rngBinarySemHandle,0) == osOK)
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0fb      	beq.n	8000f82 <StartDefaultTask+0x19e>
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 f8d9 	bl	8005148 <osSemaphoreAcquire>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f2      	bne.n	8000f82 <StartDefaultTask+0x19e>
				{
					HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <StartDefaultTask+0x200>)
 8000fa4:	f002 fcb8 	bl	8003918 <HAL_RNG_GenerateRandomNumber>
					osSemaphoreRelease(rngBinarySemHandle);
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <StartDefaultTask+0x1fc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 f931 	bl	8005214 <osSemaphoreRelease>
					break;
 8000fb2:	bf00      	nop

				}
			}
			add_customer(&customer_queue,random_time);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <StartDefaultTask+0x204>)
 8000fba:	f000 fbd1 	bl	8001760 <add_customer>
			customer_queue.back_node->customer->time_joined = master_timer;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <StartDefaultTask+0x204>)
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <StartDefaultTask+0x208>)
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	601a      	str	r2, [r3, #0]
			// Unlock queue
			osSemaphoreRelease (myBinarySem01Handle);
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <StartDefaultTask+0x218>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 f920 	bl	8005214 <osSemaphoreRelease>
 8000fd4:	e742      	b.n	8000e5c <StartDefaultTask+0x78>
 8000fd6:	bf00      	nop
 8000fd8:	200048fc 	.word	0x200048fc
 8000fdc:	08008c14 	.word	0x08008c14
 8000fe0:	200048f4 	.word	0x200048f4
 8000fe4:	20004900 	.word	0x20004900
 8000fe8:	20000090 	.word	0x20000090
 8000fec:	200048ec 	.word	0x200048ec
 8000ff0:	08008c24 	.word	0x08008c24
 8000ff4:	20004954 	.word	0x20004954
 8000ff8:	08008c3c 	.word	0x08008c3c
 8000ffc:	20004910 	.word	0x20004910
	}
  }

while(1)
{
	if (customer_queue.size == 0 && printBinarySemHandle != NULL && osSemaphoreAcquire(printBinarySemHandle,0) == osOK)
 8001000:	4bbb      	ldr	r3, [pc, #748]	; (80012f0 <StartDefaultTask+0x50c>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1fb      	bne.n	8001000 <StartDefaultTask+0x21c>
 8001008:	4bba      	ldr	r3, [pc, #744]	; (80012f4 <StartDefaultTask+0x510>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f7      	beq.n	8001000 <StartDefaultTask+0x21c>
 8001010:	4bb8      	ldr	r3, [pc, #736]	; (80012f4 <StartDefaultTask+0x510>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f004 f896 	bl	8005148 <osSemaphoreAcquire>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ee      	bne.n	8001000 <StartDefaultTask+0x21c>
	{
		sprintf(buffer,"Total number customers served: %u\r\n",customer_queue.total_serviced);
 8001022:	4bb3      	ldr	r3, [pc, #716]	; (80012f0 <StartDefaultTask+0x50c>)
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	49b3      	ldr	r1, [pc, #716]	; (80012f8 <StartDefaultTask+0x514>)
 800102c:	4618      	mov	r0, r3
 800102e:	f007 f9b3 	bl	8008398 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f8ca 	bl	80001d0 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	f107 010c 	add.w	r1, r7, #12
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	48ac      	ldr	r0, [pc, #688]	; (80012fc <StartDefaultTask+0x518>)
 800104a:	f003 f931 	bl	80042b0 <HAL_UART_Transmit>

		sprintf(buffer,"Teller 1's number of served customers: %u\r\n",tellers[0].total_served);
 800104e:	4bac      	ldr	r3, [pc, #688]	; (8001300 <StartDefaultTask+0x51c>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	49ab      	ldr	r1, [pc, #684]	; (8001304 <StartDefaultTask+0x520>)
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f99d 	bl	8008398 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f8b4 	bl	80001d0 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f107 010c 	add.w	r1, r7, #12
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	48a1      	ldr	r0, [pc, #644]	; (80012fc <StartDefaultTask+0x518>)
 8001076:	f003 f91b 	bl	80042b0 <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
		// Teller 3
		//sprintf(buffer,"Teller 1's number of served customers: %u\r\n",tellers[0].total_served);
		//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);

		sprintf(buffer,"Average wait time in queue: %u minutes \r\n",(customer_queue.total_wait_time / 60) / (customer_queue.total_serviced));
 800107a:	4b9d      	ldr	r3, [pc, #628]	; (80012f0 <StartDefaultTask+0x50c>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	4aa2      	ldr	r2, [pc, #648]	; (8001308 <StartDefaultTask+0x524>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	095a      	lsrs	r2, r3, #5
 8001086:	4b9a      	ldr	r3, [pc, #616]	; (80012f0 <StartDefaultTask+0x50c>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	fbb2 f2f3 	udiv	r2, r2, r3
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	499e      	ldr	r1, [pc, #632]	; (800130c <StartDefaultTask+0x528>)
 8001094:	4618      	mov	r0, r3
 8001096:	f007 f97f 	bl	8008398 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f896 	bl	80001d0 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f107 010c 	add.w	r1, r7, #12
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	4892      	ldr	r0, [pc, #584]	; (80012fc <StartDefaultTask+0x518>)
 80010b2:	f003 f8fd 	bl	80042b0 <HAL_UART_Transmit>

		sprintf(buffer,"Average time with teller: %u minutes \r\n",(customer_queue.total_interaction_time / 60) / (customer_queue.total_serviced));
 80010b6:	4b8e      	ldr	r3, [pc, #568]	; (80012f0 <StartDefaultTask+0x50c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a93      	ldr	r2, [pc, #588]	; (8001308 <StartDefaultTask+0x524>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	095a      	lsrs	r2, r3, #5
 80010c2:	4b8b      	ldr	r3, [pc, #556]	; (80012f0 <StartDefaultTask+0x50c>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4990      	ldr	r1, [pc, #576]	; (8001310 <StartDefaultTask+0x52c>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f007 f961 	bl	8008398 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f878 	bl	80001d0 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f107 010c 	add.w	r1, r7, #12
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	4883      	ldr	r0, [pc, #524]	; (80012fc <StartDefaultTask+0x518>)
 80010ee:	f003 f8df 	bl	80042b0 <HAL_UART_Transmit>

		sprintf(buffer,"Max time in queue: %u minutes \r\n", customer_queue.max_wait_time / 60);
 80010f2:	4b7f      	ldr	r3, [pc, #508]	; (80012f0 <StartDefaultTask+0x50c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4a84      	ldr	r2, [pc, #528]	; (8001308 <StartDefaultTask+0x524>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	095a      	lsrs	r2, r3, #5
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4984      	ldr	r1, [pc, #528]	; (8001314 <StartDefaultTask+0x530>)
 8001104:	4618      	mov	r0, r3
 8001106:	f007 f947 	bl	8008398 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f85e 	bl	80001d0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	f107 010c 	add.w	r1, r7, #12
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	4876      	ldr	r0, [pc, #472]	; (80012fc <StartDefaultTask+0x518>)
 8001122:	f003 f8c5 	bl	80042b0 <HAL_UART_Transmit>

    // Compute max time teller spent waiting for customer
    unsigned int teller_wait_time = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	667b      	str	r3, [r7, #100]	; 0x64
    for(int i = 0; i < NUM_TELLERS;i++)
 800112a:	2300      	movs	r3, #0
 800112c:	663b      	str	r3, [r7, #96]	; 0x60
 800112e:	e016      	b.n	800115e <StartDefaultTask+0x37a>
    {
      if(tellers[i].max_wait_time > teller_wait_time)
 8001130:	4a73      	ldr	r2, [pc, #460]	; (8001300 <StartDefaultTask+0x51c>)
 8001132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001134:	212c      	movs	r1, #44	; 0x2c
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	4413      	add	r3, r2
 800113c:	3310      	adds	r3, #16
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001142:	429a      	cmp	r2, r3
 8001144:	d208      	bcs.n	8001158 <StartDefaultTask+0x374>
      {
        teller_wait_time = tellers[i].max_wait_time;
 8001146:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <StartDefaultTask+0x51c>)
 8001148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800114a:	212c      	movs	r1, #44	; 0x2c
 800114c:	fb01 f303 	mul.w	r3, r1, r3
 8001150:	4413      	add	r3, r2
 8001152:	3310      	adds	r3, #16
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	667b      	str	r3, [r7, #100]	; 0x64
    for(int i = 0; i < NUM_TELLERS;i++)
 8001158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800115a:	3301      	adds	r3, #1
 800115c:	663b      	str	r3, [r7, #96]	; 0x60
 800115e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001160:	2b02      	cmp	r3, #2
 8001162:	dde5      	ble.n	8001130 <StartDefaultTask+0x34c>
      }
    }
    sprintf(buffer,"Max teller wait time for customer: %u minutes \r\n", teller_wait_time / 60);
 8001164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001166:	4a68      	ldr	r2, [pc, #416]	; (8001308 <StartDefaultTask+0x524>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	095a      	lsrs	r2, r3, #5
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4969      	ldr	r1, [pc, #420]	; (8001318 <StartDefaultTask+0x534>)
 8001174:	4618      	mov	r0, r3
 8001176:	f007 f90f 	bl	8008398 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f826 	bl	80001d0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	f107 010c 	add.w	r1, r7, #12
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	485a      	ldr	r0, [pc, #360]	; (80012fc <StartDefaultTask+0x518>)
 8001192:	f003 f88d 	bl	80042b0 <HAL_UART_Transmit>

    unsigned int max_transaction_time = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(int i = 0; i < NUM_TELLERS;i++)
 800119a:	2300      	movs	r3, #0
 800119c:	65bb      	str	r3, [r7, #88]	; 0x58
 800119e:	e016      	b.n	80011ce <StartDefaultTask+0x3ea>
    {
      if(tellers[i].max_transaction_time > max_transaction_time)
 80011a0:	4a57      	ldr	r2, [pc, #348]	; (8001300 <StartDefaultTask+0x51c>)
 80011a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011a4:	212c      	movs	r1, #44	; 0x2c
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	330c      	adds	r3, #12
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d208      	bcs.n	80011c8 <StartDefaultTask+0x3e4>
      {
        max_transaction_time = tellers[i].max_transaction_time;
 80011b6:	4a52      	ldr	r2, [pc, #328]	; (8001300 <StartDefaultTask+0x51c>)
 80011b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ba:	212c      	movs	r1, #44	; 0x2c
 80011bc:	fb01 f303 	mul.w	r3, r1, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	330c      	adds	r3, #12
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(int i = 0; i < NUM_TELLERS;i++)
 80011c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ca:	3301      	adds	r3, #1
 80011cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80011ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	dde5      	ble.n	80011a0 <StartDefaultTask+0x3bc>
      }
    }

    sprintf(buffer,"Max transaction time: %u minutes \r\n", max_transaction_time / 60);
 80011d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d6:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <StartDefaultTask+0x524>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	095a      	lsrs	r2, r3, #5
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	494e      	ldr	r1, [pc, #312]	; (800131c <StartDefaultTask+0x538>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f007 f8d7 	bl	8008398 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7fe ffee 	bl	80001d0 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	f107 010c 	add.w	r1, r7, #12
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	483e      	ldr	r0, [pc, #248]	; (80012fc <StartDefaultTask+0x518>)
 8001202:	f003 f855 	bl	80042b0 <HAL_UART_Transmit>

    sprintf(buffer,"Max depth: %u\r\n", customer_queue.max_depth);
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <StartDefaultTask+0x50c>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4944      	ldr	r1, [pc, #272]	; (8001320 <StartDefaultTask+0x53c>)
 8001210:	4618      	mov	r0, r3
 8001212:	f007 f8c1 	bl	8008398 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe ffd8 	bl	80001d0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	f107 010c 	add.w	r1, r7, #12
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	4833      	ldr	r0, [pc, #204]	; (80012fc <StartDefaultTask+0x518>)
 800122e:	f003 f83f 	bl	80042b0 <HAL_UART_Transmit>

    sprintf(buffer,"Num breaks taken by teller 1: %u\r\n", tellers[0].break_info->num);
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <StartDefaultTask+0x51c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	4939      	ldr	r1, [pc, #228]	; (8001324 <StartDefaultTask+0x540>)
 800123e:	4618      	mov	r0, r3
 8001240:	f007 f8aa 	bl	8008398 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffc1 	bl	80001d0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	f107 010c 	add.w	r1, r7, #12
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	4828      	ldr	r0, [pc, #160]	; (80012fc <StartDefaultTask+0x518>)
 800125c:	f003 f828 	bl	80042b0 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
    

    
    //Teller 1
    sprintf(buffer,"Average length of breaks taken by teller 1: %u\r\n", tellers[0].break_info->total / tellers[0].break_info->num);
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <StartDefaultTask+0x51c>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <StartDefaultTask+0x51c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	492c      	ldr	r1, [pc, #176]	; (8001328 <StartDefaultTask+0x544>)
 8001276:	4618      	mov	r0, r3
 8001278:	f007 f88e 	bl	8008398 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);    
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4618      	mov	r0, r3
 8001282:	f7fe ffa5 	bl	80001d0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f107 010c 	add.w	r1, r7, #12
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	481a      	ldr	r0, [pc, #104]	; (80012fc <StartDefaultTask+0x518>)
 8001294:	f003 f80c 	bl	80042b0 <HAL_UART_Transmit>
    //Teller 3
    // sprintf(buffer,"Average length of breaks taken by teller 3: %u\r\n", tellers[2].break_info->total / tellers[2].break_info->num);
    // HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);    

    // CHANGE 1 TO NUM_TELLERS
    for(int i = 0; i < 1;i++)
 8001298:	2300      	movs	r3, #0
 800129a:	657b      	str	r3, [r7, #84]	; 0x54
 800129c:	e021      	b.n	80012e2 <StartDefaultTask+0x4fe>
    {
      sprintf(buffer,"Length of longest break taken by teller %u: %u\r\n",i+1, tellers[i].break_info->longest);
 800129e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a0:	1c5c      	adds	r4, r3, #1
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <StartDefaultTask+0x51c>)
 80012a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a6:	212c      	movs	r1, #44	; 0x2c
 80012a8:	fb01 f303 	mul.w	r3, r1, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	331c      	adds	r3, #28
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f107 000c 	add.w	r0, r7, #12
 80012b8:	4622      	mov	r2, r4
 80012ba:	491c      	ldr	r1, [pc, #112]	; (800132c <StartDefaultTask+0x548>)
 80012bc:	f007 f86c 	bl	8008398 <siprintf>
      HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);   
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe ff83 	bl	80001d0 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	4809      	ldr	r0, [pc, #36]	; (80012fc <StartDefaultTask+0x518>)
 80012d8:	f002 ffea 	bl	80042b0 <HAL_UART_Transmit>
    for(int i = 0; i < 1;i++)
 80012dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012de:	3301      	adds	r3, #1
 80012e0:	657b      	str	r3, [r7, #84]	; 0x54
 80012e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	ddda      	ble.n	800129e <StartDefaultTask+0x4ba>
    }
    
    // CHANGE 1 TO NUM_TELLERS
    for(int i = 0; i < 1;i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	653b      	str	r3, [r7, #80]	; 0x50
 80012ec:	e042      	b.n	8001374 <StartDefaultTask+0x590>
 80012ee:	bf00      	nop
 80012f0:	20000090 	.word	0x20000090
 80012f4:	200048fc 	.word	0x200048fc
 80012f8:	08008c58 	.word	0x08008c58
 80012fc:	20004954 	.word	0x20004954
 8001300:	200000bc 	.word	0x200000bc
 8001304:	08008c7c 	.word	0x08008c7c
 8001308:	88888889 	.word	0x88888889
 800130c:	08008ca8 	.word	0x08008ca8
 8001310:	08008cd4 	.word	0x08008cd4
 8001314:	08008cfc 	.word	0x08008cfc
 8001318:	08008d20 	.word	0x08008d20
 800131c:	08008d54 	.word	0x08008d54
 8001320:	08008d78 	.word	0x08008d78
 8001324:	08008d88 	.word	0x08008d88
 8001328:	08008dac 	.word	0x08008dac
 800132c:	08008de0 	.word	0x08008de0
    {
      sprintf(buffer,"Length of shortest break taken by teller %u: %u\r\n",i+1, tellers[i].break_info->shortest);
 8001330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001332:	1c5c      	adds	r4, r3, #1
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <StartDefaultTask+0x5a4>)
 8001336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001338:	212c      	movs	r1, #44	; 0x2c
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	4413      	add	r3, r2
 8001340:	331c      	adds	r3, #28
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f107 000c 	add.w	r0, r7, #12
 800134a:	4622      	mov	r2, r4
 800134c:	490f      	ldr	r1, [pc, #60]	; (800138c <StartDefaultTask+0x5a8>)
 800134e:	f007 f823 	bl	8008398 <siprintf>
      HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);   
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4618      	mov	r0, r3
 8001358:	f7fe ff3a 	bl	80001d0 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	f107 010c 	add.w	r1, r7, #12
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	4809      	ldr	r0, [pc, #36]	; (8001390 <StartDefaultTask+0x5ac>)
 800136a:	f002 ffa1 	bl	80042b0 <HAL_UART_Transmit>
    for(int i = 0; i < 1;i++)
 800136e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001370:	3301      	adds	r3, #1
 8001372:	653b      	str	r3, [r7, #80]	; 0x50
 8001374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001376:	2b00      	cmp	r3, #0
 8001378:	ddda      	ble.n	8001330 <StartDefaultTask+0x54c>
    }
	  osSemaphoreRelease (printBinarySemHandle);
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <StartDefaultTask+0x5b0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f003 ff48 	bl	8005214 <osSemaphoreRelease>
	  while(1);
 8001384:	e7fe      	b.n	8001384 <StartDefaultTask+0x5a0>
 8001386:	bf00      	nop
 8001388:	200000bc 	.word	0x200000bc
 800138c:	08008e14 	.word	0x08008e14
 8001390:	20004954 	.word	0x20004954
 8001394:	200048fc 	.word	0x200048fc

08001398 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b098      	sub	sp, #96	; 0x60
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


	  uint8_t buffer1[64];
	  unsigned int random_time;
	  TellerS* teller = &tellers[0];
 80013a0:	4b8f      	ldr	r3, [pc, #572]	; (80015e0 <StartTask02+0x248>)
 80013a2:	65fb      	str	r3, [r7, #92]	; 0x5c

	  while(1)
		{
			if (rngBinarySemHandle != NULL && osSemaphoreAcquire(rngBinarySemHandle,0) == osOK)
 80013a4:	4b8f      	ldr	r3, [pc, #572]	; (80015e4 <StartTask02+0x24c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0fb      	beq.n	80013a4 <StartTask02+0xc>
 80013ac:	4b8d      	ldr	r3, [pc, #564]	; (80015e4 <StartTask02+0x24c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fec8 	bl	8005148 <osSemaphoreAcquire>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f2      	bne.n	80013a4 <StartTask02+0xc>
			{
				HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4888      	ldr	r0, [pc, #544]	; (80015e8 <StartTask02+0x250>)
 80013c6:	f002 faa7 	bl	8003918 <HAL_RNG_GenerateRandomNumber>
				osSemaphoreRelease(rngBinarySemHandle);
 80013ca:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <StartTask02+0x24c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 ff20 	bl	8005214 <osSemaphoreRelease>
				break;
 80013d4:	bf00      	nop

			}
		}

	  init_teller(teller,TELLER_1,random_time);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	461a      	mov	r2, r3
 80013da:	2101      	movs	r1, #1
 80013dc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80013de:	f000 fbbd 	bl	8001b5c <init_teller>


	  for(;;)
	  {
	    // If it is the end of the and there are no more customers to serve
	    if (master_timer > MAX_TIME && is_empty(&customer_queue))
 80013e2:	4b82      	ldr	r3, [pc, #520]	; (80015ec <StartTask02+0x254>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f246 2270 	movw	r2, #25200	; 0x6270
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d906      	bls.n	80013fc <StartTask02+0x64>
 80013ee:	4880      	ldr	r0, [pc, #512]	; (80015f0 <StartTask02+0x258>)
 80013f0:	f000 fa06 	bl	8001800 <is_empty>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d000      	beq.n	80013fc <StartTask02+0x64>
	    {
	      while(1);
 80013fa:	e7fe      	b.n	80013fa <StartTask02+0x62>
	    }
	    if(teller->status == idle)
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f040 80c6 	bne.w	8001594 <StartTask02+0x1fc>
	    {
	        // If the teller can, they should go on break
	        // The time until break is the time at which the master_timer will be at when they can take a break
	        if( master_timer>= teller->time_until_break)
 8001408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	4b77      	ldr	r3, [pc, #476]	; (80015ec <StartTask02+0x254>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d85a      	bhi.n	80014ca <StartTask02+0x132>
	        {
	        	while(1)
				{
					if (rngBinarySemHandle != NULL && osSemaphoreAcquire(rngBinarySemHandle,0) == osOK)
 8001414:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <StartTask02+0x24c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0fb      	beq.n	8001414 <StartTask02+0x7c>
 800141c:	4b71      	ldr	r3, [pc, #452]	; (80015e4 <StartTask02+0x24c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fe90 	bl	8005148 <osSemaphoreAcquire>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f2      	bne.n	8001414 <StartTask02+0x7c>
					{
						HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	4619      	mov	r1, r3
 8001434:	486c      	ldr	r0, [pc, #432]	; (80015e8 <StartTask02+0x250>)
 8001436:	f002 fa6f 	bl	8003918 <HAL_RNG_GenerateRandomNumber>
						osSemaphoreRelease(rngBinarySemHandle);
 800143a:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <StartTask02+0x24c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fee8 	bl	8005214 <osSemaphoreRelease>
						break;
 8001444:	bf00      	nop

					}
				}
	            unsigned int init_time_waiting= generate_break_length(random_time);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f8c1 	bl	80005d0 <generate_break_length>
 800144e:	65b8      	str	r0, [r7, #88]	; 0x58
	            unsigned int time_waiting = init_time_waiting + master_timer;
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <StartTask02+0x254>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001456:	4413      	add	r3, r2
 8001458:	657b      	str	r3, [r7, #84]	; 0x54

	            teller->busy_time = time_waiting;
 800145a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800145e:	619a      	str	r2, [r3, #24]
	            teller->total_time_waiting = init_time_waiting;
 8001460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001464:	609a      	str	r2, [r3, #8]
	            teller->break_info->num++;
 8001466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	3201      	adds	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
	            update_breaks_metrics(teller->break_info, init_time_waiting);
 8001470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f882 	bl	8000580 <update_breaks_metrics>
	            teller->status = on_break;
 800147c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147e:	2202      	movs	r2, #2
 8001480:	f883 2020 	strb.w	r2, [r3, #32]
	        	while(1)
				{
					if (rngBinarySemHandle != NULL && osSemaphoreAcquire(rngBinarySemHandle,0) == osOK)
 8001484:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <StartTask02+0x24c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0fb      	beq.n	8001484 <StartTask02+0xec>
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <StartTask02+0x24c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fe58 	bl	8005148 <osSemaphoreAcquire>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f2      	bne.n	8001484 <StartTask02+0xec>
					{
						HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	4850      	ldr	r0, [pc, #320]	; (80015e8 <StartTask02+0x250>)
 80014a6:	f002 fa37 	bl	8003918 <HAL_RNG_GenerateRandomNumber>
						osSemaphoreRelease(rngBinarySemHandle);
 80014aa:	4b4e      	ldr	r3, [pc, #312]	; (80015e4 <StartTask02+0x24c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 feb0 	bl	8005214 <osSemaphoreRelease>
						break;
 80014b4:	bf00      	nop

					}
				}
	            teller->time_until_break = master_timer + generate_time_until_break(random_time);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f8a1 	bl	8000600 <generate_time_until_break>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <StartTask02+0x254>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	441a      	add	r2, r3
 80014c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28

	            //sprintf(buffer1,"Teller taking break. \r\n");
				      //HAL_UART_Transmit(&huart2, buffer1, strlen((char*)buffer1), HAL_MAX_DELAY);
	        }
	        // Lock the queue info
	        if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK){
 80014ca:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <StartTask02+0x25c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d087      	beq.n	80013e2 <StartTask02+0x4a>
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <StartTask02+0x25c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fe35 	bl	8005148 <osSemaphoreAcquire>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f af7e 	bne.w	80013e2 <StartTask02+0x4a>
	          if(customer_queue.size > 0)
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <StartTask02+0x258>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d04c      	beq.n	8001588 <StartTask02+0x1f0>
	          {
	              CustomerS* customer = dequeue(&customer_queue);
 80014ee:	4840      	ldr	r0, [pc, #256]	; (80015f0 <StartTask02+0x258>)
 80014f0:	f000 f905 	bl	80016fe <dequeue>
 80014f4:	6538      	str	r0, [r7, #80]	; 0x50
	              // Update teller information based on customer
	              teller->total_served++;
 80014f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fe:	601a      	str	r2, [r3, #0]
	              teller->total_time_served += customer->interaction_time;
 8001500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	441a      	add	r2, r3
 800150a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150c:	605a      	str	r2, [r3, #4]
	              teller->busy_time = master_timer + customer->interaction_time;
 800150e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <StartTask02+0x254>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	441a      	add	r2, r3
 8001518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151a:	619a      	str	r2, [r3, #24]
	              teller->status = busy;
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]
	              teller->total_time_waiting = master_timer - teller->time_finished_task;
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <StartTask02+0x254>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	1ad2      	subs	r2, r2, r3
 800152e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001530:	609a      	str	r2, [r3, #8]
	              teller->time_finished_task = 0;
 8001532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

	              if (customer->interaction_time > teller->max_transaction_time)
 8001538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d903      	bls.n	800154c <StartTask02+0x1b4>
	              {
	                teller->max_transaction_time = customer->interaction_time;
 8001544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154a:	60da      	str	r2, [r3, #12]
	              }

	              // Wait time for the customer to be serviced
	              customer_queue.current_wait_time = master_timer - customer->time_joined;
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <StartTask02+0x254>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <StartTask02+0x258>)
 8001558:	6213      	str	r3, [r2, #32]
	              // If the wait time for that customer
	              if (customer_queue.current_wait_time > customer_queue.max_wait_time)
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <StartTask02+0x258>)
 800155c:	6a1a      	ldr	r2, [r3, #32]
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <StartTask02+0x258>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	d903      	bls.n	800156e <StartTask02+0x1d6>
	              {
	                customer_queue.max_wait_time = customer_queue.current_wait_time;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <StartTask02+0x258>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <StartTask02+0x258>)
 800156c:	6053      	str	r3, [r2, #4]
	              }

	              // Add the amount of seconds the customer waited in the queue for (current time - time when they joined)
	              customer_queue.total_wait_time += master_timer - customer->time_joined;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <StartTask02+0x254>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <StartTask02+0x258>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	4413      	add	r3, r2
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <StartTask02+0x258>)
 8001580:	6113      	str	r3, [r2, #16]
	              //sprintf(buffer1,"Teller 1 serving a customer \r\n");
				        //HAL_UART_Transmit(&huart2, buffer1, strlen((char*)buffer1), HAL_MAX_DELAY);


	              // Free up the space occupied by the customer
	              vPortFree(customer);
 8001582:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001584:	f006 fdb6 	bl	80080f4 <vPortFree>

	              // Unlock queue

	          }
	          osSemaphoreRelease (myBinarySem01Handle);
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <StartTask02+0x25c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fe41 	bl	8005214 <osSemaphoreRelease>
 8001592:	e726      	b.n	80013e2 <StartTask02+0x4a>
	        }

	    }
	    else if (busy == teller->status)
 8001594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10f      	bne.n	80015be <StartTask02+0x226>
	    {
	        if(master_timer >= teller->busy_time)
 800159e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <StartTask02+0x254>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	f63f af1b 	bhi.w	80013e2 <StartTask02+0x4a>
	        {
	            teller->status = idle;
 80015ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]
	            teller->time_finished_task = master_timer;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <StartTask02+0x254>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
 80015bc:	e711      	b.n	80013e2 <StartTask02+0x4a>
	        }
	    }
	    else // if teller.status == on_break
	    {
	        if (master_timer >= teller->busy_time)
 80015be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <StartTask02+0x254>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	f63f af0b 	bhi.w	80013e2 <StartTask02+0x4a>
	        {
	            teller->status = idle;
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]
	            teller->time_finished_task = master_timer;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <StartTask02+0x254>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
	    if (master_timer > MAX_TIME && is_empty(&customer_queue))
 80015dc:	e701      	b.n	80013e2 <StartTask02+0x4a>
 80015de:	bf00      	nop
 80015e0:	200000bc 	.word	0x200000bc
 80015e4:	200048f4 	.word	0x200048f4
 80015e8:	20004900 	.word	0x20004900
 80015ec:	200048ec 	.word	0x200048ec
 80015f0:	20000090 	.word	0x20000090
 80015f4:	20004910 	.word	0x20004910

080015f8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	for(;;)
	  {
	    osDelay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f003 fcd5 	bl	8004fb0 <osDelay>
 8001606:	e7fb      	b.n	8001600 <StartTask03+0x8>

08001608 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f003 fccd 	bl	8004fb0 <osDelay>
 8001616:	e7fb      	b.n	8001610 <StartTask04+0x8>

08001618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800162a:	f000 fb15 	bl	8001c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40012c00 	.word	0x40012c00

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <init_queue>:
 * Sets values to 0 or NULL
 * [QueueS*] QueuePtr - Pointer to a queue to initialize
 * Returns: NULL
 * */
void init_queue(QueueS* QueuePtr,unsigned int random_time)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
    //Metric information init
    QueuePtr->max_depth = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    QueuePtr->max_wait_time = 0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
    QueuePtr->max_size = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
    QueuePtr->total_serviced = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
    QueuePtr->total_wait_time = 0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
    QueuePtr->total_interaction_time = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]

    //Active information init
    QueuePtr->size = 0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
    QueuePtr->time_for_new_customer = generate_time_for_new_cust(random_time);
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f000 f8a6 	bl	80017d0 <generate_time_for_new_cust>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	61da      	str	r2, [r3, #28]
    QueuePtr->current_wait_time = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    QueuePtr->front_node = NULL;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    QueuePtr->back_node = NULL;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <enqueue>:
 * [QueueS*] QueuePtr - Pointer to a queue to add item to
 * [QueueS*] NodePtr  - Pointer to a node to add the back of the queue (back of the line)
 *  Returns: NULL
 * */
void enqueue(QueueS* QueuePtr, Queue_NodeS* NodePtr)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    if (QueuePtr->size == 0)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <enqueue+0x26>
    {
        NodePtr->next_node = NULL;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
        QueuePtr->front_node = NodePtr;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
 80016c8:	e009      	b.n	80016de <enqueue+0x3a>
    }
    else
    {
        NodePtr->next_node = NULL;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node->next_node = NodePtr;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
    }
    QueuePtr->size++;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
    QueuePtr->total_serviced++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60da      	str	r2, [r3, #12]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <dequeue>:
 * [QueueS* QueuePtr] - Pointer to a queue
 * Returns:
 *          Pointer to the removed data from node OR NULL if empty queue
 * */
CustomerS* dequeue(QueueS* QueuePtr)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
    // If the queue is a single item
    if (QueuePtr->size > 0)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d023      	beq.n	8001756 <dequeue+0x58>
    {
        Queue_NodeS* old_head = QueuePtr->front_node;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	60fb      	str	r3, [r7, #12]
        CustomerS* customer = old_head->customer;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60bb      	str	r3, [r7, #8]
        if(QueuePtr->size == 1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d106      	bne.n	8001730 <dequeue+0x32>
        {
            QueuePtr->front_node = NULL;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
            QueuePtr->back_node = NULL;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
 800172e:	e008      	b.n	8001742 <dequeue+0x44>
        }
        else if (QueuePtr->size > 1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d904      	bls.n	8001742 <dequeue+0x44>
        {
            QueuePtr->front_node = QueuePtr->front_node->next_node;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
        }
        QueuePtr->size--;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
        vPortFree(old_head);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f006 fcd1 	bl	80080f4 <vPortFree>
        return customer;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	e000      	b.n	8001758 <dequeue+0x5a>
    }
    return NULL;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <add_customer>:
 * Adds a customer to the static Queue object
 * Inputs: None
 * Returns: None
 * */
void add_customer(QueueS* queue_ptr,unsigned int random_time)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    // Allocate Node
    Queue_NodeS* new_node = (Queue_NodeS*) pvPortMalloc(sizeof(Queue_NodeS));
 800176a:	2008      	movs	r0, #8
 800176c:	f006 fc00 	bl	8007f70 <pvPortMalloc>
 8001770:	4603      	mov	r3, r0
 8001772:	60fb      	str	r3, [r7, #12]

    // Create new customer to be added
    CustomerS* new_customer = Generate_Customer(random_time);
 8001774:	6838      	ldr	r0, [r7, #0]
 8001776:	f7fe ff5b 	bl	8000630 <Generate_Customer>
 800177a:	60b8      	str	r0, [r7, #8]
    
    new_node->customer = new_customer;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	601a      	str	r2, [r3, #0]

    enqueue(queue_ptr, new_node);
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff8d 	bl	80016a4 <enqueue>

   queue_ptr->current_wait_time += new_customer->interaction_time;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	441a      	add	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	621a      	str	r2, [r3, #32]
   queue_ptr->total_wait_time += queue_ptr->current_wait_time;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	441a      	add	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
   queue_ptr->total_interaction_time += new_customer->interaction_time;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	441a      	add	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	615a      	str	r2, [r3, #20]

    if (queue_ptr->size > queue_ptr->max_depth)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d903      	bls.n	80017c8 <add_customer+0x68>
    {
        queue_ptr->max_depth = queue_ptr->size;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	601a      	str	r2, [r3, #0]
//    if (queue_ptr->current_wait_time > queue_ptr->max_wait_time)
//    {
//        queue_ptr->max_wait_time = queue_ptr->current_wait_time;
//    }

}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <generate_time_for_new_cust>:
 * Generates a time between 1 minute and 4 minutes
 * Inputs: None
 * Outputs: The time generated
 * */
unsigned int generate_time_for_new_cust(unsigned int random_time)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_ENTER_QUEUE_TIME;
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <generate_time_for_new_cust+0x2c>)
 80017dc:	fba3 1302 	umull	r1, r3, r3, r2
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	333c      	adds	r3, #60	; 0x3c
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	91a2b3c5 	.word	0x91a2b3c5

08001800 <is_empty>:
 * Determines if the given queue is empty
 * Inputs: None
 * Returns: 1 if queue is empty 0 if not
 * */
int is_empty(QueueS* queue_ptr)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    if(queue_ptr->size == 0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <is_empty+0x14>
    {
        return 1;
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <is_empty+0x16>
    }
    return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_MspInit+0x4c>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_MspInit+0x4c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6613      	str	r3, [r2, #96]	; 0x60
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_MspInit+0x4c>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_MspInit+0x4c>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_MspInit+0x4c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_MspInit+0x4c>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	210f      	movs	r1, #15
 800185e:	f06f 0001 	mvn.w	r0, #1
 8001862:	f000 facf 	bl	8001e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_RNG_MspInit+0x38>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10b      	bne.n	800189e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_RNG_MspInit+0x3c>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RNG_MspInit+0x3c>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_RNG_MspInit+0x3c>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	50060800 	.word	0x50060800
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d113      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_TIM_Base_MspInit+0x44>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_TIM_Base_MspInit+0x44>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_TIM_Base_MspInit+0x44>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2105      	movs	r1, #5
 80018e2:	201c      	movs	r0, #28
 80018e4:	f000 fa8e 	bl	8001e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e8:	201c      	movs	r0, #28
 80018ea:	f000 faa7 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_UART_MspInit+0x7c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d127      	bne.n	800196e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_UART_MspInit+0x80>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <HAL_UART_MspInit+0x80>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_UART_MspInit+0x80>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0x80>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_UART_MspInit+0x80>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0x80>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800194e:	2360      	movs	r3, #96	; 0x60
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001956:	2301      	movs	r3, #1
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195e:	2307      	movs	r3, #7
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <HAL_UART_MspInit+0x84>)
 800196a:	f000 fa75 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40004400 	.word	0x40004400
 800197c:	40021000 	.word	0x40021000
 8001980:	48000c00 	.word	0x48000c00

08001984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	; 0x30
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	2019      	movs	r0, #25
 800199a:	f000 fa33 	bl	8001e04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800199e:	2019      	movs	r0, #25
 80019a0:	f000 fa4c 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_InitTick+0x9c>)
 80019a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_InitTick+0x9c>)
 80019aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ae:	6613      	str	r3, [r2, #96]	; 0x60
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_InitTick+0x9c>)
 80019b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019bc:	f107 0210 	add.w	r2, r7, #16
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fa04 	bl	8002dd4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019cc:	f001 f9ec 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 80019d0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <HAL_InitTick+0xa0>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	3b01      	subs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_InitTick+0xa4>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <HAL_InitTick+0xa8>)
 80019e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_InitTick+0xa4>)
 80019e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_InitTick+0xa4>)
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_InitTick+0xa4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_InitTick+0xa4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <HAL_InitTick+0xa4>)
 8001a02:	f001 ffd8 	bl	80039b6 <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d104      	bne.n	8001a16 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a0c:	4806      	ldr	r0, [pc, #24]	; (8001a28 <HAL_InitTick+0xa4>)
 8001a0e:	f001 fffd 	bl	8003a0c <HAL_TIM_Base_Start_IT>
 8001a12:	4603      	mov	r3, r0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3730      	adds	r7, #48	; 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	200049dc 	.word	0x200049dc
 8001a2c:	40012c00 	.word	0x40012c00

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a6a:	f001 fff9 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200049dc 	.word	0x200049dc

08001a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	master_timer++;
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <TIM2_IRQHandler+0x18>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <TIM2_IRQHandler+0x18>)
 8001a84:	6013      	str	r3, [r2, #0]
	//uint8_t buffer[16];
	//sprintf(buffer, "Count: %u\r\n", master_timer);
	//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <TIM2_IRQHandler+0x1c>)
 8001a88:	f001 ffea 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200048ec 	.word	0x200048ec
 8001a94:	20004914 	.word	0x20004914

08001a98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x50>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x16>
		heap_end = &end;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <_sbrk+0x50>)
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <_sbrk+0x54>)
 8001aac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <_sbrk+0x50>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <_sbrk+0x50>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	466a      	mov	r2, sp
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d907      	bls.n	8001ad2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ac2:	f006 fc2b 	bl	800831c <__errno>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	230c      	movs	r3, #12
 8001aca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	e006      	b.n	8001ae0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <_sbrk+0x50>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <_sbrk+0x50>)
 8001adc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000140 	.word	0x20000140
 8001aec:	20004a68 	.word	0x20004a68

08001af0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <SystemInit+0x64>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <SystemInit+0x64>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <SystemInit+0x68>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <SystemInit+0x68>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <SystemInit+0x68>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <SystemInit+0x68>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <SystemInit+0x68>)
 8001b1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <SystemInit+0x68>)
 8001b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <SystemInit+0x68>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <SystemInit+0x68>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <SystemInit+0x68>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SystemInit+0x64>)
 8001b42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b46:	609a      	str	r2, [r3, #8]
#endif
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00
 8001b58:	40021000 	.word	0x40021000

08001b5c <init_teller>:
 * Initialization of a teller struct
 * [TellerS*] teller - pointer to a teller
 * [uint16_t] id     - Id number to initialize the teller with
 * */
void init_teller(TellerS* teller,uint16_t id, unsigned int random_time)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	460b      	mov	r3, r1
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	817b      	strh	r3, [r7, #10]
    teller->total_served = 0;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
    teller->total_time_served = 0;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
    teller->total_time_waiting = 0;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
    teller->teller_id = id;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	897a      	ldrh	r2, [r7, #10]
 8001b80:	829a      	strh	r2, [r3, #20]
    teller->busy_time = 0;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
    teller->break_info = (BreakS*) pvPortMalloc(sizeof(BreakS));
 8001b88:	2010      	movs	r0, #16
 8001b8a:	f006 f9f1 	bl	8007f70 <pvPortMalloc>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	61da      	str	r2, [r3, #28]
    teller->status = idle;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2020 	strb.w	r2, [r3, #32]
    teller->time_until_break = generate_time_until_break(random_time);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fd2e 	bl	8000600 <generate_time_until_break>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
    teller->max_transaction_time = 0;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
    teller->max_wait_time = 0;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
    teller->time_finished_task = 0;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bca:	e003      	b.n	8001bd4 <LoopCopyDataInit>

08001bcc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bd0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bd2:	3104      	adds	r1, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bd8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bdc:	d3f6      	bcc.n	8001bcc <CopyDataInit>
	ldr	r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001be0:	e002      	b.n	8001be8 <LoopFillZerobss>

08001be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001be2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001be4:	f842 3b04 	str.w	r3, [r2], #4

08001be8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <LoopForever+0x16>)
	cmp	r2, r3
 8001bea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bec:	d3f9      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bee:	f7ff ff7f 	bl	8001af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f006 fb99 	bl	8008328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf6:	f7fe fd4b 	bl	8000690 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bfc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c00:	08008fac 	.word	0x08008fac
	ldr	r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c08:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001c0c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001c10:	20004a64 	.word	0x20004a64

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_Init+0x3c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <HAL_Init+0x3c>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2e:	2003      	movs	r0, #3
 8001c30:	f000 f8dd 	bl	8001dee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fea5 	bl	8001984 <HAL_InitTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	e001      	b.n	8001c4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c46:	f7ff fded 	bl	8001824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_IncTick+0x20>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_IncTick+0x1c>)
 8001c68:	6013      	str	r3, [r2, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20004a1c 	.word	0x20004a1c
 8001c78:	20000008 	.word	0x20000008

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20004a1c 	.word	0x20004a1c

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ff4c 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e16:	f7ff ff61 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff ffb1 	bl	8001d88 <NVIC_EncodePriority>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff80 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff54 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e66:	e17f      	b.n	8002168 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8171 	beq.w	8002162 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d00b      	beq.n	8001ea0 <HAL_GPIO_Init+0x48>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d007      	beq.n	8001ea0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e94:	2b11      	cmp	r3, #17
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d130      	bne.n	8001f02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 0201 	and.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d118      	bne.n	8001f40 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f14:	2201      	movs	r2, #1
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f003 0201 	and.w	r2, r3, #1
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x128>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b12      	cmp	r3, #18
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	6939      	ldr	r1, [r7, #16]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80ac 	beq.w	8002162 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <HAL_GPIO_Init+0x32c>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	4a5d      	ldr	r2, [pc, #372]	; (8002184 <HAL_GPIO_Init+0x32c>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6613      	str	r3, [r2, #96]	; 0x60
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <HAL_GPIO_Init+0x32c>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002022:	4a59      	ldr	r2, [pc, #356]	; (8002188 <HAL_GPIO_Init+0x330>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x242>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4e      	ldr	r2, [pc, #312]	; (800218c <HAL_GPIO_Init+0x334>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x23e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4d      	ldr	r2, [pc, #308]	; (8002190 <HAL_GPIO_Init+0x338>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x23a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_GPIO_Init+0x33c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x236>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4b      	ldr	r2, [pc, #300]	; (8002198 <HAL_GPIO_Init+0x340>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x232>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4a      	ldr	r2, [pc, #296]	; (800219c <HAL_GPIO_Init+0x344>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x22e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a49      	ldr	r2, [pc, #292]	; (80021a0 <HAL_GPIO_Init+0x348>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x22a>
 800207e:	2306      	movs	r3, #6
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002082:	2307      	movs	r3, #7
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x244>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x244>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x244>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x244>
 800209a:	2300      	movs	r3, #0
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ac:	4936      	ldr	r1, [pc, #216]	; (8002188 <HAL_GPIO_Init+0x330>)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020ba:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020de:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002108:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800215c:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae78 	bne.w	8001e68 <HAL_GPIO_Init+0x10>
  }
}
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	48001400 	.word	0x48001400
 80021a0:	48001800 	.word	0x48001800
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000

080021f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_PWREx_GetVoltageRange+0x18>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000

08002214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002222:	d130      	bne.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800222c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002230:	d038      	beq.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2232      	movs	r2, #50	; 0x32
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	3301      	adds	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002258:	e002      	b.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226c:	d102      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x60>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f2      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002280:	d110      	bne.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e00f      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002292:	d007      	beq.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800229c:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40007000 	.word	0x40007000
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e3d4      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d2:	4ba1      	ldr	r3, [pc, #644]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022dc:	4b9e      	ldr	r3, [pc, #632]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80e4 	beq.w	80024bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <HAL_RCC_OscConfig+0x4a>
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	f040 808b 	bne.w	8002418 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 8087 	bne.w	8002418 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800230a:	4b93      	ldr	r3, [pc, #588]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x62>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e3ac      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1a      	ldr	r2, [r3, #32]
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <HAL_RCC_OscConfig+0x7c>
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800233a:	e005      	b.n	8002348 <HAL_RCC_OscConfig+0x88>
 800233c:	4b86      	ldr	r3, [pc, #536]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002348:	4293      	cmp	r3, r2
 800234a:	d223      	bcs.n	8002394 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fd71 	bl	8002e38 <RCC_SetFlashLatencyFromMSIRange>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e38d      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002360:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4977      	ldr	r1, [pc, #476]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237e:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	4972      	ldr	r1, [pc, #456]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
 8002392:	e025      	b.n	80023e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002394:	4b70      	ldr	r3, [pc, #448]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6f      	ldr	r2, [pc, #444]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	496a      	ldr	r1, [pc, #424]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b2:	4b69      	ldr	r3, [pc, #420]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	4965      	ldr	r1, [pc, #404]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fd31 	bl	8002e38 <RCC_SetFlashLatencyFromMSIRange>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e34d      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e0:	f000 fc36 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	4a5a      	ldr	r2, [pc, #360]	; (800255c <HAL_RCC_OscConfig+0x29c>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa21 f303 	lsr.w	r3, r1, r3
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_OscConfig+0x2a0>)
 80023fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002400:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_RCC_OscConfig+0x2a4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fabd 	bl	8001984 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d052      	beq.n	80024ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	e331      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d032      	beq.n	8002486 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002420:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a4c      	ldr	r2, [pc, #304]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800242c:	f7ff fc26 	bl	8001c7c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002434:	f7ff fc22 	bl	8001c7c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e31a      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002446:	4b44      	ldr	r3, [pc, #272]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a40      	ldr	r2, [pc, #256]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	493b      	ldr	r1, [pc, #236]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4936      	ldr	r1, [pc, #216]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
 8002484:	e01a      	b.n	80024bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a33      	ldr	r2, [pc, #204]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002492:	f7ff fbf3 	bl	8001c7c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800249a:	f7ff fbef 	bl	8001c7c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e2e7      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x1da>
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d074      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x21a>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d10e      	bne.n	80024f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d10b      	bne.n	80024f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024da:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d064      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d160      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e2c4      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x24a>
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a15      	ldr	r2, [pc, #84]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e01d      	b.n	8002546 <HAL_RCC_OscConfig+0x286>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x26e>
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800251a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x286>
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_RCC_OscConfig+0x298>)
 8002540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01c      	beq.n	8002588 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7ff fb95 	bl	8001c7c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002554:	e011      	b.n	800257a <HAL_RCC_OscConfig+0x2ba>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	08008f20 	.word	0x08008f20
 8002560:	20000000 	.word	0x20000000
 8002564:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fb88 	bl	8001c7c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e280      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257a:	4baf      	ldr	r3, [pc, #700]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x2a8>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff fb78 	bl	8001c7c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fb74 	bl	8001c7c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e26c      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a2:	4ba5      	ldr	r3, [pc, #660]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x2d0>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d060      	beq.n	8002680 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_OscConfig+0x310>
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d119      	bne.n	80025fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d116      	bne.n	80025fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	4b99      	ldr	r3, [pc, #612]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_OscConfig+0x328>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e249      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	4b93      	ldr	r3, [pc, #588]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	4990      	ldr	r1, [pc, #576]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fc:	e040      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d023      	beq.n	800264e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002606:	4b8c      	ldr	r3, [pc, #560]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a8b      	ldr	r2, [pc, #556]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff fb33 	bl	8001c7c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7ff fb2f 	bl	8001c7c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e227      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800262c:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b7f      	ldr	r3, [pc, #508]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	497c      	ldr	r1, [pc, #496]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	e018      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b7a      	ldr	r3, [pc, #488]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a79      	ldr	r2, [pc, #484]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff fb0f 	bl	8001c7c <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002662:	f7ff fb0b 	bl	8001c7c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e203      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002674:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d03c      	beq.n	8002706 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01c      	beq.n	80026ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002694:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269a:	4a67      	ldr	r2, [pc, #412]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7ff faea 	bl	8001c7c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7ff fae6 	bl	8001c7c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1de      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026be:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ef      	beq.n	80026ac <HAL_RCC_OscConfig+0x3ec>
 80026cc:	e01b      	b.n	8002706 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff facd 	bl	8001c7c <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e6:	f7ff fac9 	bl	8001c7c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1c1      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f8:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ef      	bne.n	80026e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a6 	beq.w	8002860 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002718:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	4a43      	ldr	r2, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	; 0x58
 8002730:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002740:	4b3e      	ldr	r3, [pc, #248]	; (800283c <HAL_RCC_OscConfig+0x57c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d118      	bne.n	800277e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274c:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_RCC_OscConfig+0x57c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_RCC_OscConfig+0x57c>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002758:	f7ff fa90 	bl	8001c7c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7ff fa8c 	bl	8001c7c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e184      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_RCC_OscConfig+0x57c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x4d8>
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002796:	e024      	b.n	80027e2 <HAL_RCC_OscConfig+0x522>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d110      	bne.n	80027c2 <HAL_RCC_OscConfig+0x502>
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a20      	ldr	r2, [pc, #128]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c0:	e00f      	b.n	80027e2 <HAL_RCC_OscConfig+0x522>
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7ff fa47 	bl	8001c7c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7ff fa43 	bl	8001c7c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e139      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x578>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ed      	beq.n	80027f2 <HAL_RCC_OscConfig+0x532>
 8002816:	e01a      	b.n	800284e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7ff fa30 	bl	8001c7c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281e:	e00f      	b.n	8002840 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7ff fa2c 	bl	8001c7c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d906      	bls.n	8002840 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e122      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002840:	4b90      	ldr	r3, [pc, #576]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e8      	bne.n	8002820 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	4a8a      	ldr	r2, [pc, #552]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8108 	beq.w	8002a7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	2b02      	cmp	r3, #2
 8002870:	f040 80d0 	bne.w	8002a14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002874:	4b83      	ldr	r3, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	429a      	cmp	r2, r3
 8002886:	d130      	bne.n	80028ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	3b01      	subs	r3, #1
 8002894:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d127      	bne.n	80028ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d11f      	bne.n	80028ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b4:	2a07      	cmp	r2, #7
 80028b6:	bf14      	ite	ne
 80028b8:	2201      	movne	r2, #1
 80028ba:	2200      	moveq	r2, #0
 80028bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028be:	4293      	cmp	r3, r2
 80028c0:	d113      	bne.n	80028ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	3b01      	subs	r3, #1
 80028d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	3b01      	subs	r3, #1
 80028e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d06e      	beq.n	80029c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d069      	beq.n	80029c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028f0:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b7      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800290c:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5c      	ldr	r2, [pc, #368]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002918:	f7ff f9b0 	bl	8001c7c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff f9ac 	bl	8001c7c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0a4      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002932:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293e:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_RCC_OscConfig+0x7c8>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800294e:	3a01      	subs	r2, #1
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002958:	0212      	lsls	r2, r2, #8
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002960:	0852      	lsrs	r2, r2, #1
 8002962:	3a01      	subs	r2, #1
 8002964:	0552      	lsls	r2, r2, #21
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800296c:	0852      	lsrs	r2, r2, #1
 800296e:	3a01      	subs	r2, #1
 8002970:	0652      	lsls	r2, r2, #25
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002978:	0912      	lsrs	r2, r2, #4
 800297a:	0452      	lsls	r2, r2, #17
 800297c:	430a      	orrs	r2, r1
 800297e:	4941      	ldr	r1, [pc, #260]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3e      	ldr	r2, [pc, #248]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800298e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002990:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800299c:	f7ff f96e 	bl	8001c7c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7ff f96a 	bl	8001c7c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e062      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c2:	e05a      	b.n	8002a7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e059      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d152      	bne.n	8002a7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80029da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029e0:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029ec:	f7ff f946 	bl	8001c7c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff f942 	bl	8001c7c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e03a      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x734>
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d02d      	beq.n	8002a76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a38:	f023 0303 	bic.w	r3, r3, #3
 8002a3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7ff f915 	bl	8001c7c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7ff f911 	bl	8001c7c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e009      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x7c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x796>
 8002a74:	e001      	b.n	8002a7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	f99d808c 	.word	0xf99d808c

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0c8      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d910      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	4961      	ldr	r1, [pc, #388]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b0      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d04c      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae4:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d121      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e09e      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d115      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e092      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b14:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e086      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e07e      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b34:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 0203 	bic.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	493f      	ldr	r1, [pc, #252]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b46:	f7ff f899 	bl	8001c7c <HAL_GetTick>
 8002b4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4e:	f7ff f895 	bl	8001c7c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e066      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 020c 	and.w	r2, r3, #12
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d1eb      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	492c      	ldr	r1, [pc, #176]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d210      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 0207 	bic.w	r2, r3, #7
 8002baa:	4924      	ldr	r1, [pc, #144]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_ClockConfig+0x1b0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e036      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4918      	ldr	r1, [pc, #96]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4910      	ldr	r1, [pc, #64]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c02:	f000 f825 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe feac 	bl	8001984 <HAL_InitTick>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c30:	7afb      	ldrb	r3, [r7, #11]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	08008f20 	.word	0x08008f20
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c68:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x34>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d121      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11e      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e005      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cac:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc8:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd4:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d133      	bne.n	8002d46 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa4>
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0xaa>
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cf6:	617b      	str	r3, [r7, #20]
      break;
 8002cf8:	e005      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cfc:	617b      	str	r3, [r7, #20]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	617b      	str	r3, [r7, #20]
      break;
 8002d04:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	3301      	adds	r3, #1
 8002d12:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	fb02 f203 	mul.w	r2, r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0e5b      	lsrs	r3, r3, #25
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d46:	69bb      	ldr	r3, [r7, #24]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3724      	adds	r7, #36	; 0x24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08008f38 	.word	0x08008f38
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000000 	.word	0x20000000

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4601      	mov	r1, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08008f30 	.word	0x08008f30

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dac:	f7ff ffda 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002db0:	4601      	mov	r1, r0
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0adb      	lsrs	r3, r3, #11
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08008f30 	.word	0x08008f30

08002dd4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	220f      	movs	r2, #15
 8002de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0203 	and.w	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_RCC_GetClockConfig+0x60>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0207 	and.w	r2, r3, #7
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40022000 	.word	0x40022000

08002e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e44:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e50:	f7ff f9d2 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8002e54:	6178      	str	r0, [r7, #20]
 8002e56:	e014      	b.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6593      	str	r3, [r2, #88]	; 0x58
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e70:	f7ff f9c2 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8002e74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e88:	d10b      	bne.n	8002ea2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d919      	bls.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2ba0      	cmp	r3, #160	; 0xa0
 8002e94:	d902      	bls.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e96:	2302      	movs	r3, #2
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	e013      	b.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	e010      	b.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d902      	bls.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	e00a      	b.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d102      	bne.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e004      	b.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d101      	bne.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 0207 	bic.w	r2, r3, #7
 8002ecc:	4909      	ldr	r1, [pc, #36]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f00:	2300      	movs	r3, #0
 8002f02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f04:	2300      	movs	r3, #0
 8002f06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d03f      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1c:	d01c      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d802      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002f28:	e01f      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f2e:	d003      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f34:	d01c      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002f36:	e018      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f38:	4b85      	ldr	r3, [pc, #532]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4a84      	ldr	r2, [pc, #528]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f44:	e015      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fac9 	bl	80034e4 <RCCEx_PLLSAI1_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f56:	e00c      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3320      	adds	r3, #32
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fbb0 	bl	80036c4 <RCCEx_PLLSAI2_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f6e:	e000      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f78:	4b75      	ldr	r3, [pc, #468]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f86:	4972      	ldr	r1, [pc, #456]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f8e:	e001      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa8:	d01c      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fae:	d802      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002fb4:	e01f      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fba:	d003      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002fbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fc0:	d01c      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002fc2:	e018      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fc4:	4b62      	ldr	r3, [pc, #392]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a61      	ldr	r2, [pc, #388]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fd0:	e015      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fa83 	bl	80034e4 <RCCEx_PLLSAI1_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fe2:	e00c      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3320      	adds	r3, #32
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fb6a 	bl	80036c4 <RCCEx_PLLSAI2_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	74fb      	strb	r3, [r7, #19]
      break;
 8002ffa:	e000      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003004:	4b52      	ldr	r3, [pc, #328]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003012:	494f      	ldr	r1, [pc, #316]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80a0 	beq.w	800316e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003032:	4b47      	ldr	r3, [pc, #284]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003048:	4b41      	ldr	r3, [pc, #260]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	4a40      	ldr	r2, [pc, #256]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800304e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003052:	6593      	str	r3, [r2, #88]	; 0x58
 8003054:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003060:	2301      	movs	r3, #1
 8003062:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3a      	ldr	r2, [pc, #232]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003070:	f7fe fe04 	bl	8001c7c <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003076:	e009      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003078:	f7fe fe00 	bl	8001c7c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	74fb      	strb	r3, [r7, #19]
        break;
 800308a:	e005      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800308c:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ef      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d15c      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01f      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d019      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	4a20      	ldr	r2, [pc, #128]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030e8:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe fdbf 	bl	8001c7c <HAL_GetTick>
 80030fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003100:	e00b      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe fdbb 	bl	8001c7c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d902      	bls.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	74fb      	strb	r3, [r7, #19]
            break;
 8003118:	e006      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ec      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10c      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313e:	4904      	ldr	r1, [pc, #16]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	74bb      	strb	r3, [r7, #18]
 800314c:	e006      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800315c:	7c7b      	ldrb	r3, [r7, #17]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d105      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003162:	4b9e      	ldr	r3, [pc, #632]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	4a9d      	ldr	r2, [pc, #628]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800317a:	4b98      	ldr	r3, [pc, #608]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f023 0203 	bic.w	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	4994      	ldr	r1, [pc, #592]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800319c:	4b8f      	ldr	r3, [pc, #572]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f023 020c 	bic.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	498c      	ldr	r1, [pc, #560]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031be:	4b87      	ldr	r3, [pc, #540]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	4983      	ldr	r1, [pc, #524]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	497b      	ldr	r1, [pc, #492]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003202:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003210:	4972      	ldr	r1, [pc, #456]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003224:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	496a      	ldr	r1, [pc, #424]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	4961      	ldr	r1, [pc, #388]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003268:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	4959      	ldr	r1, [pc, #356]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800328a:	4b54      	ldr	r3, [pc, #336]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003298:	4950      	ldr	r1, [pc, #320]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	4948      	ldr	r1, [pc, #288]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ce:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	493f      	ldr	r1, [pc, #252]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d028      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f0:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fe:	4937      	ldr	r1, [pc, #220]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800330e:	d106      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003310:	4b32      	ldr	r3, [pc, #200]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a31      	ldr	r2, [pc, #196]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331a:	60d3      	str	r3, [r2, #12]
 800331c:	e011      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003326:	d10c      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f8d8 	bl	80034e4 <RCCEx_PLLSAI1_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d028      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	491f      	ldr	r1, [pc, #124]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336c:	d106      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003378:	60d3      	str	r3, [r2, #12]
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f8a9 	bl	80034e4 <RCCEx_PLLSAI1_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02b      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ca:	d109      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a02      	ldr	r2, [pc, #8]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d6:	60d3      	str	r3, [r2, #12]
 80033d8:	e014      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f877 	bl	80034e4 <RCCEx_PLLSAI1_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033fa:	7cfb      	ldrb	r3, [r7, #19]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02f      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003410:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341e:	4928      	ldr	r1, [pc, #160]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800342e:	d10d      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f854 	bl	80034e4 <RCCEx_PLLSAI1_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d014      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	74bb      	strb	r3, [r7, #18]
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3320      	adds	r3, #32
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f931 	bl	80036c4 <RCCEx_PLLSAI2_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348a:	490d      	ldr	r1, [pc, #52]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ae:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000

080034e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034f2:	4b73      	ldr	r3, [pc, #460]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d018      	beq.n	8003530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034fe:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0203 	and.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d10d      	bne.n	800352a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
       ||
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003516:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
       ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d044      	beq.n	80035b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e041      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d00c      	beq.n	8003552 <RCCEx_PLLSAI1_Config+0x6e>
 8003538:	2b03      	cmp	r3, #3
 800353a:	d013      	beq.n	8003564 <RCCEx_PLLSAI1_Config+0x80>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d120      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11d      	bne.n	8003588 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e01a      	b.n	8003588 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003552:	4b5b      	ldr	r3, [pc, #364]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003562:	e013      	b.n	800358c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003564:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003580:	e006      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      break;
 8003586:	e004      	b.n	8003592 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003590:	bf00      	nop
    }

    if(status == HAL_OK)
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003598:	4b49      	ldr	r3, [pc, #292]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	430b      	orrs	r3, r1
 80035ae:	4944      	ldr	r1, [pc, #272]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d17d      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a40      	ldr	r2, [pc, #256]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c6:	f7fe fb59 	bl	8001c7c <HAL_GetTick>
 80035ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035cc:	e009      	b.n	80035e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ce:	f7fe fb55 	bl	8001c7c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d902      	bls.n	80035e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	73fb      	strb	r3, [r7, #15]
        break;
 80035e0:	e005      	b.n	80035ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ef      	bne.n	80035ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d160      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d111      	bne.n	800361e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	0211      	lsls	r1, r2, #8
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68d2      	ldr	r2, [r2, #12]
 8003610:	0912      	lsrs	r2, r2, #4
 8003612:	0452      	lsls	r2, r2, #17
 8003614:	430a      	orrs	r2, r1
 8003616:	492a      	ldr	r1, [pc, #168]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	610b      	str	r3, [r1, #16]
 800361c:	e027      	b.n	800366e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d112      	bne.n	800364a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003624:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800362c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6892      	ldr	r2, [r2, #8]
 8003634:	0211      	lsls	r1, r2, #8
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6912      	ldr	r2, [r2, #16]
 800363a:	0852      	lsrs	r2, r2, #1
 800363c:	3a01      	subs	r2, #1
 800363e:	0552      	lsls	r2, r2, #21
 8003640:	430a      	orrs	r2, r1
 8003642:	491f      	ldr	r1, [pc, #124]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	610b      	str	r3, [r1, #16]
 8003648:	e011      	b.n	800366e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003652:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	0211      	lsls	r1, r2, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6952      	ldr	r2, [r2, #20]
 8003660:	0852      	lsrs	r2, r2, #1
 8003662:	3a01      	subs	r2, #1
 8003664:	0652      	lsls	r2, r2, #25
 8003666:	430a      	orrs	r2, r1
 8003668:	4915      	ldr	r1, [pc, #84]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003678:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fe faff 	bl	8001c7c <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003680:	e009      	b.n	8003696 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003682:	f7fe fafb 	bl	8001c7c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d902      	bls.n	8003696 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	73fb      	strb	r3, [r7, #15]
          break;
 8003694:	e005      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ef      	beq.n	8003682 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000

080036c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d2:	4b68      	ldr	r3, [pc, #416]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d018      	beq.n	8003710 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036de:	4b65      	ldr	r3, [pc, #404]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0203 	and.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d10d      	bne.n	800370a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
       ||
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
       ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d044      	beq.n	8003794 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	e041      	b.n	8003794 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d00c      	beq.n	8003732 <RCCEx_PLLSAI2_Config+0x6e>
 8003718:	2b03      	cmp	r3, #3
 800371a:	d013      	beq.n	8003744 <RCCEx_PLLSAI2_Config+0x80>
 800371c:	2b01      	cmp	r3, #1
 800371e:	d120      	bne.n	8003762 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003720:	4b54      	ldr	r3, [pc, #336]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11d      	bne.n	8003768 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003730:	e01a      	b.n	8003768 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003732:	4b50      	ldr	r3, [pc, #320]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	2b00      	cmp	r3, #0
 800373c:	d116      	bne.n	800376c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003742:	e013      	b.n	800376c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003750:	4b48      	ldr	r3, [pc, #288]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003760:	e006      	b.n	8003770 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
      break;
 8003766:	e004      	b.n	8003772 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003768:	bf00      	nop
 800376a:	e002      	b.n	8003772 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800376c:	bf00      	nop
 800376e:	e000      	b.n	8003772 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003770:	bf00      	nop
    }

    if(status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	3b01      	subs	r3, #1
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	430b      	orrs	r3, r1
 800378e:	4939      	ldr	r1, [pc, #228]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d167      	bne.n	800386a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a35      	ldr	r2, [pc, #212]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a6:	f7fe fa69 	bl	8001c7c <HAL_GetTick>
 80037aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037ac:	e009      	b.n	80037c2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ae:	f7fe fa65 	bl	8001c7c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	73fb      	strb	r3, [r7, #15]
        break;
 80037c0:	e005      	b.n	80037ce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ef      	bne.n	80037ae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d14a      	bne.n	800386a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d111      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	0211      	lsls	r1, r2, #8
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68d2      	ldr	r2, [r2, #12]
 80037f0:	0912      	lsrs	r2, r2, #4
 80037f2:	0452      	lsls	r2, r2, #17
 80037f4:	430a      	orrs	r2, r1
 80037f6:	491f      	ldr	r1, [pc, #124]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	614b      	str	r3, [r1, #20]
 80037fc:	e011      	b.n	8003822 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003806:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	0211      	lsls	r1, r2, #8
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6912      	ldr	r2, [r2, #16]
 8003814:	0852      	lsrs	r2, r2, #1
 8003816:	3a01      	subs	r2, #1
 8003818:	0652      	lsls	r2, r2, #25
 800381a:	430a      	orrs	r2, r1
 800381c:	4915      	ldr	r1, [pc, #84]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fe fa25 	bl	8001c7c <HAL_GetTick>
 8003832:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003834:	e009      	b.n	800384a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003836:	f7fe fa21 	bl	8001c7c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d902      	bls.n	800384a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	73fb      	strb	r3, [r7, #15]
          break;
 8003848:	e005      	b.n	8003856 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ef      	beq.n	8003836 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e042      	b.n	8003910 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	795b      	ldrb	r3, [r3, #5]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd ffea 	bl	8001874 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0204 	orr.w	r2, r2, #4
 80038b4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d104      	bne.n	80038ce <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e020      	b.n	8003910 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80038ce:	f7fe f9d5 	bl	8001c7c <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038d4:	e00e      	b.n	80038f4 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80038d6:	f7fe f9d1 	bl	8001c7c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d907      	bls.n	80038f4 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2204      	movs	r2, #4
 80038e8:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e00d      	b.n	8003910 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d0e9      	beq.n	80038d6 <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	791b      	ldrb	r3, [r3, #4]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_RNG_GenerateRandomNumber+0x1a>
 800392e:	2302      	movs	r3, #2
 8003930:	e03d      	b.n	80039ae <HAL_RNG_GenerateRandomNumber+0x96>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	795b      	ldrb	r3, [r3, #5]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d12c      	bne.n	800399c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003948:	f7fe f998 	bl	8001c7c <HAL_GetTick>
 800394c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800394e:	e011      	b.n	8003974 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003950:	f7fe f994 	bl	8001c7c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d90a      	bls.n	8003974 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e01c      	b.n	80039ae <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d1e6      	bne.n	8003950 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	715a      	strb	r2, [r3, #5]
 800399a:	e004      	b.n	80039a6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2204      	movs	r2, #4
 80039a0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	711a      	strb	r2, [r3, #4]

  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e01d      	b.n	8003a04 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fd ff69 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fa33 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_TIM_Base_Start_IT+0x50>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d00b      	beq.n	8003a4e <HAL_TIM_Base_Start_IT+0x42>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d007      	beq.n	8003a4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	00010007 	.word	0x00010007

08003a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d122      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d11b      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0202 	mvn.w	r2, #2
 8003a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9be 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9b0 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f9c1 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d122      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11b      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0204 	mvn.w	r2, #4
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f994 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f986 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f997 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d122      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d11b      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0208 	mvn.w	r2, #8
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f96a 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f95c 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f96d 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d122      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0210 	mvn.w	r2, #16
 8003b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f940 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f932 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f943 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0201 	mvn.w	r2, #1
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fd1a 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 faee 	bl	80041ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d10e      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b80      	cmp	r3, #128	; 0x80
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fae1 	bl	8004200 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d10e      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8f1 	bl	8003e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0220 	mvn.w	r2, #32
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 faa1 	bl	80041d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_ConfigClockSource+0x18>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0a8      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x16a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d067      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x124>
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d80b      	bhi.n	8003d0e <HAL_TIM_ConfigClockSource+0x70>
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d073      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x144>
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d802      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x66>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d06f      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d02:	e078      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d06c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x144>
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d06a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003d0c:	e073      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d0e:	2b70      	cmp	r3, #112	; 0x70
 8003d10:	d00d      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x90>
 8003d12:	2b70      	cmp	r3, #112	; 0x70
 8003d14:	d804      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x82>
 8003d16:	2b50      	cmp	r3, #80	; 0x50
 8003d18:	d033      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xe4>
 8003d1a:	2b60      	cmp	r3, #96	; 0x60
 8003d1c:	d041      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003d1e:	e06a      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d066      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x156>
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2a:	d017      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003d2c:	e063      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f000 f9a3 	bl	8004088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	609a      	str	r2, [r3, #8]
      break;
 8003d5a:	e04c      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f000 f98c 	bl	8004088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7e:	609a      	str	r2, [r3, #8]
      break;
 8003d80:	e039      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 f900 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2150      	movs	r1, #80	; 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f959 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003da0:	e029      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 f91f 	bl	8003ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2160      	movs	r1, #96	; 0x60
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f949 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e019      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 f8e0 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2140      	movs	r1, #64	; 0x40
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f939 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e009      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 f930 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a40      	ldr	r2, [pc, #256]	; (8003f74 <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a3d      	ldr	r2, [pc, #244]	; (8003f78 <TIM_Base_SetConfig+0x118>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a3c      	ldr	r2, [pc, #240]	; (8003f7c <TIM_Base_SetConfig+0x11c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3b      	ldr	r2, [pc, #236]	; (8003f80 <TIM_Base_SetConfig+0x120>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3a      	ldr	r2, [pc, #232]	; (8003f84 <TIM_Base_SetConfig+0x124>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2f      	ldr	r2, [pc, #188]	; (8003f74 <TIM_Base_SetConfig+0x114>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d01b      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <TIM_Base_SetConfig+0x118>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d017      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <TIM_Base_SetConfig+0x11c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <TIM_Base_SetConfig+0x120>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <TIM_Base_SetConfig+0x124>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a28      	ldr	r2, [pc, #160]	; (8003f88 <TIM_Base_SetConfig+0x128>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x9a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <TIM_Base_SetConfig+0x130>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <TIM_Base_SetConfig+0x114>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <TIM_Base_SetConfig+0x124>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <TIM_Base_SetConfig+0x128>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <TIM_Base_SetConfig+0x12c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0xf8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a0f      	ldr	r2, [pc, #60]	; (8003f90 <TIM_Base_SetConfig+0x130>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 030a 	bic.w	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800401c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	031b      	lsls	r3, r3, #12
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800402e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 0307 	orr.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e068      	b.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2e      	ldr	r2, [pc, #184]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800411a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01d      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d018      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10c      	bne.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40013400 	.word	0x40013400
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40014000 	.word	0x40014000

080041d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e040      	b.n	80042a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd fb60 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	; 0x24
 8004240:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8c0 	bl	80043d8 <UART_SetConfig>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e022      	b.n	80042a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fc26 	bl	8004abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800427e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800428e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fcad 	bl	8004c00 <UART_CheckIdleState>
 80042a6:	4603      	mov	r3, r0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	f040 8081 	bne.w	80043cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_UART_Transmit+0x26>
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e079      	b.n	80043ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_UART_Transmit+0x38>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e072      	b.n	80043ce <HAL_UART_Transmit+0x11e>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2221      	movs	r2, #33	; 0x21
 80042fa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042fc:	f7fd fcbe 	bl	8001c7c <HAL_GetTick>
 8004300:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	d108      	bne.n	800432e <HAL_UART_Transmit+0x7e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e003      	b.n	8004336 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800433e:	e02d      	b.n	800439c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2200      	movs	r2, #0
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fc9d 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e039      	b.n	80043ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	881a      	ldrh	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436c:	b292      	uxth	r2, r2
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	3302      	adds	r3, #2
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e008      	b.n	800438a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b292      	uxth	r2, r2
 8004382:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3301      	adds	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1cb      	bne.n	8004340 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2140      	movs	r1, #64	; 0x40
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fc69 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e005      	b.n	80043ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80043dc:	b08a      	sub	sp, #40	; 0x28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4313      	orrs	r3, r2
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4bb8      	ldr	r3, [pc, #736]	; (80046f0 <UART_SetConfig+0x318>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004416:	430b      	orrs	r3, r1
 8004418:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4aae      	ldr	r2, [pc, #696]	; (80046f4 <UART_SetConfig+0x31c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	4313      	orrs	r3, r2
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	430a      	orrs	r2, r1
 800445c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4aa5      	ldr	r2, [pc, #660]	; (80046f8 <UART_SetConfig+0x320>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d126      	bne.n	80044b6 <UART_SetConfig+0xde>
 8004468:	4ba4      	ldr	r3, [pc, #656]	; (80046fc <UART_SetConfig+0x324>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b03      	cmp	r3, #3
 8004474:	d81a      	bhi.n	80044ac <UART_SetConfig+0xd4>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0xa4>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	0800448d 	.word	0x0800448d
 8004480:	0800449d 	.word	0x0800449d
 8004484:	08004495 	.word	0x08004495
 8004488:	080044a5 	.word	0x080044a5
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e105      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004494:	2302      	movs	r3, #2
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e101      	b.n	80046a0 <UART_SetConfig+0x2c8>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e0fd      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044aa:	e0f9      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b2:	bf00      	nop
 80044b4:	e0f4      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a91      	ldr	r2, [pc, #580]	; (8004700 <UART_SetConfig+0x328>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d138      	bne.n	8004532 <UART_SetConfig+0x15a>
 80044c0:	4b8e      	ldr	r3, [pc, #568]	; (80046fc <UART_SetConfig+0x324>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d82c      	bhi.n	8004528 <UART_SetConfig+0x150>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0xfc>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004529 	.word	0x08004529
 80044dc:	08004529 	.word	0x08004529
 80044e0:	08004529 	.word	0x08004529
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004529 	.word	0x08004529
 80044ec:	08004529 	.word	0x08004529
 80044f0:	08004529 	.word	0x08004529
 80044f4:	08004511 	.word	0x08004511
 80044f8:	08004529 	.word	0x08004529
 80044fc:	08004529 	.word	0x08004529
 8004500:	08004529 	.word	0x08004529
 8004504:	08004521 	.word	0x08004521
 8004508:	2300      	movs	r3, #0
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e0c7      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004510:	2302      	movs	r3, #2
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e0c3      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004518:	2304      	movs	r3, #4
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e0bf      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004520:	2308      	movs	r3, #8
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004526:	e0bb      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004528:	2310      	movs	r3, #16
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	bf00      	nop
 8004530:	e0b6      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a73      	ldr	r2, [pc, #460]	; (8004704 <UART_SetConfig+0x32c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d125      	bne.n	8004588 <UART_SetConfig+0x1b0>
 800453c:	4b6f      	ldr	r3, [pc, #444]	; (80046fc <UART_SetConfig+0x324>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004546:	2b10      	cmp	r3, #16
 8004548:	d011      	beq.n	800456e <UART_SetConfig+0x196>
 800454a:	2b10      	cmp	r3, #16
 800454c:	d802      	bhi.n	8004554 <UART_SetConfig+0x17c>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <UART_SetConfig+0x186>
 8004552:	e014      	b.n	800457e <UART_SetConfig+0x1a6>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d006      	beq.n	8004566 <UART_SetConfig+0x18e>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d00c      	beq.n	8004576 <UART_SetConfig+0x19e>
 800455c:	e00f      	b.n	800457e <UART_SetConfig+0x1a6>
 800455e:	2300      	movs	r3, #0
 8004560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004564:	e09c      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004566:	2302      	movs	r3, #2
 8004568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456c:	e098      	b.n	80046a0 <UART_SetConfig+0x2c8>
 800456e:	2304      	movs	r3, #4
 8004570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004574:	e094      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004576:	2308      	movs	r3, #8
 8004578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457c:	e090      	b.n	80046a0 <UART_SetConfig+0x2c8>
 800457e:	2310      	movs	r3, #16
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004584:	bf00      	nop
 8004586:	e08b      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a5e      	ldr	r2, [pc, #376]	; (8004708 <UART_SetConfig+0x330>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d125      	bne.n	80045de <UART_SetConfig+0x206>
 8004592:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <UART_SetConfig+0x324>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d011      	beq.n	80045c4 <UART_SetConfig+0x1ec>
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d802      	bhi.n	80045aa <UART_SetConfig+0x1d2>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <UART_SetConfig+0x1dc>
 80045a8:	e014      	b.n	80045d4 <UART_SetConfig+0x1fc>
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d006      	beq.n	80045bc <UART_SetConfig+0x1e4>
 80045ae:	2bc0      	cmp	r3, #192	; 0xc0
 80045b0:	d00c      	beq.n	80045cc <UART_SetConfig+0x1f4>
 80045b2:	e00f      	b.n	80045d4 <UART_SetConfig+0x1fc>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ba:	e071      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c2:	e06d      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ca:	e069      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d2:	e065      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045da:	bf00      	nop
 80045dc:	e060      	b.n	80046a0 <UART_SetConfig+0x2c8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4a      	ldr	r2, [pc, #296]	; (800470c <UART_SetConfig+0x334>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d129      	bne.n	800463c <UART_SetConfig+0x264>
 80045e8:	4b44      	ldr	r3, [pc, #272]	; (80046fc <UART_SetConfig+0x324>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f6:	d014      	beq.n	8004622 <UART_SetConfig+0x24a>
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fc:	d802      	bhi.n	8004604 <UART_SetConfig+0x22c>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <UART_SetConfig+0x23a>
 8004602:	e016      	b.n	8004632 <UART_SetConfig+0x25a>
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d007      	beq.n	800461a <UART_SetConfig+0x242>
 800460a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460e:	d00c      	beq.n	800462a <UART_SetConfig+0x252>
 8004610:	e00f      	b.n	8004632 <UART_SetConfig+0x25a>
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004618:	e042      	b.n	80046a0 <UART_SetConfig+0x2c8>
 800461a:	2302      	movs	r3, #2
 800461c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004620:	e03e      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004622:	2304      	movs	r3, #4
 8004624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004628:	e03a      	b.n	80046a0 <UART_SetConfig+0x2c8>
 800462a:	2308      	movs	r3, #8
 800462c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004630:	e036      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004632:	2310      	movs	r3, #16
 8004634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004638:	bf00      	nop
 800463a:	e031      	b.n	80046a0 <UART_SetConfig+0x2c8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2c      	ldr	r2, [pc, #176]	; (80046f4 <UART_SetConfig+0x31c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d129      	bne.n	800469a <UART_SetConfig+0x2c2>
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <UART_SetConfig+0x324>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004654:	d014      	beq.n	8004680 <UART_SetConfig+0x2a8>
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465a:	d802      	bhi.n	8004662 <UART_SetConfig+0x28a>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <UART_SetConfig+0x298>
 8004660:	e016      	b.n	8004690 <UART_SetConfig+0x2b8>
 8004662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004666:	d007      	beq.n	8004678 <UART_SetConfig+0x2a0>
 8004668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800466c:	d00c      	beq.n	8004688 <UART_SetConfig+0x2b0>
 800466e:	e00f      	b.n	8004690 <UART_SetConfig+0x2b8>
 8004670:	2300      	movs	r3, #0
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e013      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004678:	2302      	movs	r3, #2
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e00f      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e00b      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e007      	b.n	80046a0 <UART_SetConfig+0x2c8>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <UART_SetConfig+0x2c8>
 800469a:	2310      	movs	r3, #16
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <UART_SetConfig+0x31c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	f040 80fe 	bne.w	80048a8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d837      	bhi.n	8004724 <UART_SetConfig+0x34c>
 80046b4:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <UART_SetConfig+0x2e4>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	08004725 	.word	0x08004725
 80046c4:	080046e9 	.word	0x080046e9
 80046c8:	08004725 	.word	0x08004725
 80046cc:	08004715 	.word	0x08004715
 80046d0:	08004725 	.word	0x08004725
 80046d4:	08004725 	.word	0x08004725
 80046d8:	08004725 	.word	0x08004725
 80046dc:	0800471d 	.word	0x0800471d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80046e0:	f7fe fb4c 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80046e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046e6:	e020      	b.n	800472a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <UART_SetConfig+0x338>)
 80046ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046ec:	e01d      	b.n	800472a <UART_SetConfig+0x352>
 80046ee:	bf00      	nop
 80046f0:	efff69f3 	.word	0xefff69f3
 80046f4:	40008000 	.word	0x40008000
 80046f8:	40013800 	.word	0x40013800
 80046fc:	40021000 	.word	0x40021000
 8004700:	40004400 	.word	0x40004400
 8004704:	40004800 	.word	0x40004800
 8004708:	40004c00 	.word	0x40004c00
 800470c:	40005000 	.word	0x40005000
 8004710:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004714:	f7fe fa9c 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004718:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800471a:	e006      	b.n	800472a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800471c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004720:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004722:	e002      	b.n	800472a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	76fb      	strb	r3, [r7, #27]
        break;
 8004728:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 81b9 	beq.w	8004aa4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d305      	bcc.n	800474e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	429a      	cmp	r2, r3
 800474c:	d902      	bls.n	8004754 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	76fb      	strb	r3, [r7, #27]
 8004752:	e1a7      	b.n	8004aa4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004758:	2b08      	cmp	r3, #8
 800475a:	f200 8092 	bhi.w	8004882 <UART_SetConfig+0x4aa>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <UART_SetConfig+0x38c>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004789 	.word	0x08004789
 8004768:	08004883 	.word	0x08004883
 800476c:	080047d7 	.word	0x080047d7
 8004770:	08004883 	.word	0x08004883
 8004774:	0800480b 	.word	0x0800480b
 8004778:	08004883 	.word	0x08004883
 800477c:	08004883 	.word	0x08004883
 8004780:	08004883 	.word	0x08004883
 8004784:	08004859 	.word	0x08004859
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004788:	f7fe faf8 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 800478c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4619      	mov	r1, r3
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	f04f 0400 	mov.w	r4, #0
 800479e:	0214      	lsls	r4, r2, #8
 80047a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047a4:	020b      	lsls	r3, r1, #8
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6852      	ldr	r2, [r2, #4]
 80047aa:	0852      	lsrs	r2, r2, #1
 80047ac:	4611      	mov	r1, r2
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	eb13 0b01 	adds.w	fp, r3, r1
 80047b6:	eb44 0c02 	adc.w	ip, r4, r2
 80047ba:	4658      	mov	r0, fp
 80047bc:	4661      	mov	r1, ip
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f04f 0400 	mov.w	r4, #0
 80047c6:	461a      	mov	r2, r3
 80047c8:	4623      	mov	r3, r4
 80047ca:	f7fb fd59 	bl	8000280 <__aeabi_uldivmod>
 80047ce:	4603      	mov	r3, r0
 80047d0:	460c      	mov	r4, r1
 80047d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80047d4:	e058      	b.n	8004888 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	f04f 0400 	mov.w	r4, #0
 80047e0:	49ae      	ldr	r1, [pc, #696]	; (8004a9c <UART_SetConfig+0x6c4>)
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	eb13 0b01 	adds.w	fp, r3, r1
 80047ea:	eb44 0c02 	adc.w	ip, r4, r2
 80047ee:	4658      	mov	r0, fp
 80047f0:	4661      	mov	r1, ip
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	461a      	mov	r2, r3
 80047fc:	4623      	mov	r3, r4
 80047fe:	f7fb fd3f 	bl	8000280 <__aeabi_uldivmod>
 8004802:	4603      	mov	r3, r0
 8004804:	460c      	mov	r4, r1
 8004806:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004808:	e03e      	b.n	8004888 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe fa21 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800480e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4619      	mov	r1, r3
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	f04f 0400 	mov.w	r4, #0
 8004820:	0214      	lsls	r4, r2, #8
 8004822:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004826:	020b      	lsls	r3, r1, #8
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6852      	ldr	r2, [r2, #4]
 800482c:	0852      	lsrs	r2, r2, #1
 800482e:	4611      	mov	r1, r2
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	eb13 0b01 	adds.w	fp, r3, r1
 8004838:	eb44 0c02 	adc.w	ip, r4, r2
 800483c:	4658      	mov	r0, fp
 800483e:	4661      	mov	r1, ip
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	461a      	mov	r2, r3
 800484a:	4623      	mov	r3, r4
 800484c:	f7fb fd18 	bl	8000280 <__aeabi_uldivmod>
 8004850:	4603      	mov	r3, r0
 8004852:	460c      	mov	r4, r1
 8004854:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004856:	e017      	b.n	8004888 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	f04f 0400 	mov.w	r4, #0
 8004862:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004866:	f144 0100 	adc.w	r1, r4, #0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f04f 0400 	mov.w	r4, #0
 8004872:	461a      	mov	r2, r3
 8004874:	4623      	mov	r3, r4
 8004876:	f7fb fd03 	bl	8000280 <__aeabi_uldivmod>
 800487a:	4603      	mov	r3, r0
 800487c:	460c      	mov	r4, r1
 800487e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004880:	e002      	b.n	8004888 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	76fb      	strb	r3, [r7, #27]
            break;
 8004886:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800488e:	d308      	bcc.n	80048a2 <UART_SetConfig+0x4ca>
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004896:	d204      	bcs.n	80048a2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	60da      	str	r2, [r3, #12]
 80048a0:	e100      	b.n	8004aa4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	76fb      	strb	r3, [r7, #27]
 80048a6:	e0fd      	b.n	8004aa4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b0:	f040 8084 	bne.w	80049bc <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80048b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d85f      	bhi.n	800497c <UART_SetConfig+0x5a4>
 80048bc:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0x4ec>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	08004909 	.word	0x08004909
 80048cc:	08004929 	.word	0x08004929
 80048d0:	0800497d 	.word	0x0800497d
 80048d4:	08004945 	.word	0x08004945
 80048d8:	0800497d 	.word	0x0800497d
 80048dc:	0800497d 	.word	0x0800497d
 80048e0:	0800497d 	.word	0x0800497d
 80048e4:	08004965 	.word	0x08004965
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e8:	f7fe fa48 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80048ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	005a      	lsls	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	441a      	add	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004906:	e03c      	b.n	8004982 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fa4e 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 800490c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	005a      	lsls	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	441a      	add	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	b29b      	uxth	r3, r3
 8004924:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004926:	e02c      	b.n	8004982 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004932:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6852      	ldr	r2, [r2, #4]
 800493a:	fbb3 f3f2 	udiv	r3, r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004942:	e01e      	b.n	8004982 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004944:	f7fe f984 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004948:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	005a      	lsls	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	b29b      	uxth	r3, r3
 8004960:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004962:	e00e      	b.n	8004982 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800497a:	e002      	b.n	8004982 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	76fb      	strb	r3, [r7, #27]
        break;
 8004980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b0f      	cmp	r3, #15
 8004986:	d916      	bls.n	80049b6 <UART_SetConfig+0x5de>
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498e:	d212      	bcs.n	80049b6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f023 030f 	bic.w	r3, r3, #15
 8004998:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	89fb      	ldrh	r3, [r7, #14]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	89fa      	ldrh	r2, [r7, #14]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	e076      	b.n	8004aa4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	76fb      	strb	r3, [r7, #27]
 80049ba:	e073      	b.n	8004aa4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80049bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d85c      	bhi.n	8004a7e <UART_SetConfig+0x6a6>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x5f4>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a7f 	.word	0x08004a7f
 80049dc:	08004a49 	.word	0x08004a49
 80049e0:	08004a7f 	.word	0x08004a7f
 80049e4:	08004a7f 	.word	0x08004a7f
 80049e8:	08004a7f 	.word	0x08004a7f
 80049ec:	08004a67 	.word	0x08004a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fe f9c4 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 80049f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	085a      	lsrs	r2, r3, #1
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	441a      	add	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a0c:	e03a      	b.n	8004a84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a0e:	f7fe f9cb 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8004a12:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	085a      	lsrs	r2, r3, #1
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a2a:	e02b      	b.n	8004a84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004a36:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6852      	ldr	r2, [r2, #4]
 8004a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a46:	e01d      	b.n	8004a84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a48:	f7fe f902 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8004a4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	085a      	lsrs	r2, r3, #1
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	441a      	add	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a64:	e00e      	b.n	8004a84 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a7c:	e002      	b.n	8004a84 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	76fb      	strb	r3, [r7, #27]
        break;
 8004a82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d90a      	bls.n	8004aa0 <UART_SetConfig+0x6c8>
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d206      	bcs.n	8004aa0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	e003      	b.n	8004aa4 <UART_SetConfig+0x6cc>
 8004a9c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004ab0:	7efb      	ldrb	r3, [r7, #27]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bba:	d10a      	bne.n	8004bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c0e:	f7fd f835 	bl	8001c7c <HAL_GetTick>
 8004c12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d10e      	bne.n	8004c40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f82a 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e020      	b.n	8004c82 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d10e      	bne.n	8004c6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f814 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e00a      	b.n	8004c82 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	e05d      	b.n	8004d58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d059      	beq.n	8004d58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca4:	f7fc ffea 	bl	8001c7c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d302      	bcc.n	8004cba <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d11b      	bne.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e042      	b.n	8004d78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02b      	beq.n	8004d58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0e:	d123      	bne.n	8004d58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d18:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e00f      	b.n	8004d78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69da      	ldr	r2, [r3, #28]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4013      	ands	r3, r2
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d092      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d96:	f3ef 8305 	mrs	r3, IPSR
 8004d9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10f      	bne.n	8004dc2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
 8004da6:	607b      	str	r3, [r7, #4]
  return(result);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dae:	f3ef 8311 	mrs	r3, BASEPRI
 8004db2:	603b      	str	r3, [r7, #0]
  return(result);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <osKernelInitialize+0x3a>
 8004dba:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <osKernelInitialize+0x64>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d103      	bne.n	8004dca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004dc2:	f06f 0305 	mvn.w	r3, #5
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e00c      	b.n	8004de4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <osKernelInitialize+0x64>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <osKernelInitialize+0x64>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e002      	b.n	8004de4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004de4:	68fb      	ldr	r3, [r7, #12]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000144 	.word	0x20000144

08004df8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dfe:	f3ef 8305 	mrs	r3, IPSR
 8004e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0e:	607b      	str	r3, [r7, #4]
  return(result);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d105      	bne.n	8004e22 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e16:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <osKernelStart+0x3a>
 8004e22:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <osKernelStart+0x68>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d103      	bne.n	8004e32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e2a:	f06f 0305 	mvn.w	r3, #5
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e010      	b.n	8004e54 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <osKernelStart+0x68>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d109      	bne.n	8004e4e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e3a:	f7ff ffa1 	bl	8004d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <osKernelStart+0x68>)
 8004e40:	2202      	movs	r2, #2
 8004e42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e44:	f001 fcea 	bl	800681c <vTaskStartScheduler>
      stat = osOK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e002      	b.n	8004e54 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e54:	68fb      	ldr	r3, [r7, #12]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000144 	.word	0x20000144

08004e64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b090      	sub	sp, #64	; 0x40
 8004e68:	af04      	add	r7, sp, #16
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e74:	f3ef 8305 	mrs	r3, IPSR
 8004e78:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e7a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 808f 	bne.w	8004fa0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e82:	f3ef 8310 	mrs	r3, PRIMASK
 8004e86:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e92:	617b      	str	r3, [r7, #20]
  return(result);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <osThreadNew+0x3e>
 8004e9a:	4b44      	ldr	r3, [pc, #272]	; (8004fac <osThreadNew+0x148>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d07e      	beq.n	8004fa0 <osThreadNew+0x13c>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d07b      	beq.n	8004fa0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004eac:	2318      	movs	r3, #24
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d045      	beq.n	8004f4c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <osThreadNew+0x6a>
        name = attr->name;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <osThreadNew+0x90>
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	2b38      	cmp	r3, #56	; 0x38
 8004ee6:	d805      	bhi.n	8004ef4 <osThreadNew+0x90>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <osThreadNew+0x94>
        return (NULL);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e054      	b.n	8004fa2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00e      	beq.n	8004f2e <osThreadNew+0xca>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b5b      	cmp	r3, #91	; 0x5b
 8004f16:	d90a      	bls.n	8004f2e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d006      	beq.n	8004f2e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <osThreadNew+0xca>
        mem = 1;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	623b      	str	r3, [r7, #32]
 8004f2c:	e010      	b.n	8004f50 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10c      	bne.n	8004f50 <osThreadNew+0xec>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <osThreadNew+0xec>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d104      	bne.n	8004f50 <osThreadNew+0xec>
          mem = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	e001      	b.n	8004f50 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d110      	bne.n	8004f78 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f5e:	9202      	str	r2, [sp, #8]
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f001 fa7f 	bl	8006470 <xTaskCreateStatic>
 8004f72:	4603      	mov	r3, r0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e013      	b.n	8004fa0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d110      	bne.n	8004fa0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f001 fac7 	bl	8006524 <xTaskCreate>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <osThreadNew+0x13c>
          hTask = NULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fa0:	693b      	ldr	r3, [r7, #16]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3730      	adds	r7, #48	; 0x30
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000144 	.word	0x20000144

08004fb0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb8:	f3ef 8305 	mrs	r3, IPSR
 8004fbc:	613b      	str	r3, [r7, #16]
  return(result);
 8004fbe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <osDelay+0x3c>
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <osDelay+0x58>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d103      	bne.n	8004fec <osDelay+0x3c>
    stat = osErrorISR;
 8004fe4:	f06f 0305 	mvn.w	r3, #5
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e007      	b.n	8004ffc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <osDelay+0x4c>
      vTaskDelay(ticks);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fbdc 	bl	80067b4 <vTaskDelay>
    }
  }

  return (stat);
 8004ffc:	697b      	ldr	r3, [r7, #20]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000144 	.word	0x20000144

0800500c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08c      	sub	sp, #48	; 0x30
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501c:	f3ef 8305 	mrs	r3, IPSR
 8005020:	61bb      	str	r3, [r7, #24]
  return(result);
 8005022:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 8087 	bne.w	8005138 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502a:	f3ef 8310 	mrs	r3, PRIMASK
 800502e:	617b      	str	r3, [r7, #20]
  return(result);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d105      	bne.n	8005042 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005036:	f3ef 8311 	mrs	r3, BASEPRI
 800503a:	613b      	str	r3, [r7, #16]
  return(result);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <osSemaphoreNew+0x3e>
 8005042:	4b40      	ldr	r3, [pc, #256]	; (8005144 <osSemaphoreNew+0x138>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d076      	beq.n	8005138 <osSemaphoreNew+0x12c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d073      	beq.n	8005138 <osSemaphoreNew+0x12c>
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	429a      	cmp	r2, r3
 8005056:	d86f      	bhi.n	8005138 <osSemaphoreNew+0x12c>
    mem = -1;
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d015      	beq.n	8005090 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <osSemaphoreNew+0x6e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b4f      	cmp	r3, #79	; 0x4f
 8005072:	d902      	bls.n	800507a <osSemaphoreNew+0x6e>
        mem = 1;
 8005074:	2301      	movs	r3, #1
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	e00c      	b.n	8005094 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d108      	bne.n	8005094 <osSemaphoreNew+0x88>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <osSemaphoreNew+0x88>
          mem = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	e001      	b.n	8005094 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d04d      	beq.n	8005138 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d129      	bne.n	80050f6 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10b      	bne.n	80050c0 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	2303      	movs	r3, #3
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	2001      	movs	r0, #1
 80050b8:	f000 fa54 	bl	8005564 <xQueueGenericCreateStatic>
 80050bc:	6278      	str	r0, [r7, #36]	; 0x24
 80050be:	e005      	b.n	80050cc <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80050c0:	2203      	movs	r2, #3
 80050c2:	2100      	movs	r1, #0
 80050c4:	2001      	movs	r0, #1
 80050c6:	f000 fac0 	bl	800564a <xQueueGenericCreate>
 80050ca:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d022      	beq.n	8005118 <osSemaphoreNew+0x10c>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01f      	beq.n	8005118 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80050d8:	2300      	movs	r3, #0
 80050da:	2200      	movs	r2, #0
 80050dc:	2100      	movs	r1, #0
 80050de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e0:	f000 fb7c 	bl	80057dc <xQueueGenericSend>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d016      	beq.n	8005118 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80050ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ec:	f000 ffef 	bl	80060ce <vQueueDelete>
            hSemaphore = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	e010      	b.n	8005118 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d108      	bne.n	800510e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	461a      	mov	r2, r3
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fb02 	bl	800570e <xQueueCreateCountingSemaphoreStatic>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24
 800510c:	e004      	b.n	8005118 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fb31 	bl	8005778 <xQueueCreateCountingSemaphore>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <osSemaphoreNew+0x120>
          name = attr->name;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	e001      	b.n	8005130 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005130:	69f9      	ldr	r1, [r7, #28]
 8005132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005134:	f001 f916 	bl	8006364 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800513a:	4618      	mov	r0, r3
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000144 	.word	0x20000144

08005148 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005160:	f06f 0303 	mvn.w	r3, #3
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	e04b      	b.n	8005200 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005168:	f3ef 8305 	mrs	r3, IPSR
 800516c:	617b      	str	r3, [r7, #20]
  return(result);
 800516e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10f      	bne.n	8005194 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005174:	f3ef 8310 	mrs	r3, PRIMASK
 8005178:	613b      	str	r3, [r7, #16]
  return(result);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005180:	f3ef 8311 	mrs	r3, BASEPRI
 8005184:	60fb      	str	r3, [r7, #12]
  return(result);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d026      	beq.n	80051da <osSemaphoreAcquire+0x92>
 800518c:	4b1f      	ldr	r3, [pc, #124]	; (800520c <osSemaphoreAcquire+0xc4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d122      	bne.n	80051da <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800519a:	f06f 0303 	mvn.w	r3, #3
 800519e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80051a0:	e02d      	b.n	80051fe <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	461a      	mov	r2, r3
 80051ac:	2100      	movs	r1, #0
 80051ae:	69b8      	ldr	r0, [r7, #24]
 80051b0:	f000 ff10 	bl	8005fd4 <xQueueReceiveFromISR>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d003      	beq.n	80051c2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80051ba:	f06f 0302 	mvn.w	r3, #2
 80051be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80051c0:	e01d      	b.n	80051fe <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <osSemaphoreAcquire+0xb6>
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <osSemaphoreAcquire+0xc8>)
 80051ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80051d8:	e011      	b.n	80051fe <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	69b8      	ldr	r0, [r7, #24]
 80051de:	f000 fdf1 	bl	8005dc4 <xQueueSemaphoreTake>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d00b      	beq.n	8005200 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80051ee:	f06f 0301 	mvn.w	r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e004      	b.n	8005200 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80051f6:	f06f 0302 	mvn.w	r3, #2
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	e000      	b.n	8005200 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80051fe:	bf00      	nop
      }
    }
  }

  return (stat);
 8005200:	69fb      	ldr	r3, [r7, #28]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000144 	.word	0x20000144
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800522a:	f06f 0303 	mvn.w	r3, #3
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e03e      	b.n	80052b0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005232:	f3ef 8305 	mrs	r3, IPSR
 8005236:	617b      	str	r3, [r7, #20]
  return(result);
 8005238:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10f      	bne.n	800525e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523e:	f3ef 8310 	mrs	r3, PRIMASK
 8005242:	613b      	str	r3, [r7, #16]
  return(result);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800524a:	f3ef 8311 	mrs	r3, BASEPRI
 800524e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01e      	beq.n	8005294 <osSemaphoreRelease+0x80>
 8005256:	4b19      	ldr	r3, [pc, #100]	; (80052bc <osSemaphoreRelease+0xa8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d11a      	bne.n	8005294 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005262:	f107 0308 	add.w	r3, r7, #8
 8005266:	4619      	mov	r1, r3
 8005268:	69b8      	ldr	r0, [r7, #24]
 800526a:	f000 fc45 	bl	8005af8 <xQueueGiveFromISR>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d003      	beq.n	800527c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005274:	f06f 0302 	mvn.w	r3, #2
 8005278:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800527a:	e018      	b.n	80052ae <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d015      	beq.n	80052ae <osSemaphoreRelease+0x9a>
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <osSemaphoreRelease+0xac>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005292:	e00c      	b.n	80052ae <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005294:	2300      	movs	r3, #0
 8005296:	2200      	movs	r2, #0
 8005298:	2100      	movs	r1, #0
 800529a:	69b8      	ldr	r0, [r7, #24]
 800529c:	f000 fa9e 	bl	80057dc <xQueueGenericSend>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d004      	beq.n	80052b0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80052a6:	f06f 0302 	mvn.w	r3, #2
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	e000      	b.n	80052b0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052ae:	bf00      	nop
    }
  }

  return (stat);
 80052b0:	69fb      	ldr	r3, [r7, #28]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000144 	.word	0x20000144
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a07      	ldr	r2, [pc, #28]	; (80052f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80052d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <vApplicationGetIdleTaskMemory+0x30>)
 80052da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000148 	.word	0x20000148
 80052f4:	200001a4 	.word	0x200001a4

080052f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a07      	ldr	r2, [pc, #28]	; (8005324 <vApplicationGetTimerTaskMemory+0x2c>)
 8005308:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a06      	ldr	r2, [pc, #24]	; (8005328 <vApplicationGetTimerTaskMemory+0x30>)
 800530e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005316:	601a      	str	r2, [r3, #0]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	200003a4 	.word	0x200003a4
 8005328:	20000400 	.word	0x20000400

0800532c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f103 0208 	add.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f103 0208 	add.w	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f103 0208 	add.w	r2, r3, #8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d103      	bne.n	80053ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e00c      	b.n	8005408 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3308      	adds	r3, #8
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <vListInsert+0x2e>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	d2f6      	bcs.n	80053f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6852      	ldr	r2, [r2, #4]
 8005460:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d103      	bne.n	8005474 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	1e5a      	subs	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	e7fe      	b.n	80054ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80054bc:	f002 fc3e 	bl	8007d3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	3b01      	subs	r3, #1
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	441a      	add	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	22ff      	movs	r2, #255	; 0xff
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	22ff      	movs	r2, #255	; 0xff
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d114      	bne.n	800553c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01a      	beq.n	8005550 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3310      	adds	r3, #16
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fbfc 	bl	8006d1c <xTaskRemoveFromEventList>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d012      	beq.n	8005550 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800552a:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <xQueueGenericReset+0xcc>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	e009      	b.n	8005550 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3310      	adds	r3, #16
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fef3 	bl	800532c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3324      	adds	r3, #36	; 0x24
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff feee 	bl	800532c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005550:	f002 fc22 	bl	8007d98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005554:	2301      	movs	r3, #1
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	; 0x38
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <xQueueGenericCreateStatic+0x28>
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
 800558a:	e7fe      	b.n	800558a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <xQueueGenericCreateStatic+0x42>
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	e7fe      	b.n	80055a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <xQueueGenericCreateStatic+0x4e>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <xQueueGenericCreateStatic+0x52>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <xQueueGenericCreateStatic+0x54>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <xQueueGenericCreateStatic+0x6c>
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	e7fe      	b.n	80055ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <xQueueGenericCreateStatic+0x78>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <xQueueGenericCreateStatic+0x7c>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <xQueueGenericCreateStatic+0x7e>
 80055e0:	2300      	movs	r3, #0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <xQueueGenericCreateStatic+0x96>
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	e7fe      	b.n	80055f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055fa:	2350      	movs	r3, #80	; 0x50
 80055fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b50      	cmp	r3, #80	; 0x50
 8005602:	d009      	beq.n	8005618 <xQueueGenericCreateStatic+0xb4>
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e7fe      	b.n	8005616 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005618:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800562c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f844 	bl	80056c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005642:	4618      	mov	r0, r3
 8005644:	3730      	adds	r7, #48	; 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800564a:	b580      	push	{r7, lr}
 800564c:	b08a      	sub	sp, #40	; 0x28
 800564e:	af02      	add	r7, sp, #8
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	4613      	mov	r3, r2
 8005656:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <xQueueGenericCreate+0x28>
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e7fe      	b.n	8005670 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	e004      	b.n	8005688 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3350      	adds	r3, #80	; 0x50
 800568c:	4618      	mov	r0, r3
 800568e:	f002 fc6f 	bl	8007f70 <pvPortMalloc>
 8005692:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d011      	beq.n	80056be <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3350      	adds	r3, #80	; 0x50
 80056a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056ac:	79fa      	ldrb	r2, [r7, #7]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f805 	bl	80056c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056be:	69bb      	ldr	r3, [r7, #24]
	}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e002      	b.n	80056ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056f6:	2101      	movs	r1, #1
 80056f8:	69b8      	ldr	r0, [r7, #24]
 80056fa:	f7ff fecb 	bl	8005494 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800570e:	b580      	push	{r7, lr}
 8005710:	b08a      	sub	sp, #40	; 0x28
 8005712:	af02      	add	r7, sp, #8
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xQueueCreateCountingSemaphoreStatic+0x26>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e7fe      	b.n	8005732 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d909      	bls.n	8005750 <xQueueCreateCountingSemaphoreStatic+0x42>
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e7fe      	b.n	800574e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005750:	2302      	movs	r3, #2
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	2100      	movs	r1, #0
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff ff02 	bl	8005564 <xQueueGenericCreateStatic>
 8005760:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800576e:	69fb      	ldr	r3, [r7, #28]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <xQueueCreateCountingSemaphore+0x24>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e7fe      	b.n	800579a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d909      	bls.n	80057b8 <xQueueCreateCountingSemaphore+0x40>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e7fe      	b.n	80057b6 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057b8:	2202      	movs	r2, #2
 80057ba:	2100      	movs	r1, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ff44 	bl	800564a <xQueueGenericCreate>
 80057c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057d0:	697b      	ldr	r3, [r7, #20]
	}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08e      	sub	sp, #56	; 0x38
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <xQueueGenericSend+0x30>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
 800580a:	e7fe      	b.n	800580a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <xQueueGenericSend+0x3e>
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <xQueueGenericSend+0x42>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericSend+0x44>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <xQueueGenericSend+0x5c>
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	e7fe      	b.n	8005836 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d103      	bne.n	8005846 <xQueueGenericSend+0x6a>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <xQueueGenericSend+0x6e>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <xQueueGenericSend+0x70>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <xQueueGenericSend+0x88>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	623b      	str	r3, [r7, #32]
 8005862:	e7fe      	b.n	8005862 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005864:	f001 fc20 	bl	80070a8 <xTaskGetSchedulerState>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <xQueueGenericSend+0x98>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <xQueueGenericSend+0x9c>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <xQueueGenericSend+0x9e>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <xQueueGenericSend+0xb6>
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e7fe      	b.n	8005890 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005892:	f002 fa53 	bl	8007d3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <xQueueGenericSend+0xcc>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d129      	bne.n	80058fc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ae:	f000 fc48 	bl	8006142 <prvCopyDataToQueue>
 80058b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d010      	beq.n	80058de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	3324      	adds	r3, #36	; 0x24
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 fa2b 	bl	8006d1c <xTaskRemoveFromEventList>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d013      	beq.n	80058f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058cc:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <xQueueGenericSend+0x1f0>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	e00a      	b.n	80058f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058e4:	4b39      	ldr	r3, [pc, #228]	; (80059cc <xQueueGenericSend+0x1f0>)
 80058e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058f4:	f002 fa50 	bl	8007d98 <vPortExitCritical>
				return pdPASS;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e063      	b.n	80059c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005902:	f002 fa49 	bl	8007d98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005906:	2300      	movs	r3, #0
 8005908:	e05c      	b.n	80059c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fa63 	bl	8006de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800591a:	2301      	movs	r3, #1
 800591c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800591e:	f002 fa3b 	bl	8007d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005922:	f000 ffdf 	bl	80068e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005926:	f002 fa09 	bl	8007d3c <vPortEnterCritical>
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005930:	b25b      	sxtb	r3, r3
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d103      	bne.n	8005940 <xQueueGenericSend+0x164>
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005946:	b25b      	sxtb	r3, r3
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d103      	bne.n	8005956 <xQueueGenericSend+0x17a>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005956:	f002 fa1f 	bl	8007d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800595a:	1d3a      	adds	r2, r7, #4
 800595c:	f107 0314 	add.w	r3, r7, #20
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f001 fa52 	bl	8006e0c <xTaskCheckForTimeOut>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d124      	bne.n	80059b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800596e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005970:	f000 fcdf 	bl	8006332 <prvIsQueueFull>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	3310      	adds	r3, #16
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4611      	mov	r1, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f001 f97c 	bl	8006c80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800598a:	f000 fc6a 	bl	8006262 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800598e:	f000 ffb7 	bl	8006900 <xTaskResumeAll>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	f47f af7c 	bne.w	8005892 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <xQueueGenericSend+0x1f0>)
 800599c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	e772      	b.n	8005892 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ae:	f000 fc58 	bl	8006262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059b2:	f000 ffa5 	bl	8006900 <xTaskResumeAll>
 80059b6:	e76c      	b.n	8005892 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ba:	f000 fc52 	bl	8006262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059be:	f000 ff9f 	bl	8006900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3738      	adds	r7, #56	; 0x38
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08e      	sub	sp, #56	; 0x38
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <xQueueGenericSendFromISR+0x2c>
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
 80059fa:	e7fe      	b.n	80059fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <xQueueGenericSendFromISR+0x3a>
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <xQueueGenericSendFromISR+0x3e>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <xQueueGenericSendFromISR+0x40>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <xQueueGenericSendFromISR+0x58>
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	623b      	str	r3, [r7, #32]
 8005a26:	e7fe      	b.n	8005a26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d103      	bne.n	8005a36 <xQueueGenericSendFromISR+0x66>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <xQueueGenericSendFromISR+0x6a>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xQueueGenericSendFromISR+0x6c>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <xQueueGenericSendFromISR+0x84>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	e7fe      	b.n	8005a52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a54:	f002 fa4e 	bl	8007ef4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a58:	f3ef 8211 	mrs	r2, BASEPRI
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	61ba      	str	r2, [r7, #24]
 8005a6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <xQueueGenericSendFromISR+0xb6>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d12c      	bne.n	8005ae0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a96:	f000 fb54 	bl	8006142 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d112      	bne.n	8005aca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d016      	beq.n	8005ada <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	3324      	adds	r3, #36	; 0x24
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f933 	bl	8006d1c <xTaskRemoveFromEventList>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00e      	beq.n	8005ada <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e007      	b.n	8005ada <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ace:	3301      	adds	r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	b25a      	sxtb	r2, r3
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ada:	2301      	movs	r3, #1
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ade:	e001      	b.n	8005ae4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3738      	adds	r7, #56	; 0x38
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	; 0x38
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	e7fe      	b.n	8005b1e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <xQueueGiveFromISR+0x44>
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e7fe      	b.n	8005b3a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <xQueueGiveFromISR+0x54>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <xQueueGiveFromISR+0x58>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <xQueueGiveFromISR+0x5a>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <xQueueGiveFromISR+0x72>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	e7fe      	b.n	8005b68 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b6a:	f002 f9c3 	bl	8007ef4 <vPortValidateInterruptPriority>
	__asm volatile
 8005b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	617a      	str	r2, [r7, #20]
 8005b84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005b86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d22b      	bcs.n	8005bf2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d112      	bne.n	8005bdc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d016      	beq.n	8005bec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	3324      	adds	r3, #36	; 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 f8aa 	bl	8006d1c <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e007      	b.n	8005bec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005be0:	3301      	adds	r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	b25a      	sxtb	r2, r3
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bec:	2301      	movs	r3, #1
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf0:	e001      	b.n	8005bf6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3738      	adds	r7, #56	; 0x38
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08c      	sub	sp, #48	; 0x30
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <xQueueReceive+0x2e>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	623b      	str	r3, [r7, #32]
 8005c38:	e7fe      	b.n	8005c38 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <xQueueReceive+0x3c>
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <xQueueReceive+0x40>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <xQueueReceive+0x42>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <xQueueReceive+0x5a>
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e7fe      	b.n	8005c64 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c66:	f001 fa1f 	bl	80070a8 <xTaskGetSchedulerState>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <xQueueReceive+0x6a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <xQueueReceive+0x6e>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <xQueueReceive+0x70>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <xQueueReceive+0x88>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e7fe      	b.n	8005c92 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c94:	f002 f852 	bl	8007d3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01f      	beq.n	8005ce4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca8:	f000 fab5 	bl	8006216 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00f      	beq.n	8005cdc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 f82b 	bl	8006d1c <xTaskRemoveFromEventList>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ccc:	4b3c      	ldr	r3, [pc, #240]	; (8005dc0 <xQueueReceive+0x1b4>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cdc:	f002 f85c 	bl	8007d98 <vPortExitCritical>
				return pdPASS;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e069      	b.n	8005db8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d103      	bne.n	8005cf2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cea:	f002 f855 	bl	8007d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e062      	b.n	8005db8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cf8:	f107 0310 	add.w	r3, r7, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 f86f 	bl	8006de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d06:	f002 f847 	bl	8007d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d0a:	f000 fdeb 	bl	80068e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d0e:	f002 f815 	bl	8007d3c <vPortEnterCritical>
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d18:	b25b      	sxtb	r3, r3
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d103      	bne.n	8005d28 <xQueueReceive+0x11c>
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d103      	bne.n	8005d3e <xQueueReceive+0x132>
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3e:	f002 f82b 	bl	8007d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d42:	1d3a      	adds	r2, r7, #4
 8005d44:	f107 0310 	add.w	r3, r7, #16
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 f85e 	bl	8006e0c <xTaskCheckForTimeOut>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d123      	bne.n	8005d9e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d58:	f000 fad5 	bl	8006306 <prvIsQueueEmpty>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d017      	beq.n	8005d92 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	3324      	adds	r3, #36	; 0x24
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 ff88 	bl	8006c80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d72:	f000 fa76 	bl	8006262 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d76:	f000 fdc3 	bl	8006900 <xTaskResumeAll>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d189      	bne.n	8005c94 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <xQueueReceive+0x1b4>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	e780      	b.n	8005c94 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d94:	f000 fa65 	bl	8006262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d98:	f000 fdb2 	bl	8006900 <xTaskResumeAll>
 8005d9c:	e77a      	b.n	8005c94 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da0:	f000 fa5f 	bl	8006262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005da4:	f000 fdac 	bl	8006900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005daa:	f000 faac 	bl	8006306 <prvIsQueueEmpty>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f43f af6f 	beq.w	8005c94 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005db6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3730      	adds	r7, #48	; 0x30
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <xQueueSemaphoreTake+0x30>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	e7fe      	b.n	8005df2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <xQueueSemaphoreTake+0x4c>
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	e7fe      	b.n	8005e0e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e10:	f001 f94a 	bl	80070a8 <xTaskGetSchedulerState>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <xQueueSemaphoreTake+0x5c>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <xQueueSemaphoreTake+0x60>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <xQueueSemaphoreTake+0x62>
 8005e24:	2300      	movs	r3, #0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <xQueueSemaphoreTake+0x7a>
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	e7fe      	b.n	8005e3c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e3e:	f001 ff7d 	bl	8007d3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d024      	beq.n	8005e98 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	1e5a      	subs	r2, r3, #1
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e5e:	f001 fa95 	bl	800738c <pvTaskIncrementMutexHeldCount>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00f      	beq.n	8005e90 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	3310      	adds	r3, #16
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 ff51 	bl	8006d1c <xTaskRemoveFromEventList>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e80:	4b53      	ldr	r3, [pc, #332]	; (8005fd0 <xQueueSemaphoreTake+0x20c>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e90:	f001 ff82 	bl	8007d98 <vPortExitCritical>
				return pdPASS;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e096      	b.n	8005fc6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d110      	bne.n	8005ec0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <xQueueSemaphoreTake+0xf4>
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e7fe      	b.n	8005eb6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005eb8:	f001 ff6e 	bl	8007d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e082      	b.n	8005fc6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ec6:	f107 030c 	add.w	r3, r7, #12
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 ff88 	bl	8006de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ed4:	f001 ff60 	bl	8007d98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ed8:	f000 fd04 	bl	80068e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005edc:	f001 ff2e 	bl	8007d3c <vPortEnterCritical>
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d103      	bne.n	8005ef6 <xQueueSemaphoreTake+0x132>
 8005eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efc:	b25b      	sxtb	r3, r3
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d103      	bne.n	8005f0c <xQueueSemaphoreTake+0x148>
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f0c:	f001 ff44 	bl	8007d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f10:	463a      	mov	r2, r7
 8005f12:	f107 030c 	add.w	r3, r7, #12
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 ff77 	bl	8006e0c <xTaskCheckForTimeOut>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d132      	bne.n	8005f8a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f26:	f000 f9ee 	bl	8006306 <prvIsQueueEmpty>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d026      	beq.n	8005f7e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005f38:	f001 ff00 	bl	8007d3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f8cf 	bl	80070e4 <xTaskPriorityInherit>
 8005f46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f48:	f001 ff26 	bl	8007d98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	3324      	adds	r3, #36	; 0x24
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	4611      	mov	r1, r2
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fe93 	bl	8006c80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f5c:	f000 f981 	bl	8006262 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f60:	f000 fcce 	bl	8006900 <xTaskResumeAll>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f47f af69 	bne.w	8005e3e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005f6c:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <xQueueSemaphoreTake+0x20c>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	e75f      	b.n	8005e3e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f80:	f000 f96f 	bl	8006262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f84:	f000 fcbc 	bl	8006900 <xTaskResumeAll>
 8005f88:	e759      	b.n	8005e3e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f8c:	f000 f969 	bl	8006262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f90:	f000 fcb6 	bl	8006900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f96:	f000 f9b6 	bl	8006306 <prvIsQueueEmpty>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f43f af4e 	beq.w	8005e3e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00d      	beq.n	8005fc4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005fa8:	f001 fec8 	bl	8007d3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fae:	f000 f8b0 	bl	8006112 <prvGetDisinheritPriorityAfterTimeout>
 8005fb2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 f966 	bl	800728c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fc0:	f001 feea 	bl	8007d98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3738      	adds	r7, #56	; 0x38
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	e000ed04 	.word	0xe000ed04

08005fd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	; 0x38
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <xQueueReceiveFromISR+0x2a>
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	e7fe      	b.n	8005ffc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d103      	bne.n	800600c <xQueueReceiveFromISR+0x38>
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <xQueueReceiveFromISR+0x3c>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <xQueueReceiveFromISR+0x3e>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <xQueueReceiveFromISR+0x56>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e7fe      	b.n	8006028 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800602a:	f001 ff63 	bl	8007ef4 <vPortValidateInterruptPriority>
	__asm volatile
 800602e:	f3ef 8211 	mrs	r2, BASEPRI
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	61ba      	str	r2, [r7, #24]
 8006044:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006046:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02f      	beq.n	80060b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006064:	f000 f8d7 	bl	8006216 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	1e5a      	subs	r2, r3, #1
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d112      	bne.n	80060a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	3310      	adds	r3, #16
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fe48 	bl	8006d1c <xTaskRemoveFromEventList>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00b      	beq.n	80060b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e007      	b.n	80060b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060a4:	3301      	adds	r3, #1
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	b25a      	sxtb	r2, r3
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34
 80060b4:	e001      	b.n	80060ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3738      	adds	r7, #56	; 0x38
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <vQueueDelete+0x26>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	e7fe      	b.n	80060f2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f95d 	bl	80063b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f001 fff5 	bl	80080f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e001      	b.n	8006134 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006134:	68fb      	ldr	r3, [r7, #12]
	}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b086      	sub	sp, #24
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10d      	bne.n	800617c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d14d      	bne.n	8006204 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f001 f821 	bl	80071b4 <xTaskPriorityDisinherit>
 8006172:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	609a      	str	r2, [r3, #8]
 800617a:	e043      	b.n	8006204 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d119      	bne.n	80061b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6858      	ldr	r0, [r3, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	461a      	mov	r2, r3
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	f002 f8ef 	bl	8008370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	441a      	add	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d32b      	bcc.n	8006204 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	605a      	str	r2, [r3, #4]
 80061b4:	e026      	b.n	8006204 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68d8      	ldr	r0, [r3, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	461a      	mov	r2, r3
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	f002 f8d5 	bl	8008370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	425b      	negs	r3, r3
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d207      	bcs.n	80061f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	425b      	negs	r3, r3
 80061ec:	441a      	add	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d105      	bne.n	8006204 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3b01      	subs	r3, #1
 8006202:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800620c:	697b      	ldr	r3, [r7, #20]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d018      	beq.n	800625a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	441a      	add	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	429a      	cmp	r2, r3
 8006240:	d303      	bcc.n	800624a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68d9      	ldr	r1, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	461a      	mov	r2, r3
 8006254:	6838      	ldr	r0, [r7, #0]
 8006256:	f002 f88b 	bl	8008370 <memcpy>
	}
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800626a:	f001 fd67 	bl	8007d3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006274:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006276:	e011      	b.n	800629c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d012      	beq.n	80062a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fd49 	bl	8006d1c <xTaskRemoveFromEventList>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006290:	f000 fe2c 	bl	8006eec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	3b01      	subs	r3, #1
 8006298:	b2db      	uxtb	r3, r3
 800629a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800629c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dce9      	bgt.n	8006278 <prvUnlockQueue+0x16>
 80062a4:	e000      	b.n	80062a8 <prvUnlockQueue+0x46>
					break;
 80062a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	22ff      	movs	r2, #255	; 0xff
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062b0:	f001 fd72 	bl	8007d98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062b4:	f001 fd42 	bl	8007d3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c0:	e011      	b.n	80062e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d012      	beq.n	80062f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3310      	adds	r3, #16
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fd24 	bl	8006d1c <xTaskRemoveFromEventList>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062da:	f000 fe07 	bl	8006eec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062de:	7bbb      	ldrb	r3, [r7, #14]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	dce9      	bgt.n	80062c2 <prvUnlockQueue+0x60>
 80062ee:	e000      	b.n	80062f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	22ff      	movs	r2, #255	; 0xff
 80062f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062fa:	f001 fd4d 	bl	8007d98 <vPortExitCritical>
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800630e:	f001 fd15 	bl	8007d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800631a:	2301      	movs	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e001      	b.n	8006324 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006324:	f001 fd38 	bl	8007d98 <vPortExitCritical>

	return xReturn;
 8006328:	68fb      	ldr	r3, [r7, #12]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800633a:	f001 fcff 	bl	8007d3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	429a      	cmp	r2, r3
 8006348:	d102      	bne.n	8006350 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800634a:	2301      	movs	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e001      	b.n	8006354 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006354:	f001 fd20 	bl	8007d98 <vPortExitCritical>

	return xReturn;
 8006358:	68fb      	ldr	r3, [r7, #12]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e014      	b.n	800639e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006374:	4a0e      	ldr	r2, [pc, #56]	; (80063b0 <vQueueAddToRegistry+0x4c>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006380:	490b      	ldr	r1, [pc, #44]	; (80063b0 <vQueueAddToRegistry+0x4c>)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800638a:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <vQueueAddToRegistry+0x4c>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006396:	e005      	b.n	80063a4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b07      	cmp	r3, #7
 80063a2:	d9e7      	bls.n	8006374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20004a20 	.word	0x20004a20

080063b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e016      	b.n	80063f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <vQueueUnregisterQueue+0x50>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4413      	add	r3, r2
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d10b      	bne.n	80063ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80063d2:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <vQueueUnregisterQueue+0x50>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2100      	movs	r1, #0
 80063d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80063dc:	4a09      	ldr	r2, [pc, #36]	; (8006404 <vQueueUnregisterQueue+0x50>)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]
				break;
 80063e8:	e005      	b.n	80063f6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b07      	cmp	r3, #7
 80063f4:	d9e5      	bls.n	80063c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20004a20 	.word	0x20004a20

08006408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006418:	f001 fc90 	bl	8007d3c <vPortEnterCritical>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006422:	b25b      	sxtb	r3, r3
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d103      	bne.n	8006432 <vQueueWaitForMessageRestricted+0x2a>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006438:	b25b      	sxtb	r3, r3
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d103      	bne.n	8006448 <vQueueWaitForMessageRestricted+0x40>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006448:	f001 fca6 	bl	8007d98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fc33 	bl	8006cc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f7ff fefd 	bl	8006262 <prvUnlockQueue>
	}
 8006468:	bf00      	nop
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08e      	sub	sp, #56	; 0x38
 8006474:	af04      	add	r7, sp, #16
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <xTaskCreateStatic+0x28>
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	623b      	str	r3, [r7, #32]
 8006496:	e7fe      	b.n	8006496 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <xTaskCreateStatic+0x42>
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e7fe      	b.n	80064b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064b2:	235c      	movs	r3, #92	; 0x5c
 80064b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b5c      	cmp	r3, #92	; 0x5c
 80064ba:	d009      	beq.n	80064d0 <xTaskCreateStatic+0x60>
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	e7fe      	b.n	80064ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01e      	beq.n	8006516 <xTaskCreateStatic+0xa6>
 80064d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01b      	beq.n	8006516 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064f0:	2300      	movs	r3, #0
 80064f2:	9303      	str	r3, [sp, #12]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	9302      	str	r3, [sp, #8]
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f850 	bl	80065ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800650e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006510:	f000 f8e0 	bl	80066d4 <prvAddNewTaskToReadyList>
 8006514:	e001      	b.n	800651a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800651a:	697b      	ldr	r3, [r7, #20]
	}
 800651c:	4618      	mov	r0, r3
 800651e:	3728      	adds	r7, #40	; 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08c      	sub	sp, #48	; 0x30
 8006528:	af04      	add	r7, sp, #16
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4618      	mov	r0, r3
 800653a:	f001 fd19 	bl	8007f70 <pvPortMalloc>
 800653e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006546:	205c      	movs	r0, #92	; 0x5c
 8006548:	f001 fd12 	bl	8007f70 <pvPortMalloc>
 800654c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	631a      	str	r2, [r3, #48]	; 0x30
 800655a:	e005      	b.n	8006568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800655c:	6978      	ldr	r0, [r7, #20]
 800655e:	f001 fdc9 	bl	80080f4 <vPortFree>
 8006562:	e001      	b.n	8006568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d017      	beq.n	800659e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006576:	88fa      	ldrh	r2, [r7, #6]
 8006578:	2300      	movs	r3, #0
 800657a:	9303      	str	r3, [sp, #12]
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	9302      	str	r3, [sp, #8]
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f80e 	bl	80065ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006592:	69f8      	ldr	r0, [r7, #28]
 8006594:	f000 f89e 	bl	80066d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006598:	2301      	movs	r3, #1
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	e002      	b.n	80065a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065a4:	69bb      	ldr	r3, [r7, #24]
	}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b088      	sub	sp, #32
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	461a      	mov	r2, r3
 80065c6:	21a5      	movs	r1, #165	; 0xa5
 80065c8:	f001 fedd 	bl	8008386 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065d6:	3b01      	subs	r3, #1
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <prvInitialiseNewTask+0x56>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e7fe      	b.n	8006602 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01f      	beq.n	800664a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	e012      	b.n	8006636 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	7819      	ldrb	r1, [r3, #0]
 8006618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	3334      	adds	r3, #52	; 0x34
 8006620:	460a      	mov	r2, r1
 8006622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d006      	beq.n	800663e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	3301      	adds	r3, #1
 8006634:	61fb      	str	r3, [r7, #28]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d9e9      	bls.n	8006610 <prvInitialiseNewTask+0x62>
 800663c:	e000      	b.n	8006640 <prvInitialiseNewTask+0x92>
			{
				break;
 800663e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006648:	e003      	b.n	8006652 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	2b37      	cmp	r3, #55	; 0x37
 8006656:	d901      	bls.n	800665c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006658:	2337      	movs	r3, #55	; 0x37
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006666:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	2200      	movs	r2, #0
 800666c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	3304      	adds	r3, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fe7a 	bl	800536c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	3318      	adds	r3, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fe75 	bl	800536c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	69b8      	ldr	r0, [r7, #24]
 80066b4:	f001 fa1e 	bl	8007af4 <pxPortInitialiseStack>
 80066b8:	4602      	mov	r2, r0
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ca:	bf00      	nop
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066dc:	f001 fb2e 	bl	8007d3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066e0:	4b2d      	ldr	r3, [pc, #180]	; (8006798 <prvAddNewTaskToReadyList+0xc4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3301      	adds	r3, #1
 80066e6:	4a2c      	ldr	r2, [pc, #176]	; (8006798 <prvAddNewTaskToReadyList+0xc4>)
 80066e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ea:	4b2c      	ldr	r3, [pc, #176]	; (800679c <prvAddNewTaskToReadyList+0xc8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066f2:	4a2a      	ldr	r2, [pc, #168]	; (800679c <prvAddNewTaskToReadyList+0xc8>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066f8:	4b27      	ldr	r3, [pc, #156]	; (8006798 <prvAddNewTaskToReadyList+0xc4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d110      	bne.n	8006722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006700:	f000 fc18 	bl	8006f34 <prvInitialiseTaskLists>
 8006704:	e00d      	b.n	8006722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006706:	4b26      	ldr	r3, [pc, #152]	; (80067a0 <prvAddNewTaskToReadyList+0xcc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800670e:	4b23      	ldr	r3, [pc, #140]	; (800679c <prvAddNewTaskToReadyList+0xc8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	429a      	cmp	r2, r3
 800671a:	d802      	bhi.n	8006722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <prvAddNewTaskToReadyList+0xc8>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006722:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <prvAddNewTaskToReadyList+0xd0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <prvAddNewTaskToReadyList+0xd0>)
 800672a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800672c:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <prvAddNewTaskToReadyList+0xd0>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <prvAddNewTaskToReadyList+0xd4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d903      	bls.n	8006748 <prvAddNewTaskToReadyList+0x74>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <prvAddNewTaskToReadyList+0xd4>)
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4a15      	ldr	r2, [pc, #84]	; (80067ac <prvAddNewTaskToReadyList+0xd8>)
 8006756:	441a      	add	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f7fe fe11 	bl	8005386 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006764:	f001 fb18 	bl	8007d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006768:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <prvAddNewTaskToReadyList+0xcc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00e      	beq.n	800678e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <prvAddNewTaskToReadyList+0xc8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677a:	429a      	cmp	r2, r3
 800677c:	d207      	bcs.n	800678e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800677e:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <prvAddNewTaskToReadyList+0xdc>)
 8006780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000cd4 	.word	0x20000cd4
 800679c:	20000800 	.word	0x20000800
 80067a0:	20000ce0 	.word	0x20000ce0
 80067a4:	20000cf0 	.word	0x20000cf0
 80067a8:	20000cdc 	.word	0x20000cdc
 80067ac:	20000804 	.word	0x20000804
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d016      	beq.n	80067f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067c6:	4b13      	ldr	r3, [pc, #76]	; (8006814 <vTaskDelay+0x60>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <vTaskDelay+0x2e>
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	e7fe      	b.n	80067e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80067e2:	f000 f87f 	bl	80068e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067e6:	2100      	movs	r1, #0
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fde3 	bl	80073b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ee:	f000 f887 	bl	8006900 <xTaskResumeAll>
 80067f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <vTaskDelay+0x64>)
 80067fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000cfc 	.word	0x20000cfc
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800682a:	463a      	mov	r2, r7
 800682c:	1d39      	adds	r1, r7, #4
 800682e:	f107 0308 	add.w	r3, r7, #8
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fd46 	bl	80052c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	9202      	str	r2, [sp, #8]
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	2300      	movs	r3, #0
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	2300      	movs	r3, #0
 8006848:	460a      	mov	r2, r1
 800684a:	4920      	ldr	r1, [pc, #128]	; (80068cc <vTaskStartScheduler+0xb0>)
 800684c:	4820      	ldr	r0, [pc, #128]	; (80068d0 <vTaskStartScheduler+0xb4>)
 800684e:	f7ff fe0f 	bl	8006470 <xTaskCreateStatic>
 8006852:	4602      	mov	r2, r0
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <vTaskStartScheduler+0xb8>)
 8006856:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006858:	4b1e      	ldr	r3, [pc, #120]	; (80068d4 <vTaskStartScheduler+0xb8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	e001      	b.n	800686a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d102      	bne.n	8006876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006870:	f000 fdfa 	bl	8007468 <xTimerCreateTimerTask>
 8006874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d115      	bne.n	80068a8 <vTaskStartScheduler+0x8c>
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800688e:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <vTaskStartScheduler+0xbc>)
 8006890:	f04f 32ff 	mov.w	r2, #4294967295
 8006894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006896:	4b11      	ldr	r3, [pc, #68]	; (80068dc <vTaskStartScheduler+0xc0>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800689c:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <vTaskStartScheduler+0xc4>)
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068a2:	f001 f9ad 	bl	8007c00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068a6:	e00d      	b.n	80068c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d109      	bne.n	80068c4 <vTaskStartScheduler+0xa8>
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e7fe      	b.n	80068c2 <vTaskStartScheduler+0xa6>
}
 80068c4:	bf00      	nop
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	08008e48 	.word	0x08008e48
 80068d0:	08006f05 	.word	0x08006f05
 80068d4:	20000cf8 	.word	0x20000cf8
 80068d8:	20000cf4 	.word	0x20000cf4
 80068dc:	20000ce0 	.word	0x20000ce0
 80068e0:	20000cd8 	.word	0x20000cd8

080068e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068e8:	4b04      	ldr	r3, [pc, #16]	; (80068fc <vTaskSuspendAll+0x18>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	4a03      	ldr	r2, [pc, #12]	; (80068fc <vTaskSuspendAll+0x18>)
 80068f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80068f2:	bf00      	nop
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	20000cfc 	.word	0x20000cfc

08006900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800690e:	4b41      	ldr	r3, [pc, #260]	; (8006a14 <xTaskResumeAll+0x114>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <xTaskResumeAll+0x2a>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	e7fe      	b.n	8006928 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800692a:	f001 fa07 	bl	8007d3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800692e:	4b39      	ldr	r3, [pc, #228]	; (8006a14 <xTaskResumeAll+0x114>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3b01      	subs	r3, #1
 8006934:	4a37      	ldr	r2, [pc, #220]	; (8006a14 <xTaskResumeAll+0x114>)
 8006936:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006938:	4b36      	ldr	r3, [pc, #216]	; (8006a14 <xTaskResumeAll+0x114>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d162      	bne.n	8006a06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006940:	4b35      	ldr	r3, [pc, #212]	; (8006a18 <xTaskResumeAll+0x118>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d05e      	beq.n	8006a06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006948:	e02f      	b.n	80069aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694a:	4b34      	ldr	r3, [pc, #208]	; (8006a1c <xTaskResumeAll+0x11c>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3318      	adds	r3, #24
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe fd72 	bl	8005440 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3304      	adds	r3, #4
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fd6d 	bl	8005440 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696a:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <xTaskResumeAll+0x120>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d903      	bls.n	800697a <xTaskResumeAll+0x7a>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	4a2a      	ldr	r2, [pc, #168]	; (8006a20 <xTaskResumeAll+0x120>)
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4a27      	ldr	r2, [pc, #156]	; (8006a24 <xTaskResumeAll+0x124>)
 8006988:	441a      	add	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3304      	adds	r3, #4
 800698e:	4619      	mov	r1, r3
 8006990:	4610      	mov	r0, r2
 8006992:	f7fe fcf8 	bl	8005386 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699a:	4b23      	ldr	r3, [pc, #140]	; (8006a28 <xTaskResumeAll+0x128>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069a4:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <xTaskResumeAll+0x12c>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069aa:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <xTaskResumeAll+0x11c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1cb      	bne.n	800694a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069b8:	f000 fb56 	bl	8007068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069bc:	4b1c      	ldr	r3, [pc, #112]	; (8006a30 <xTaskResumeAll+0x130>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d010      	beq.n	80069ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069c8:	f000 f846 	bl	8006a58 <xTaskIncrementTick>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80069d2:	4b16      	ldr	r3, [pc, #88]	; (8006a2c <xTaskResumeAll+0x12c>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3b01      	subs	r3, #1
 80069dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f1      	bne.n	80069c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80069e4:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <xTaskResumeAll+0x130>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069ea:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <xTaskResumeAll+0x12c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069f2:	2301      	movs	r3, #1
 80069f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069f6:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <xTaskResumeAll+0x134>)
 80069f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a06:	f001 f9c7 	bl	8007d98 <vPortExitCritical>

	return xAlreadyYielded;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000cfc 	.word	0x20000cfc
 8006a18:	20000cd4 	.word	0x20000cd4
 8006a1c:	20000c94 	.word	0x20000c94
 8006a20:	20000cdc 	.word	0x20000cdc
 8006a24:	20000804 	.word	0x20000804
 8006a28:	20000800 	.word	0x20000800
 8006a2c:	20000ce8 	.word	0x20000ce8
 8006a30:	20000ce4 	.word	0x20000ce4
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <xTaskGetTickCount+0x1c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a44:	687b      	ldr	r3, [r7, #4]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000cd8 	.word	0x20000cd8

08006a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a62:	4b4e      	ldr	r3, [pc, #312]	; (8006b9c <xTaskIncrementTick+0x144>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 8088 	bne.w	8006b7c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a6c:	4b4c      	ldr	r3, [pc, #304]	; (8006ba0 <xTaskIncrementTick+0x148>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a74:	4a4a      	ldr	r2, [pc, #296]	; (8006ba0 <xTaskIncrementTick+0x148>)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11f      	bne.n	8006ac0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a80:	4b48      	ldr	r3, [pc, #288]	; (8006ba4 <xTaskIncrementTick+0x14c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <xTaskIncrementTick+0x46>
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	e7fe      	b.n	8006a9c <xTaskIncrementTick+0x44>
 8006a9e:	4b41      	ldr	r3, [pc, #260]	; (8006ba4 <xTaskIncrementTick+0x14c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	4b40      	ldr	r3, [pc, #256]	; (8006ba8 <xTaskIncrementTick+0x150>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a3e      	ldr	r2, [pc, #248]	; (8006ba4 <xTaskIncrementTick+0x14c>)
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	4a3e      	ldr	r2, [pc, #248]	; (8006ba8 <xTaskIncrementTick+0x150>)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	4b3e      	ldr	r3, [pc, #248]	; (8006bac <xTaskIncrementTick+0x154>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	4a3c      	ldr	r2, [pc, #240]	; (8006bac <xTaskIncrementTick+0x154>)
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	f000 fad4 	bl	8007068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ac0:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <xTaskIncrementTick+0x158>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d349      	bcc.n	8006b5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aca:	4b36      	ldr	r3, [pc, #216]	; (8006ba4 <xTaskIncrementTick+0x14c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad4:	4b36      	ldr	r3, [pc, #216]	; (8006bb0 <xTaskIncrementTick+0x158>)
 8006ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ada:	601a      	str	r2, [r3, #0]
					break;
 8006adc:	e03f      	b.n	8006b5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <xTaskIncrementTick+0x14c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d203      	bcs.n	8006afe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006af6:	4a2e      	ldr	r2, [pc, #184]	; (8006bb0 <xTaskIncrementTick+0x158>)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006afc:	e02f      	b.n	8006b5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fc9c 	bl	8005440 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d004      	beq.n	8006b1a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	3318      	adds	r3, #24
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fc93 	bl	8005440 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <xTaskIncrementTick+0x15c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d903      	bls.n	8006b2e <xTaskIncrementTick+0xd6>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	4a22      	ldr	r2, [pc, #136]	; (8006bb4 <xTaskIncrementTick+0x15c>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <xTaskIncrementTick+0x160>)
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f7fe fc1e 	bl	8005386 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <xTaskIncrementTick+0x164>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d3b8      	bcc.n	8006aca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5c:	e7b5      	b.n	8006aca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b5e:	4b17      	ldr	r3, [pc, #92]	; (8006bbc <xTaskIncrementTick+0x164>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4914      	ldr	r1, [pc, #80]	; (8006bb8 <xTaskIncrementTick+0x160>)
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d907      	bls.n	8006b86 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006b76:	2301      	movs	r3, #1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e004      	b.n	8006b86 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b7c:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <xTaskIncrementTick+0x168>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <xTaskIncrementTick+0x168>)
 8006b84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <xTaskIncrementTick+0x16c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b92:	697b      	ldr	r3, [r7, #20]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000cfc 	.word	0x20000cfc
 8006ba0:	20000cd8 	.word	0x20000cd8
 8006ba4:	20000c8c 	.word	0x20000c8c
 8006ba8:	20000c90 	.word	0x20000c90
 8006bac:	20000cec 	.word	0x20000cec
 8006bb0:	20000cf4 	.word	0x20000cf4
 8006bb4:	20000cdc 	.word	0x20000cdc
 8006bb8:	20000804 	.word	0x20000804
 8006bbc:	20000800 	.word	0x20000800
 8006bc0:	20000ce4 	.word	0x20000ce4
 8006bc4:	20000ce8 	.word	0x20000ce8

08006bc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bce:	4b27      	ldr	r3, [pc, #156]	; (8006c6c <vTaskSwitchContext+0xa4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <vTaskSwitchContext+0xa8>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bdc:	e040      	b.n	8006c60 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <vTaskSwitchContext+0xa8>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be4:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <vTaskSwitchContext+0xac>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e00f      	b.n	8006c0c <vTaskSwitchContext+0x44>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <vTaskSwitchContext+0x3e>
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	607b      	str	r3, [r7, #4]
 8006c04:	e7fe      	b.n	8006c04 <vTaskSwitchContext+0x3c>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	491a      	ldr	r1, [pc, #104]	; (8006c78 <vTaskSwitchContext+0xb0>)
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0e5      	beq.n	8006bec <vTaskSwitchContext+0x24>
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <vTaskSwitchContext+0xb0>)
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3308      	adds	r3, #8
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d104      	bne.n	8006c50 <vTaskSwitchContext+0x88>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <vTaskSwitchContext+0xb4>)
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4a06      	ldr	r2, [pc, #24]	; (8006c74 <vTaskSwitchContext+0xac>)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6013      	str	r3, [r2, #0]
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000cfc 	.word	0x20000cfc
 8006c70:	20000ce8 	.word	0x20000ce8
 8006c74:	20000cdc 	.word	0x20000cdc
 8006c78:	20000804 	.word	0x20000804
 8006c7c:	20000800 	.word	0x20000800

08006c80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <vTaskPlaceOnEventList+0x24>
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e7fe      	b.n	8006ca2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <vTaskPlaceOnEventList+0x44>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3318      	adds	r3, #24
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fe fb8e 	bl	80053ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	6838      	ldr	r0, [r7, #0]
 8006cb6:	f000 fb7d 	bl	80073b4 <prvAddCurrentTaskToDelayedList>
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000800 	.word	0x20000800

08006cc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <vTaskPlaceOnEventListRestricted+0x26>
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e7fe      	b.n	8006cec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <vTaskPlaceOnEventListRestricted+0x50>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3318      	adds	r3, #24
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7fe fb45 	bl	8005386 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295
 8006d06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	68b8      	ldr	r0, [r7, #8]
 8006d0c:	f000 fb52 	bl	80073b4 <prvAddCurrentTaskToDelayedList>
	}
 8006d10:	bf00      	nop
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000800 	.word	0x20000800

08006d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <xTaskRemoveFromEventList+0x2a>
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e7fe      	b.n	8006d44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3318      	adds	r3, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fb78 	bl	8005440 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d50:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <xTaskRemoveFromEventList+0xac>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11d      	bne.n	8006d94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe fb6f 	bl	8005440 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d66:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <xTaskRemoveFromEventList+0xb0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d903      	bls.n	8006d76 <xTaskRemoveFromEventList+0x5a>
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <xTaskRemoveFromEventList+0xb0>)
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <xTaskRemoveFromEventList+0xb4>)
 8006d84:	441a      	add	r2, r3
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7fe fafa 	bl	8005386 <vListInsertEnd>
 8006d92:	e005      	b.n	8006da0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3318      	adds	r3, #24
 8006d98:	4619      	mov	r1, r3
 8006d9a:	480e      	ldr	r0, [pc, #56]	; (8006dd4 <xTaskRemoveFromEventList+0xb8>)
 8006d9c:	f7fe faf3 	bl	8005386 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <xTaskRemoveFromEventList+0xbc>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d905      	bls.n	8006dba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <xTaskRemoveFromEventList+0xc0>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e001      	b.n	8006dbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dbe:	697b      	ldr	r3, [r7, #20]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000cfc 	.word	0x20000cfc
 8006dcc:	20000cdc 	.word	0x20000cdc
 8006dd0:	20000804 	.word	0x20000804
 8006dd4:	20000c94 	.word	0x20000c94
 8006dd8:	20000800 	.word	0x20000800
 8006ddc:	20000ce8 	.word	0x20000ce8

08006de0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006de8:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <vTaskInternalSetTimeOutState+0x24>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <vTaskInternalSetTimeOutState+0x28>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	605a      	str	r2, [r3, #4]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	20000cec 	.word	0x20000cec
 8006e08:	20000cd8 	.word	0x20000cd8

08006e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <xTaskCheckForTimeOut+0x24>
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	e7fe      	b.n	8006e2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <xTaskCheckForTimeOut+0x3e>
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e7fe      	b.n	8006e48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006e4a:	f000 ff77 	bl	8007d3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e4e:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <xTaskCheckForTimeOut+0xd4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <xTaskCheckForTimeOut+0xd8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8006e6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <xTaskCheckForTimeOut+0xd8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	e02b      	b.n	8006ed2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d102      	bne.n	8006e8a <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	e023      	b.n	8006ed2 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <xTaskCheckForTimeOut+0xdc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d007      	beq.n	8006ea6 <xTaskCheckForTimeOut+0x9a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d302      	bcc.n	8006ea6 <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	e015      	b.n	8006ed2 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d20b      	bcs.n	8006ec8 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff ff8f 	bl	8006de0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	e004      	b.n	8006ed2 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ed2:	f000 ff61 	bl	8007d98 <vPortExitCritical>

	return xReturn;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000cd8 	.word	0x20000cd8
 8006ee4:	20000800 	.word	0x20000800
 8006ee8:	20000cec 	.word	0x20000cec

08006eec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <vTaskMissedYield+0x14>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	20000ce8 	.word	0x20000ce8

08006f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f0c:	f000 f852 	bl	8006fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f10:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <prvIdleTask+0x28>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d9f9      	bls.n	8006f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <prvIdleTask+0x2c>)
 8006f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f28:	e7f0      	b.n	8006f0c <prvIdleTask+0x8>
 8006f2a:	bf00      	nop
 8006f2c:	20000804 	.word	0x20000804
 8006f30:	e000ed04 	.word	0xe000ed04

08006f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	e00c      	b.n	8006f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4a12      	ldr	r2, [pc, #72]	; (8006f94 <prvInitialiseTaskLists+0x60>)
 8006f4c:	4413      	add	r3, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe f9ec 	bl	800532c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3301      	adds	r3, #1
 8006f58:	607b      	str	r3, [r7, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b37      	cmp	r3, #55	; 0x37
 8006f5e:	d9ef      	bls.n	8006f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f60:	480d      	ldr	r0, [pc, #52]	; (8006f98 <prvInitialiseTaskLists+0x64>)
 8006f62:	f7fe f9e3 	bl	800532c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f66:	480d      	ldr	r0, [pc, #52]	; (8006f9c <prvInitialiseTaskLists+0x68>)
 8006f68:	f7fe f9e0 	bl	800532c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f6c:	480c      	ldr	r0, [pc, #48]	; (8006fa0 <prvInitialiseTaskLists+0x6c>)
 8006f6e:	f7fe f9dd 	bl	800532c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f72:	480c      	ldr	r0, [pc, #48]	; (8006fa4 <prvInitialiseTaskLists+0x70>)
 8006f74:	f7fe f9da 	bl	800532c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f78:	480b      	ldr	r0, [pc, #44]	; (8006fa8 <prvInitialiseTaskLists+0x74>)
 8006f7a:	f7fe f9d7 	bl	800532c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <prvInitialiseTaskLists+0x78>)
 8006f80:	4a05      	ldr	r2, [pc, #20]	; (8006f98 <prvInitialiseTaskLists+0x64>)
 8006f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <prvInitialiseTaskLists+0x7c>)
 8006f86:	4a05      	ldr	r2, [pc, #20]	; (8006f9c <prvInitialiseTaskLists+0x68>)
 8006f88:	601a      	str	r2, [r3, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000804 	.word	0x20000804
 8006f98:	20000c64 	.word	0x20000c64
 8006f9c:	20000c78 	.word	0x20000c78
 8006fa0:	20000c94 	.word	0x20000c94
 8006fa4:	20000ca8 	.word	0x20000ca8
 8006fa8:	20000cc0 	.word	0x20000cc0
 8006fac:	20000c8c 	.word	0x20000c8c
 8006fb0:	20000c90 	.word	0x20000c90

08006fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fba:	e019      	b.n	8006ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fbc:	f000 febe 	bl	8007d3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <prvCheckTasksWaitingTermination+0x4c>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fa37 	bl	8005440 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <prvCheckTasksWaitingTermination+0x50>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <prvCheckTasksWaitingTermination+0x50>)
 8006fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <prvCheckTasksWaitingTermination+0x54>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	4a09      	ldr	r2, [pc, #36]	; (8007008 <prvCheckTasksWaitingTermination+0x54>)
 8006fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fe6:	f000 fed7 	bl	8007d98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f80e 	bl	800700c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <prvCheckTasksWaitingTermination+0x54>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e1      	bne.n	8006fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000ca8 	.word	0x20000ca8
 8007004:	20000cd4 	.word	0x20000cd4
 8007008:	20000cbc 	.word	0x20000cbc

0800700c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800701a:	2b00      	cmp	r3, #0
 800701c:	d108      	bne.n	8007030 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	4618      	mov	r0, r3
 8007024:	f001 f866 	bl	80080f4 <vPortFree>
				vPortFree( pxTCB );
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 f863 	bl	80080f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800702e:	e017      	b.n	8007060 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007036:	2b01      	cmp	r3, #1
 8007038:	d103      	bne.n	8007042 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 f85a 	bl	80080f4 <vPortFree>
	}
 8007040:	e00e      	b.n	8007060 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007048:	2b02      	cmp	r3, #2
 800704a:	d009      	beq.n	8007060 <prvDeleteTCB+0x54>
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e7fe      	b.n	800705e <prvDeleteTCB+0x52>
	}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <prvResetNextTaskUnblockTime+0x38>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <prvResetNextTaskUnblockTime+0x3c>)
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007080:	e008      	b.n	8007094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007082:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <prvResetNextTaskUnblockTime+0x38>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	4a04      	ldr	r2, [pc, #16]	; (80070a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007092:	6013      	str	r3, [r2, #0]
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20000c8c 	.word	0x20000c8c
 80070a4:	20000cf4 	.word	0x20000cf4

080070a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <xTaskGetSchedulerState+0x34>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070b6:	2301      	movs	r3, #1
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	e008      	b.n	80070ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070bc:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <xTaskGetSchedulerState+0x38>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070c4:	2302      	movs	r3, #2
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	e001      	b.n	80070ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070ca:	2300      	movs	r3, #0
 80070cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070ce:	687b      	ldr	r3, [r7, #4]
	}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	20000ce0 	.word	0x20000ce0
 80070e0:	20000cfc 	.word	0x20000cfc

080070e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d051      	beq.n	800719e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	4b2a      	ldr	r3, [pc, #168]	; (80071a8 <xTaskPriorityInherit+0xc4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	429a      	cmp	r2, r3
 8007106:	d241      	bcs.n	800718c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	db06      	blt.n	800711e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007110:	4b25      	ldr	r3, [pc, #148]	; (80071a8 <xTaskPriorityInherit+0xc4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6959      	ldr	r1, [r3, #20]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <xTaskPriorityInherit+0xc8>)
 8007130:	4413      	add	r3, r2
 8007132:	4299      	cmp	r1, r3
 8007134:	d122      	bne.n	800717c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe f980 	bl	8005440 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007140:	4b19      	ldr	r3, [pc, #100]	; (80071a8 <xTaskPriorityInherit+0xc4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714e:	4b18      	ldr	r3, [pc, #96]	; (80071b0 <xTaskPriorityInherit+0xcc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d903      	bls.n	800715e <xTaskPriorityInherit+0x7a>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <xTaskPriorityInherit+0xcc>)
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4a10      	ldr	r2, [pc, #64]	; (80071ac <xTaskPriorityInherit+0xc8>)
 800716c:	441a      	add	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fe f906 	bl	8005386 <vListInsertEnd>
 800717a:	e004      	b.n	8007186 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <xTaskPriorityInherit+0xc4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e008      	b.n	800719e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007190:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <xTaskPriorityInherit+0xc4>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	429a      	cmp	r2, r3
 8007198:	d201      	bcs.n	800719e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800719a:	2301      	movs	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800719e:	68fb      	ldr	r3, [r7, #12]
	}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20000800 	.word	0x20000800
 80071ac:	20000804 	.word	0x20000804
 80071b0:	20000cdc 	.word	0x20000cdc

080071b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d054      	beq.n	8007274 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071ca:	4b2d      	ldr	r3, [pc, #180]	; (8007280 <xTaskPriorityDisinherit+0xcc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d009      	beq.n	80071e8 <xTaskPriorityDisinherit+0x34>
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e7fe      	b.n	80071e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <xTaskPriorityDisinherit+0x50>
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	e7fe      	b.n	8007202 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007208:	1e5a      	subs	r2, r3, #1
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007216:	429a      	cmp	r2, r3
 8007218:	d02c      	beq.n	8007274 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721e:	2b00      	cmp	r3, #0
 8007220:	d128      	bne.n	8007274 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3304      	adds	r3, #4
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe f90a 	bl	8005440 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <xTaskPriorityDisinherit+0xd0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d903      	bls.n	8007254 <xTaskPriorityDisinherit+0xa0>
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4a0c      	ldr	r2, [pc, #48]	; (8007284 <xTaskPriorityDisinherit+0xd0>)
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4a09      	ldr	r2, [pc, #36]	; (8007288 <xTaskPriorityDisinherit+0xd4>)
 8007262:	441a      	add	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3304      	adds	r3, #4
 8007268:	4619      	mov	r1, r3
 800726a:	4610      	mov	r0, r2
 800726c:	f7fe f88b 	bl	8005386 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007270:	2301      	movs	r3, #1
 8007272:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007274:	697b      	ldr	r3, [r7, #20]
	}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000800 	.word	0x20000800
 8007284:	20000cdc 	.word	0x20000cdc
 8007288:	20000804 	.word	0x20000804

0800728c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800729a:	2301      	movs	r3, #1
 800729c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d068      	beq.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d109      	bne.n	80072c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e7fe      	b.n	80072be <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d902      	bls.n	80072d0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	e002      	b.n	80072d6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d04a      	beq.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d145      	bne.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072ea:	4b25      	ldr	r3, [pc, #148]	; (8007380 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d109      	bne.n	8007308 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	e7fe      	b.n	8007306 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	db04      	blt.n	8007326 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6959      	ldr	r1, [r3, #20]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4a13      	ldr	r2, [pc, #76]	; (8007384 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007336:	4413      	add	r3, r2
 8007338:	4299      	cmp	r1, r3
 800733a:	d11c      	bne.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	3304      	adds	r3, #4
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe f87d 	bl	8005440 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d903      	bls.n	800735a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a0c      	ldr	r2, [pc, #48]	; (8007388 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4a07      	ldr	r2, [pc, #28]	; (8007384 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007368:	441a      	add	r2, r3
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	3304      	adds	r3, #4
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f7fe f808 	bl	8005386 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007376:	bf00      	nop
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000800 	.word	0x20000800
 8007384:	20000804 	.word	0x20000804
 8007388:	20000cdc 	.word	0x20000cdc

0800738c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800739e:	3201      	adds	r2, #1
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80073a2:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80073a4:	681b      	ldr	r3, [r3, #0]
	}
 80073a6:	4618      	mov	r0, r3
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	20000800 	.word	0x20000800

080073b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073be:	4b24      	ldr	r3, [pc, #144]	; (8007450 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80073c4:	4b23      	ldr	r3, [pc, #140]	; (8007454 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ce:	4b21      	ldr	r3, [pc, #132]	; (8007454 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe f833 	bl	8005440 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e0:	d10a      	bne.n	80073f8 <prvAddCurrentTaskToDelayedList+0x44>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e8:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4819      	ldr	r0, [pc, #100]	; (8007458 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073f2:	f7fd ffc8 	bl	8005386 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073f6:	e026      	b.n	8007446 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007400:	4b14      	ldr	r3, [pc, #80]	; (8007454 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d209      	bcs.n	8007424 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007410:	4b12      	ldr	r3, [pc, #72]	; (800745c <prvAddCurrentTaskToDelayedList+0xa8>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3304      	adds	r3, #4
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f7fd ffd6 	bl	80053ce <vListInsert>
}
 8007422:	e010      	b.n	8007446 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007424:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <prvAddCurrentTaskToDelayedList+0xac>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <prvAddCurrentTaskToDelayedList+0xa0>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7fd ffcc 	bl	80053ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007436:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	429a      	cmp	r2, r3
 800743e:	d202      	bcs.n	8007446 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8007440:	4a08      	ldr	r2, [pc, #32]	; (8007464 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6013      	str	r3, [r2, #0]
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000cd8 	.word	0x20000cd8
 8007454:	20000800 	.word	0x20000800
 8007458:	20000cc0 	.word	0x20000cc0
 800745c:	20000c90 	.word	0x20000c90
 8007460:	20000c8c 	.word	0x20000c8c
 8007464:	20000cf4 	.word	0x20000cf4

08007468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007472:	f000 faff 	bl	8007a74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007476:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <xTimerCreateTimerTask+0x80>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d021      	beq.n	80074c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007486:	1d3a      	adds	r2, r7, #4
 8007488:	f107 0108 	add.w	r1, r7, #8
 800748c:	f107 030c 	add.w	r3, r7, #12
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd ff31 	bl	80052f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	9202      	str	r2, [sp, #8]
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	2302      	movs	r3, #2
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	460a      	mov	r2, r1
 80074a8:	4910      	ldr	r1, [pc, #64]	; (80074ec <xTimerCreateTimerTask+0x84>)
 80074aa:	4811      	ldr	r0, [pc, #68]	; (80074f0 <xTimerCreateTimerTask+0x88>)
 80074ac:	f7fe ffe0 	bl	8006470 <xTaskCreateStatic>
 80074b0:	4602      	mov	r2, r0
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <xTimerCreateTimerTask+0x8c>)
 80074b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <xTimerCreateTimerTask+0x8c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <xTimerCreateTimerTask+0x74>
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	e7fe      	b.n	80074da <xTimerCreateTimerTask+0x72>
	return xReturn;
 80074dc:	697b      	ldr	r3, [r7, #20]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000d30 	.word	0x20000d30
 80074ec:	08008e50 	.word	0x08008e50
 80074f0:	08007629 	.word	0x08007629
 80074f4:	20000d34 	.word	0x20000d34

080074f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	; 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007506:	2300      	movs	r3, #0
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d109      	bne.n	8007524 <xTimerGenericCommand+0x2c>
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	e7fe      	b.n	8007522 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007524:	4b19      	ldr	r3, [pc, #100]	; (800758c <xTimerGenericCommand+0x94>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02a      	beq.n	8007582 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b05      	cmp	r3, #5
 800753c:	dc18      	bgt.n	8007570 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800753e:	f7ff fdb3 	bl	80070a8 <xTaskGetSchedulerState>
 8007542:	4603      	mov	r3, r0
 8007544:	2b02      	cmp	r3, #2
 8007546:	d109      	bne.n	800755c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007548:	4b10      	ldr	r3, [pc, #64]	; (800758c <xTimerGenericCommand+0x94>)
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	f107 0110 	add.w	r1, r7, #16
 8007550:	2300      	movs	r3, #0
 8007552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007554:	f7fe f942 	bl	80057dc <xQueueGenericSend>
 8007558:	6278      	str	r0, [r7, #36]	; 0x24
 800755a:	e012      	b.n	8007582 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800755c:	4b0b      	ldr	r3, [pc, #44]	; (800758c <xTimerGenericCommand+0x94>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	f107 0110 	add.w	r1, r7, #16
 8007564:	2300      	movs	r3, #0
 8007566:	2200      	movs	r2, #0
 8007568:	f7fe f938 	bl	80057dc <xQueueGenericSend>
 800756c:	6278      	str	r0, [r7, #36]	; 0x24
 800756e:	e008      	b.n	8007582 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <xTimerGenericCommand+0x94>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	f107 0110 	add.w	r1, r7, #16
 8007578:	2300      	movs	r3, #0
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	f7fe fa28 	bl	80059d0 <xQueueGenericSendFromISR>
 8007580:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007584:	4618      	mov	r0, r3
 8007586:	3728      	adds	r7, #40	; 0x28
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000d30 	.word	0x20000d30

08007590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759a:	4b22      	ldr	r3, [pc, #136]	; (8007624 <prvProcessExpiredTimer+0x94>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fd ff49 	bl	8005440 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d021      	beq.n	8007600 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	18d1      	adds	r1, r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	6978      	ldr	r0, [r7, #20]
 80075ca:	f000 f8d1 	bl	8007770 <prvInsertTimerInActiveList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01e      	beq.n	8007612 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075d4:	2300      	movs	r3, #0
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	2100      	movs	r1, #0
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	f7ff ff8a 	bl	80074f8 <xTimerGenericCommand>
 80075e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d112      	bne.n	8007612 <prvProcessExpiredTimer+0x82>
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	e7fe      	b.n	80075fe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	b2da      	uxtb	r2, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	6978      	ldr	r0, [r7, #20]
 8007618:	4798      	blx	r3
}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000d28 	.word	0x20000d28

08007628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f857 	bl	80076e8 <prvGetNextExpireTime>
 800763a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f803 	bl	800764c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007646:	f000 f8d5 	bl	80077f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800764a:	e7f1      	b.n	8007630 <prvTimerTask+0x8>

0800764c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007656:	f7ff f945 	bl	80068e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800765a:	f107 0308 	add.w	r3, r7, #8
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f866 	bl	8007730 <prvSampleTimeNow>
 8007664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d130      	bne.n	80076ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	429a      	cmp	r2, r3
 8007678:	d806      	bhi.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800767a:	f7ff f941 	bl	8006900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff85 	bl	8007590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007686:	e024      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <prvProcessTimerOrBlockTask+0x90>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <prvProcessTimerOrBlockTask+0x50>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <prvProcessTimerOrBlockTask+0x52>
 800769c:	2300      	movs	r3, #0
 800769e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <prvProcessTimerOrBlockTask+0x94>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7fe feab 	bl	8006408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076b2:	f7ff f925 	bl	8006900 <xTaskResumeAll>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <prvProcessTimerOrBlockTask+0x98>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
}
 80076cc:	e001      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ce:	f7ff f917 	bl	8006900 <xTaskResumeAll>
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000d2c 	.word	0x20000d2c
 80076e0:	20000d30 	.word	0x20000d30
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <prvGetNextExpireTime+0x44>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <prvGetNextExpireTime+0x16>
 80076fa:	2201      	movs	r2, #1
 80076fc:	e000      	b.n	8007700 <prvGetNextExpireTime+0x18>
 80076fe:	2200      	movs	r2, #0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <prvGetNextExpireTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e001      	b.n	800771c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800771c:	68fb      	ldr	r3, [r7, #12]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000d28 	.word	0x20000d28

08007730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007738:	f7ff f97e 	bl	8006a38 <xTaskGetTickCount>
 800773c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <prvSampleTimeNow+0x3c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d205      	bcs.n	8007754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007748:	f000 f930 	bl	80079ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e002      	b.n	800775a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800775a:	4a04      	ldr	r2, [pc, #16]	; (800776c <prvSampleTimeNow+0x3c>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000d38 	.word	0x20000d38

08007770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d812      	bhi.n	80077bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	1ad2      	subs	r2, r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d302      	bcc.n	80077aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e01b      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <prvInsertTimerInActiveList+0x7c>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f7fd fe0a 	bl	80053ce <vListInsert>
 80077ba:	e012      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d206      	bcs.n	80077d2 <prvInsertTimerInActiveList+0x62>
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d302      	bcc.n	80077d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e007      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <prvInsertTimerInActiveList+0x80>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7fd fdf6 	bl	80053ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077e2:	697b      	ldr	r3, [r7, #20]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20000d2c 	.word	0x20000d2c
 80077f0:	20000d28 	.word	0x20000d28

080077f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08e      	sub	sp, #56	; 0x38
 80077f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077fa:	e0c6      	b.n	800798a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da17      	bge.n	8007832 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	3304      	adds	r3, #4
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <prvProcessReceivedCommands+0x2e>
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	e7fe      	b.n	8007820 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007828:	6850      	ldr	r0, [r2, #4]
 800782a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800782c:	6892      	ldr	r2, [r2, #8]
 800782e:	4611      	mov	r1, r2
 8007830:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f2c0 80a7 	blt.w	8007988 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	3304      	adds	r3, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f7fd fdf8 	bl	8005440 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007850:	463b      	mov	r3, r7
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff ff6c 	bl	8007730 <prvSampleTimeNow>
 8007858:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b09      	cmp	r3, #9
 800785e:	f200 8094 	bhi.w	800798a <prvProcessReceivedCommands+0x196>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <prvProcessReceivedCommands+0x74>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007891 	.word	0x08007891
 800786c:	08007891 	.word	0x08007891
 8007870:	08007891 	.word	0x08007891
 8007874:	08007903 	.word	0x08007903
 8007878:	08007917 	.word	0x08007917
 800787c:	0800795f 	.word	0x0800795f
 8007880:	08007891 	.word	0x08007891
 8007884:	08007891 	.word	0x08007891
 8007888:	08007903 	.word	0x08007903
 800788c:	08007917 	.word	0x08007917
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	b2da      	uxtb	r2, r3
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	18d1      	adds	r1, r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b0:	f7ff ff5e 	bl	8007770 <prvInsertTimerInActiveList>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d067      	beq.n	800798a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d05c      	beq.n	800798a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	441a      	add	r2, r3
 80078d8:	2300      	movs	r3, #0
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2300      	movs	r3, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e2:	f7ff fe09 	bl	80074f8 <xTimerGenericCommand>
 80078e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d14d      	bne.n	800798a <prvProcessReceivedCommands+0x196>
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	e7fe      	b.n	8007900 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	b2da      	uxtb	r2, r3
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007914:	e039      	b.n	800798a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	b2da      	uxtb	r2, r3
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d109      	bne.n	800794a <prvProcessReceivedCommands+0x156>
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e7fe      	b.n	8007948 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	18d1      	adds	r1, r2, r3
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007958:	f7ff ff0a 	bl	8007770 <prvInsertTimerInActiveList>
					break;
 800795c:	e015      	b.n	800798a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d103      	bne.n	8007974 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800796c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796e:	f000 fbc1 	bl	80080f4 <vPortFree>
 8007972:	e00a      	b.n	800798a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007986:	e000      	b.n	800798a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007988:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <prvProcessReceivedCommands+0x1b4>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	1d39      	adds	r1, r7, #4
 8007990:	2200      	movs	r2, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe f93a 	bl	8005c0c <xQueueReceive>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	f47f af2e 	bne.w	80077fc <prvProcessReceivedCommands+0x8>
	}
}
 80079a0:	bf00      	nop
 80079a2:	3730      	adds	r7, #48	; 0x30
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000d30 	.word	0x20000d30

080079ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079b2:	e047      	b.n	8007a44 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079b4:	4b2d      	ldr	r3, [pc, #180]	; (8007a6c <prvSwitchTimerLists+0xc0>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079be:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <prvSwitchTimerLists+0xc0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd fd37 	bl	8005440 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d02d      	beq.n	8007a44 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d90e      	bls.n	8007a18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a06:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <prvSwitchTimerLists+0xc0>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fd fcdc 	bl	80053ce <vListInsert>
 8007a16:	e015      	b.n	8007a44 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	2100      	movs	r1, #0
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7ff fd68 	bl	80074f8 <xTimerGenericCommand>
 8007a28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <prvSwitchTimerLists+0x98>
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	603b      	str	r3, [r7, #0]
 8007a42:	e7fe      	b.n	8007a42 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a44:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <prvSwitchTimerLists+0xc0>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1b2      	bne.n	80079b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <prvSwitchTimerLists+0xc0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <prvSwitchTimerLists+0xc4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a04      	ldr	r2, [pc, #16]	; (8007a6c <prvSwitchTimerLists+0xc0>)
 8007a5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a5c:	4a04      	ldr	r2, [pc, #16]	; (8007a70 <prvSwitchTimerLists+0xc4>)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6013      	str	r3, [r2, #0]
}
 8007a62:	bf00      	nop
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000d28 	.word	0x20000d28
 8007a70:	20000d2c 	.word	0x20000d2c

08007a74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a7a:	f000 f95f 	bl	8007d3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a7e:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <prvCheckForValidListAndQueue+0x60>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d120      	bne.n	8007ac8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a86:	4814      	ldr	r0, [pc, #80]	; (8007ad8 <prvCheckForValidListAndQueue+0x64>)
 8007a88:	f7fd fc50 	bl	800532c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a8c:	4813      	ldr	r0, [pc, #76]	; (8007adc <prvCheckForValidListAndQueue+0x68>)
 8007a8e:	f7fd fc4d 	bl	800532c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a92:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <prvCheckForValidListAndQueue+0x6c>)
 8007a94:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <prvCheckForValidListAndQueue+0x64>)
 8007a96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a98:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <prvCheckForValidListAndQueue+0x70>)
 8007a9a:	4a10      	ldr	r2, [pc, #64]	; (8007adc <prvCheckForValidListAndQueue+0x68>)
 8007a9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <prvCheckForValidListAndQueue+0x74>)
 8007aa4:	4a11      	ldr	r2, [pc, #68]	; (8007aec <prvCheckForValidListAndQueue+0x78>)
 8007aa6:	2110      	movs	r1, #16
 8007aa8:	200a      	movs	r0, #10
 8007aaa:	f7fd fd5b 	bl	8005564 <xQueueGenericCreateStatic>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <prvCheckForValidListAndQueue+0x60>)
 8007ab2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <prvCheckForValidListAndQueue+0x60>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <prvCheckForValidListAndQueue+0x60>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	490b      	ldr	r1, [pc, #44]	; (8007af0 <prvCheckForValidListAndQueue+0x7c>)
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fc4e 	bl	8006364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ac8:	f000 f966 	bl	8007d98 <vPortExitCritical>
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000d30 	.word	0x20000d30
 8007ad8:	20000d00 	.word	0x20000d00
 8007adc:	20000d14 	.word	0x20000d14
 8007ae0:	20000d28 	.word	0x20000d28
 8007ae4:	20000d2c 	.word	0x20000d2c
 8007ae8:	20000ddc 	.word	0x20000ddc
 8007aec:	20000d3c 	.word	0x20000d3c
 8007af0:	08008e58 	.word	0x08008e58

08007af4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3b04      	subs	r3, #4
 8007b04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3b04      	subs	r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f023 0201 	bic.w	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b24:	4a0c      	ldr	r2, [pc, #48]	; (8007b58 <pxPortInitialiseStack+0x64>)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3b14      	subs	r3, #20
 8007b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b04      	subs	r3, #4
 8007b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f06f 0202 	mvn.w	r2, #2
 8007b42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3b20      	subs	r3, #32
 8007b48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	08007b5d 	.word	0x08007b5d

08007b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <prvTaskExitError+0x50>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6e:	d009      	beq.n	8007b84 <prvTaskExitError+0x28>
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	e7fe      	b.n	8007b82 <prvTaskExitError+0x26>
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b96:	bf00      	nop
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0fc      	beq.n	8007b98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	2000000c 	.word	0x2000000c

08007bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <pxCurrentTCBConst2>)
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	6808      	ldr	r0, [r1, #0]
 8007bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bba:	f380 8809 	msr	PSP, r0
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f04f 0000 	mov.w	r0, #0
 8007bc6:	f380 8811 	msr	BASEPRI, r0
 8007bca:	4770      	bx	lr
 8007bcc:	f3af 8000 	nop.w

08007bd0 <pxCurrentTCBConst2>:
 8007bd0:	20000800 	.word	0x20000800
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop

08007bd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bd8:	4808      	ldr	r0, [pc, #32]	; (8007bfc <prvPortStartFirstTask+0x24>)
 8007bda:	6800      	ldr	r0, [r0, #0]
 8007bdc:	6800      	ldr	r0, [r0, #0]
 8007bde:	f380 8808 	msr	MSP, r0
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8814 	msr	CONTROL, r0
 8007bea:	b662      	cpsie	i
 8007bec:	b661      	cpsie	f
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	df00      	svc	0
 8007bf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bfa:	bf00      	nop
 8007bfc:	e000ed08 	.word	0xe000ed08

08007c00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c06:	4b44      	ldr	r3, [pc, #272]	; (8007d18 <xPortStartScheduler+0x118>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a44      	ldr	r2, [pc, #272]	; (8007d1c <xPortStartScheduler+0x11c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d109      	bne.n	8007c24 <xPortStartScheduler+0x24>
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	e7fe      	b.n	8007c22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c24:	4b3c      	ldr	r3, [pc, #240]	; (8007d18 <xPortStartScheduler+0x118>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a3d      	ldr	r2, [pc, #244]	; (8007d20 <xPortStartScheduler+0x120>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d109      	bne.n	8007c42 <xPortStartScheduler+0x42>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e7fe      	b.n	8007c40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c42:	4b38      	ldr	r3, [pc, #224]	; (8007d24 <xPortStartScheduler+0x124>)
 8007c44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	4b30      	ldr	r3, [pc, #192]	; (8007d28 <xPortStartScheduler+0x128>)
 8007c68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c6a:	4b30      	ldr	r3, [pc, #192]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007c6c:	2207      	movs	r2, #7
 8007c6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c70:	e009      	b.n	8007c86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007c72:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	4a2c      	ldr	r2, [pc, #176]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007c7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c86:	78fb      	ldrb	r3, [r7, #3]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8e:	2b80      	cmp	r3, #128	; 0x80
 8007c90:	d0ef      	beq.n	8007c72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c92:	4b26      	ldr	r3, [pc, #152]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1c3 0307 	rsb	r3, r3, #7
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d009      	beq.n	8007cb2 <xPortStartScheduler+0xb2>
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	60bb      	str	r3, [r7, #8]
 8007cb0:	e7fe      	b.n	8007cb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cb2:	4b1e      	ldr	r3, [pc, #120]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007cba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cbc:	4b1b      	ldr	r3, [pc, #108]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cc4:	4a19      	ldr	r2, [pc, #100]	; (8007d2c <xPortStartScheduler+0x12c>)
 8007cc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cd0:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <xPortStartScheduler+0x130>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a16      	ldr	r2, [pc, #88]	; (8007d30 <xPortStartScheduler+0x130>)
 8007cd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cdc:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <xPortStartScheduler+0x130>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <xPortStartScheduler+0x130>)
 8007ce2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ce6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ce8:	f000 f8d6 	bl	8007e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cec:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <xPortStartScheduler+0x134>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cf2:	f000 f8f5 	bl	8007ee0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cf6:	4b10      	ldr	r3, [pc, #64]	; (8007d38 <xPortStartScheduler+0x138>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a0f      	ldr	r2, [pc, #60]	; (8007d38 <xPortStartScheduler+0x138>)
 8007cfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d02:	f7ff ff69 	bl	8007bd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d06:	f7fe ff5f 	bl	8006bc8 <vTaskSwitchContext>
	prvTaskExitError();
 8007d0a:	f7ff ff27 	bl	8007b5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed00 	.word	0xe000ed00
 8007d1c:	410fc271 	.word	0x410fc271
 8007d20:	410fc270 	.word	0x410fc270
 8007d24:	e000e400 	.word	0xe000e400
 8007d28:	20000e2c 	.word	0x20000e2c
 8007d2c:	20000e30 	.word	0x20000e30
 8007d30:	e000ed20 	.word	0xe000ed20
 8007d34:	2000000c 	.word	0x2000000c
 8007d38:	e000ef34 	.word	0xe000ef34

08007d3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d54:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <vPortEnterCritical+0x54>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4a0d      	ldr	r2, [pc, #52]	; (8007d90 <vPortEnterCritical+0x54>)
 8007d5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d5e:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <vPortEnterCritical+0x54>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d10e      	bne.n	8007d84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <vPortEnterCritical+0x58>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d009      	beq.n	8007d84 <vPortEnterCritical+0x48>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	e7fe      	b.n	8007d82 <vPortEnterCritical+0x46>
	}
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d9e:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <vPortExitCritical+0x4c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <vPortExitCritical+0x22>
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	607b      	str	r3, [r7, #4]
 8007db8:	e7fe      	b.n	8007db8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007dba:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <vPortExitCritical+0x4c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <vPortExitCritical+0x4c>)
 8007dc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <vPortExitCritical+0x4c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <vPortExitCritical+0x3e>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	2000000c 	.word	0x2000000c
	...

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e14:	f380 8811 	msr	BASEPRI, r0
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f7fe fed2 	bl	8006bc8 <vTaskSwitchContext>
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f380 8811 	msr	BASEPRI, r0
 8007e2c:	bc09      	pop	{r0, r3}
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6808      	ldr	r0, [r1, #0]
 8007e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e36:	f01e 0f10 	tst.w	lr, #16
 8007e3a:	bf08      	it	eq
 8007e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e40:	f380 8809 	msr	PSP, r0
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst>:
 8007e50:	20000800 	.word	0x20000800
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e70:	f7fe fdf2 	bl	8006a58 <xTaskIncrementTick>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <SysTick_Handler+0x3c>)
 8007e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	2300      	movs	r3, #0
 8007e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	e000ed04 	.word	0xe000ed04

08007e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <vPortSetupTimerInterrupt+0x34>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea2:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <vPortSetupTimerInterrupt+0x38>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <vPortSetupTimerInterrupt+0x3c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <vPortSetupTimerInterrupt+0x40>)
 8007eae:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb2:	099b      	lsrs	r3, r3, #6
 8007eb4:	4a09      	ldr	r2, [pc, #36]	; (8007edc <vPortSetupTimerInterrupt+0x44>)
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <vPortSetupTimerInterrupt+0x34>)
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	601a      	str	r2, [r3, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	e000e010 	.word	0xe000e010
 8007ed0:	e000e018 	.word	0xe000e018
 8007ed4:	20000000 	.word	0x20000000
 8007ed8:	10624dd3 	.word	0x10624dd3
 8007edc:	e000e014 	.word	0xe000e014

08007ee0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ef0 <vPortEnableVFP+0x10>
 8007ee4:	6801      	ldr	r1, [r0, #0]
 8007ee6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eea:	6001      	str	r1, [r0, #0]
 8007eec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007eee:	bf00      	nop
 8007ef0:	e000ed88 	.word	0xe000ed88

08007ef4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007efa:	f3ef 8305 	mrs	r3, IPSR
 8007efe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d913      	bls.n	8007f2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f06:	4a16      	ldr	r2, [pc, #88]	; (8007f60 <vPortValidateInterruptPriority+0x6c>)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f10:	4b14      	ldr	r3, [pc, #80]	; (8007f64 <vPortValidateInterruptPriority+0x70>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	7afa      	ldrb	r2, [r7, #11]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d209      	bcs.n	8007f2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	e7fe      	b.n	8007f2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <vPortValidateInterruptPriority+0x74>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f36:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <vPortValidateInterruptPriority+0x78>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d909      	bls.n	8007f52 <vPortValidateInterruptPriority+0x5e>
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	e7fe      	b.n	8007f50 <vPortValidateInterruptPriority+0x5c>
	}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	e000e3f0 	.word	0xe000e3f0
 8007f64:	20000e2c 	.word	0x20000e2c
 8007f68:	e000ed0c 	.word	0xe000ed0c
 8007f6c:	20000e30 	.word	0x20000e30

08007f70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08a      	sub	sp, #40	; 0x28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f7c:	f7fe fcb2 	bl	80068e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f80:	4b57      	ldr	r3, [pc, #348]	; (80080e0 <pvPortMalloc+0x170>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f88:	f000 f90c 	bl	80081a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f8c:	4b55      	ldr	r3, [pc, #340]	; (80080e4 <pvPortMalloc+0x174>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f040 808c 	bne.w	80080b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01c      	beq.n	8007fda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d013      	beq.n	8007fda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f023 0307 	bic.w	r3, r3, #7
 8007fb8:	3308      	adds	r3, #8
 8007fba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <pvPortMalloc+0x6a>
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e7fe      	b.n	8007fd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d068      	beq.n	80080b2 <pvPortMalloc+0x142>
 8007fe0:	4b41      	ldr	r3, [pc, #260]	; (80080e8 <pvPortMalloc+0x178>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d863      	bhi.n	80080b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fea:	4b40      	ldr	r3, [pc, #256]	; (80080ec <pvPortMalloc+0x17c>)
 8007fec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fee:	4b3f      	ldr	r3, [pc, #252]	; (80080ec <pvPortMalloc+0x17c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ff4:	e004      	b.n	8008000 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	429a      	cmp	r2, r3
 8008008:	d903      	bls.n	8008012 <pvPortMalloc+0xa2>
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f1      	bne.n	8007ff6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008012:	4b33      	ldr	r3, [pc, #204]	; (80080e0 <pvPortMalloc+0x170>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008018:	429a      	cmp	r2, r3
 800801a:	d04a      	beq.n	80080b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2208      	movs	r2, #8
 8008022:	4413      	add	r3, r2
 8008024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	1ad2      	subs	r2, r2, r3
 8008036:	2308      	movs	r3, #8
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	429a      	cmp	r2, r3
 800803c:	d91e      	bls.n	800807c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800803e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4413      	add	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	2b00      	cmp	r3, #0
 800804e:	d009      	beq.n	8008064 <pvPortMalloc+0xf4>
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	e7fe      	b.n	8008062 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	1ad2      	subs	r2, r2, r3
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008076:	69b8      	ldr	r0, [r7, #24]
 8008078:	f000 f8f6 	bl	8008268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800807c:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <pvPortMalloc+0x178>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	4a18      	ldr	r2, [pc, #96]	; (80080e8 <pvPortMalloc+0x178>)
 8008088:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800808a:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <pvPortMalloc+0x178>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4b18      	ldr	r3, [pc, #96]	; (80080f0 <pvPortMalloc+0x180>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d203      	bcs.n	800809e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008096:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <pvPortMalloc+0x178>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <pvPortMalloc+0x180>)
 800809c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <pvPortMalloc+0x174>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080b2:	f7fe fc25 	bl	8006900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <pvPortMalloc+0x164>
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e7fe      	b.n	80080d2 <pvPortMalloc+0x162>
	return pvReturn;
 80080d4:	69fb      	ldr	r3, [r7, #28]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3728      	adds	r7, #40	; 0x28
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200048d4 	.word	0x200048d4
 80080e4:	200048e0 	.word	0x200048e0
 80080e8:	200048d8 	.word	0x200048d8
 80080ec:	200048cc 	.word	0x200048cc
 80080f0:	200048dc 	.word	0x200048dc

080080f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d046      	beq.n	8008194 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008106:	2308      	movs	r3, #8
 8008108:	425b      	negs	r3, r3
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4413      	add	r3, r2
 800810e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	4b20      	ldr	r3, [pc, #128]	; (800819c <vPortFree+0xa8>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4013      	ands	r3, r2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <vPortFree+0x42>
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e7fe      	b.n	8008134 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <vPortFree+0x5e>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60bb      	str	r3, [r7, #8]
 8008150:	e7fe      	b.n	8008150 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	4b11      	ldr	r3, [pc, #68]	; (800819c <vPortFree+0xa8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4013      	ands	r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d019      	beq.n	8008194 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d115      	bne.n	8008194 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	4b0b      	ldr	r3, [pc, #44]	; (800819c <vPortFree+0xa8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	43db      	mvns	r3, r3
 8008172:	401a      	ands	r2, r3
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008178:	f7fe fbb4 	bl	80068e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <vPortFree+0xac>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4413      	add	r3, r2
 8008186:	4a06      	ldr	r2, [pc, #24]	; (80081a0 <vPortFree+0xac>)
 8008188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800818a:	6938      	ldr	r0, [r7, #16]
 800818c:	f000 f86c 	bl	8008268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008190:	f7fe fbb6 	bl	8006900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008194:	bf00      	nop
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	200048e0 	.word	0x200048e0
 80081a0:	200048d8 	.word	0x200048d8

080081a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081aa:	f643 2398 	movw	r3, #15000	; 0x3a98
 80081ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081b0:	4b27      	ldr	r3, [pc, #156]	; (8008250 <prvHeapInit+0xac>)
 80081b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00c      	beq.n	80081d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3307      	adds	r3, #7
 80081c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0307 	bic.w	r3, r3, #7
 80081ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	4a1f      	ldr	r2, [pc, #124]	; (8008250 <prvHeapInit+0xac>)
 80081d4:	4413      	add	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <prvHeapInit+0xb0>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <prvHeapInit+0xb0>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081f0:	2208      	movs	r2, #8
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0307 	bic.w	r3, r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4a15      	ldr	r2, [pc, #84]	; (8008258 <prvHeapInit+0xb4>)
 8008204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <prvHeapInit+0xb4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800820e:	4b12      	ldr	r3, [pc, #72]	; (8008258 <prvHeapInit+0xb4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	1ad2      	subs	r2, r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <prvHeapInit+0xb4>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4a0a      	ldr	r2, [pc, #40]	; (800825c <prvHeapInit+0xb8>)
 8008232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4a09      	ldr	r2, [pc, #36]	; (8008260 <prvHeapInit+0xbc>)
 800823a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <prvHeapInit+0xc0>)
 800823e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008242:	601a      	str	r2, [r3, #0]
}
 8008244:	bf00      	nop
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	20000e34 	.word	0x20000e34
 8008254:	200048cc 	.word	0x200048cc
 8008258:	200048d4 	.word	0x200048d4
 800825c:	200048dc 	.word	0x200048dc
 8008260:	200048d8 	.word	0x200048d8
 8008264:	200048e0 	.word	0x200048e0

08008268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008270:	4b28      	ldr	r3, [pc, #160]	; (8008314 <prvInsertBlockIntoFreeList+0xac>)
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e002      	b.n	800827c <prvInsertBlockIntoFreeList+0x14>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d8f7      	bhi.n	8008276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4413      	add	r3, r2
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	d108      	bne.n	80082aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	441a      	add	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d118      	bne.n	80082f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <prvInsertBlockIntoFreeList+0xb0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d00d      	beq.n	80082e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	441a      	add	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e008      	b.n	80082f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <prvInsertBlockIntoFreeList+0xb0>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	e003      	b.n	80082f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d002      	beq.n	8008306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	200048cc 	.word	0x200048cc
 8008318:	200048d4 	.word	0x200048d4

0800831c <__errno>:
 800831c:	4b01      	ldr	r3, [pc, #4]	; (8008324 <__errno+0x8>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000010 	.word	0x20000010

08008328 <__libc_init_array>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4e0d      	ldr	r6, [pc, #52]	; (8008360 <__libc_init_array+0x38>)
 800832c:	4c0d      	ldr	r4, [pc, #52]	; (8008364 <__libc_init_array+0x3c>)
 800832e:	1ba4      	subs	r4, r4, r6
 8008330:	10a4      	asrs	r4, r4, #2
 8008332:	2500      	movs	r5, #0
 8008334:	42a5      	cmp	r5, r4
 8008336:	d109      	bne.n	800834c <__libc_init_array+0x24>
 8008338:	4e0b      	ldr	r6, [pc, #44]	; (8008368 <__libc_init_array+0x40>)
 800833a:	4c0c      	ldr	r4, [pc, #48]	; (800836c <__libc_init_array+0x44>)
 800833c:	f000 fc28 	bl	8008b90 <_init>
 8008340:	1ba4      	subs	r4, r4, r6
 8008342:	10a4      	asrs	r4, r4, #2
 8008344:	2500      	movs	r5, #0
 8008346:	42a5      	cmp	r5, r4
 8008348:	d105      	bne.n	8008356 <__libc_init_array+0x2e>
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008350:	4798      	blx	r3
 8008352:	3501      	adds	r5, #1
 8008354:	e7ee      	b.n	8008334 <__libc_init_array+0xc>
 8008356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800835a:	4798      	blx	r3
 800835c:	3501      	adds	r5, #1
 800835e:	e7f2      	b.n	8008346 <__libc_init_array+0x1e>
 8008360:	08008fa4 	.word	0x08008fa4
 8008364:	08008fa4 	.word	0x08008fa4
 8008368:	08008fa4 	.word	0x08008fa4
 800836c:	08008fa8 	.word	0x08008fa8

08008370 <memcpy>:
 8008370:	b510      	push	{r4, lr}
 8008372:	1e43      	subs	r3, r0, #1
 8008374:	440a      	add	r2, r1
 8008376:	4291      	cmp	r1, r2
 8008378:	d100      	bne.n	800837c <memcpy+0xc>
 800837a:	bd10      	pop	{r4, pc}
 800837c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008380:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008384:	e7f7      	b.n	8008376 <memcpy+0x6>

08008386 <memset>:
 8008386:	4402      	add	r2, r0
 8008388:	4603      	mov	r3, r0
 800838a:	4293      	cmp	r3, r2
 800838c:	d100      	bne.n	8008390 <memset+0xa>
 800838e:	4770      	bx	lr
 8008390:	f803 1b01 	strb.w	r1, [r3], #1
 8008394:	e7f9      	b.n	800838a <memset+0x4>
	...

08008398 <siprintf>:
 8008398:	b40e      	push	{r1, r2, r3}
 800839a:	b500      	push	{lr}
 800839c:	b09c      	sub	sp, #112	; 0x70
 800839e:	ab1d      	add	r3, sp, #116	; 0x74
 80083a0:	9002      	str	r0, [sp, #8]
 80083a2:	9006      	str	r0, [sp, #24]
 80083a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083a8:	4809      	ldr	r0, [pc, #36]	; (80083d0 <siprintf+0x38>)
 80083aa:	9107      	str	r1, [sp, #28]
 80083ac:	9104      	str	r1, [sp, #16]
 80083ae:	4909      	ldr	r1, [pc, #36]	; (80083d4 <siprintf+0x3c>)
 80083b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b4:	9105      	str	r1, [sp, #20]
 80083b6:	6800      	ldr	r0, [r0, #0]
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	a902      	add	r1, sp, #8
 80083bc:	f000 f866 	bl	800848c <_svfiprintf_r>
 80083c0:	9b02      	ldr	r3, [sp, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	701a      	strb	r2, [r3, #0]
 80083c6:	b01c      	add	sp, #112	; 0x70
 80083c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083cc:	b003      	add	sp, #12
 80083ce:	4770      	bx	lr
 80083d0:	20000010 	.word	0x20000010
 80083d4:	ffff0208 	.word	0xffff0208

080083d8 <__ssputs_r>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	688e      	ldr	r6, [r1, #8]
 80083de:	429e      	cmp	r6, r3
 80083e0:	4682      	mov	sl, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	4690      	mov	r8, r2
 80083e6:	4699      	mov	r9, r3
 80083e8:	d837      	bhi.n	800845a <__ssputs_r+0x82>
 80083ea:	898a      	ldrh	r2, [r1, #12]
 80083ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083f0:	d031      	beq.n	8008456 <__ssputs_r+0x7e>
 80083f2:	6825      	ldr	r5, [r4, #0]
 80083f4:	6909      	ldr	r1, [r1, #16]
 80083f6:	1a6f      	subs	r7, r5, r1
 80083f8:	6965      	ldr	r5, [r4, #20]
 80083fa:	2302      	movs	r3, #2
 80083fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008400:	fb95 f5f3 	sdiv	r5, r5, r3
 8008404:	f109 0301 	add.w	r3, r9, #1
 8008408:	443b      	add	r3, r7
 800840a:	429d      	cmp	r5, r3
 800840c:	bf38      	it	cc
 800840e:	461d      	movcc	r5, r3
 8008410:	0553      	lsls	r3, r2, #21
 8008412:	d530      	bpl.n	8008476 <__ssputs_r+0x9e>
 8008414:	4629      	mov	r1, r5
 8008416:	f000 fb21 	bl	8008a5c <_malloc_r>
 800841a:	4606      	mov	r6, r0
 800841c:	b950      	cbnz	r0, 8008434 <__ssputs_r+0x5c>
 800841e:	230c      	movs	r3, #12
 8008420:	f8ca 3000 	str.w	r3, [sl]
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842a:	81a3      	strh	r3, [r4, #12]
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008434:	463a      	mov	r2, r7
 8008436:	6921      	ldr	r1, [r4, #16]
 8008438:	f7ff ff9a 	bl	8008370 <memcpy>
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	6126      	str	r6, [r4, #16]
 800844a:	6165      	str	r5, [r4, #20]
 800844c:	443e      	add	r6, r7
 800844e:	1bed      	subs	r5, r5, r7
 8008450:	6026      	str	r6, [r4, #0]
 8008452:	60a5      	str	r5, [r4, #8]
 8008454:	464e      	mov	r6, r9
 8008456:	454e      	cmp	r6, r9
 8008458:	d900      	bls.n	800845c <__ssputs_r+0x84>
 800845a:	464e      	mov	r6, r9
 800845c:	4632      	mov	r2, r6
 800845e:	4641      	mov	r1, r8
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	f000 fa93 	bl	800898c <memmove>
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	1b9b      	subs	r3, r3, r6
 800846a:	60a3      	str	r3, [r4, #8]
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	441e      	add	r6, r3
 8008470:	6026      	str	r6, [r4, #0]
 8008472:	2000      	movs	r0, #0
 8008474:	e7dc      	b.n	8008430 <__ssputs_r+0x58>
 8008476:	462a      	mov	r2, r5
 8008478:	f000 fb4a 	bl	8008b10 <_realloc_r>
 800847c:	4606      	mov	r6, r0
 800847e:	2800      	cmp	r0, #0
 8008480:	d1e2      	bne.n	8008448 <__ssputs_r+0x70>
 8008482:	6921      	ldr	r1, [r4, #16]
 8008484:	4650      	mov	r0, sl
 8008486:	f000 fa9b 	bl	80089c0 <_free_r>
 800848a:	e7c8      	b.n	800841e <__ssputs_r+0x46>

0800848c <_svfiprintf_r>:
 800848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	461d      	mov	r5, r3
 8008492:	898b      	ldrh	r3, [r1, #12]
 8008494:	061f      	lsls	r7, r3, #24
 8008496:	b09d      	sub	sp, #116	; 0x74
 8008498:	4680      	mov	r8, r0
 800849a:	460c      	mov	r4, r1
 800849c:	4616      	mov	r6, r2
 800849e:	d50f      	bpl.n	80084c0 <_svfiprintf_r+0x34>
 80084a0:	690b      	ldr	r3, [r1, #16]
 80084a2:	b96b      	cbnz	r3, 80084c0 <_svfiprintf_r+0x34>
 80084a4:	2140      	movs	r1, #64	; 0x40
 80084a6:	f000 fad9 	bl	8008a5c <_malloc_r>
 80084aa:	6020      	str	r0, [r4, #0]
 80084ac:	6120      	str	r0, [r4, #16]
 80084ae:	b928      	cbnz	r0, 80084bc <_svfiprintf_r+0x30>
 80084b0:	230c      	movs	r3, #12
 80084b2:	f8c8 3000 	str.w	r3, [r8]
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ba:	e0c8      	b.n	800864e <_svfiprintf_r+0x1c2>
 80084bc:	2340      	movs	r3, #64	; 0x40
 80084be:	6163      	str	r3, [r4, #20]
 80084c0:	2300      	movs	r3, #0
 80084c2:	9309      	str	r3, [sp, #36]	; 0x24
 80084c4:	2320      	movs	r3, #32
 80084c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ca:	2330      	movs	r3, #48	; 0x30
 80084cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084d0:	9503      	str	r5, [sp, #12]
 80084d2:	f04f 0b01 	mov.w	fp, #1
 80084d6:	4637      	mov	r7, r6
 80084d8:	463d      	mov	r5, r7
 80084da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084de:	b10b      	cbz	r3, 80084e4 <_svfiprintf_r+0x58>
 80084e0:	2b25      	cmp	r3, #37	; 0x25
 80084e2:	d13e      	bne.n	8008562 <_svfiprintf_r+0xd6>
 80084e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80084e8:	d00b      	beq.n	8008502 <_svfiprintf_r+0x76>
 80084ea:	4653      	mov	r3, sl
 80084ec:	4632      	mov	r2, r6
 80084ee:	4621      	mov	r1, r4
 80084f0:	4640      	mov	r0, r8
 80084f2:	f7ff ff71 	bl	80083d8 <__ssputs_r>
 80084f6:	3001      	adds	r0, #1
 80084f8:	f000 80a4 	beq.w	8008644 <_svfiprintf_r+0x1b8>
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	4453      	add	r3, sl
 8008500:	9309      	str	r3, [sp, #36]	; 0x24
 8008502:	783b      	ldrb	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 809d 	beq.w	8008644 <_svfiprintf_r+0x1b8>
 800850a:	2300      	movs	r3, #0
 800850c:	f04f 32ff 	mov.w	r2, #4294967295
 8008510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800851c:	931a      	str	r3, [sp, #104]	; 0x68
 800851e:	462f      	mov	r7, r5
 8008520:	2205      	movs	r2, #5
 8008522:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008526:	4850      	ldr	r0, [pc, #320]	; (8008668 <_svfiprintf_r+0x1dc>)
 8008528:	f7f7 fe5a 	bl	80001e0 <memchr>
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	b9d0      	cbnz	r0, 8008566 <_svfiprintf_r+0xda>
 8008530:	06d9      	lsls	r1, r3, #27
 8008532:	bf44      	itt	mi
 8008534:	2220      	movmi	r2, #32
 8008536:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800853a:	071a      	lsls	r2, r3, #28
 800853c:	bf44      	itt	mi
 800853e:	222b      	movmi	r2, #43	; 0x2b
 8008540:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008544:	782a      	ldrb	r2, [r5, #0]
 8008546:	2a2a      	cmp	r2, #42	; 0x2a
 8008548:	d015      	beq.n	8008576 <_svfiprintf_r+0xea>
 800854a:	9a07      	ldr	r2, [sp, #28]
 800854c:	462f      	mov	r7, r5
 800854e:	2000      	movs	r0, #0
 8008550:	250a      	movs	r5, #10
 8008552:	4639      	mov	r1, r7
 8008554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008558:	3b30      	subs	r3, #48	; 0x30
 800855a:	2b09      	cmp	r3, #9
 800855c:	d94d      	bls.n	80085fa <_svfiprintf_r+0x16e>
 800855e:	b1b8      	cbz	r0, 8008590 <_svfiprintf_r+0x104>
 8008560:	e00f      	b.n	8008582 <_svfiprintf_r+0xf6>
 8008562:	462f      	mov	r7, r5
 8008564:	e7b8      	b.n	80084d8 <_svfiprintf_r+0x4c>
 8008566:	4a40      	ldr	r2, [pc, #256]	; (8008668 <_svfiprintf_r+0x1dc>)
 8008568:	1a80      	subs	r0, r0, r2
 800856a:	fa0b f000 	lsl.w	r0, fp, r0
 800856e:	4318      	orrs	r0, r3
 8008570:	9004      	str	r0, [sp, #16]
 8008572:	463d      	mov	r5, r7
 8008574:	e7d3      	b.n	800851e <_svfiprintf_r+0x92>
 8008576:	9a03      	ldr	r2, [sp, #12]
 8008578:	1d11      	adds	r1, r2, #4
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	9103      	str	r1, [sp, #12]
 800857e:	2a00      	cmp	r2, #0
 8008580:	db01      	blt.n	8008586 <_svfiprintf_r+0xfa>
 8008582:	9207      	str	r2, [sp, #28]
 8008584:	e004      	b.n	8008590 <_svfiprintf_r+0x104>
 8008586:	4252      	negs	r2, r2
 8008588:	f043 0302 	orr.w	r3, r3, #2
 800858c:	9207      	str	r2, [sp, #28]
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	783b      	ldrb	r3, [r7, #0]
 8008592:	2b2e      	cmp	r3, #46	; 0x2e
 8008594:	d10c      	bne.n	80085b0 <_svfiprintf_r+0x124>
 8008596:	787b      	ldrb	r3, [r7, #1]
 8008598:	2b2a      	cmp	r3, #42	; 0x2a
 800859a:	d133      	bne.n	8008604 <_svfiprintf_r+0x178>
 800859c:	9b03      	ldr	r3, [sp, #12]
 800859e:	1d1a      	adds	r2, r3, #4
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	9203      	str	r2, [sp, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bfb8      	it	lt
 80085a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085ac:	3702      	adds	r7, #2
 80085ae:	9305      	str	r3, [sp, #20]
 80085b0:	4d2e      	ldr	r5, [pc, #184]	; (800866c <_svfiprintf_r+0x1e0>)
 80085b2:	7839      	ldrb	r1, [r7, #0]
 80085b4:	2203      	movs	r2, #3
 80085b6:	4628      	mov	r0, r5
 80085b8:	f7f7 fe12 	bl	80001e0 <memchr>
 80085bc:	b138      	cbz	r0, 80085ce <_svfiprintf_r+0x142>
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	1b40      	subs	r0, r0, r5
 80085c2:	fa03 f000 	lsl.w	r0, r3, r0
 80085c6:	9b04      	ldr	r3, [sp, #16]
 80085c8:	4303      	orrs	r3, r0
 80085ca:	3701      	adds	r7, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	7839      	ldrb	r1, [r7, #0]
 80085d0:	4827      	ldr	r0, [pc, #156]	; (8008670 <_svfiprintf_r+0x1e4>)
 80085d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085d6:	2206      	movs	r2, #6
 80085d8:	1c7e      	adds	r6, r7, #1
 80085da:	f7f7 fe01 	bl	80001e0 <memchr>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d038      	beq.n	8008654 <_svfiprintf_r+0x1c8>
 80085e2:	4b24      	ldr	r3, [pc, #144]	; (8008674 <_svfiprintf_r+0x1e8>)
 80085e4:	bb13      	cbnz	r3, 800862c <_svfiprintf_r+0x1a0>
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	3307      	adds	r3, #7
 80085ea:	f023 0307 	bic.w	r3, r3, #7
 80085ee:	3308      	adds	r3, #8
 80085f0:	9303      	str	r3, [sp, #12]
 80085f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f4:	444b      	add	r3, r9
 80085f6:	9309      	str	r3, [sp, #36]	; 0x24
 80085f8:	e76d      	b.n	80084d6 <_svfiprintf_r+0x4a>
 80085fa:	fb05 3202 	mla	r2, r5, r2, r3
 80085fe:	2001      	movs	r0, #1
 8008600:	460f      	mov	r7, r1
 8008602:	e7a6      	b.n	8008552 <_svfiprintf_r+0xc6>
 8008604:	2300      	movs	r3, #0
 8008606:	3701      	adds	r7, #1
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	4619      	mov	r1, r3
 800860c:	250a      	movs	r5, #10
 800860e:	4638      	mov	r0, r7
 8008610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008614:	3a30      	subs	r2, #48	; 0x30
 8008616:	2a09      	cmp	r2, #9
 8008618:	d903      	bls.n	8008622 <_svfiprintf_r+0x196>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0c8      	beq.n	80085b0 <_svfiprintf_r+0x124>
 800861e:	9105      	str	r1, [sp, #20]
 8008620:	e7c6      	b.n	80085b0 <_svfiprintf_r+0x124>
 8008622:	fb05 2101 	mla	r1, r5, r1, r2
 8008626:	2301      	movs	r3, #1
 8008628:	4607      	mov	r7, r0
 800862a:	e7f0      	b.n	800860e <_svfiprintf_r+0x182>
 800862c:	ab03      	add	r3, sp, #12
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4622      	mov	r2, r4
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <_svfiprintf_r+0x1ec>)
 8008634:	a904      	add	r1, sp, #16
 8008636:	4640      	mov	r0, r8
 8008638:	f3af 8000 	nop.w
 800863c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008640:	4681      	mov	r9, r0
 8008642:	d1d6      	bne.n	80085f2 <_svfiprintf_r+0x166>
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	065b      	lsls	r3, r3, #25
 8008648:	f53f af35 	bmi.w	80084b6 <_svfiprintf_r+0x2a>
 800864c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800864e:	b01d      	add	sp, #116	; 0x74
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008654:	ab03      	add	r3, sp, #12
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	4622      	mov	r2, r4
 800865a:	4b07      	ldr	r3, [pc, #28]	; (8008678 <_svfiprintf_r+0x1ec>)
 800865c:	a904      	add	r1, sp, #16
 800865e:	4640      	mov	r0, r8
 8008660:	f000 f882 	bl	8008768 <_printf_i>
 8008664:	e7ea      	b.n	800863c <_svfiprintf_r+0x1b0>
 8008666:	bf00      	nop
 8008668:	08008f68 	.word	0x08008f68
 800866c:	08008f6e 	.word	0x08008f6e
 8008670:	08008f72 	.word	0x08008f72
 8008674:	00000000 	.word	0x00000000
 8008678:	080083d9 	.word	0x080083d9

0800867c <_printf_common>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	4691      	mov	r9, r2
 8008682:	461f      	mov	r7, r3
 8008684:	688a      	ldr	r2, [r1, #8]
 8008686:	690b      	ldr	r3, [r1, #16]
 8008688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800868c:	4293      	cmp	r3, r2
 800868e:	bfb8      	it	lt
 8008690:	4613      	movlt	r3, r2
 8008692:	f8c9 3000 	str.w	r3, [r9]
 8008696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800869a:	4606      	mov	r6, r0
 800869c:	460c      	mov	r4, r1
 800869e:	b112      	cbz	r2, 80086a6 <_printf_common+0x2a>
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c9 3000 	str.w	r3, [r9]
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	0699      	lsls	r1, r3, #26
 80086aa:	bf42      	ittt	mi
 80086ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80086b0:	3302      	addmi	r3, #2
 80086b2:	f8c9 3000 	strmi.w	r3, [r9]
 80086b6:	6825      	ldr	r5, [r4, #0]
 80086b8:	f015 0506 	ands.w	r5, r5, #6
 80086bc:	d107      	bne.n	80086ce <_printf_common+0x52>
 80086be:	f104 0a19 	add.w	sl, r4, #25
 80086c2:	68e3      	ldr	r3, [r4, #12]
 80086c4:	f8d9 2000 	ldr.w	r2, [r9]
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	42ab      	cmp	r3, r5
 80086cc:	dc28      	bgt.n	8008720 <_printf_common+0xa4>
 80086ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	3300      	adds	r3, #0
 80086d6:	bf18      	it	ne
 80086d8:	2301      	movne	r3, #1
 80086da:	0692      	lsls	r2, r2, #26
 80086dc:	d42d      	bmi.n	800873a <_printf_common+0xbe>
 80086de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086e2:	4639      	mov	r1, r7
 80086e4:	4630      	mov	r0, r6
 80086e6:	47c0      	blx	r8
 80086e8:	3001      	adds	r0, #1
 80086ea:	d020      	beq.n	800872e <_printf_common+0xb2>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	68e5      	ldr	r5, [r4, #12]
 80086f0:	f8d9 2000 	ldr.w	r2, [r9]
 80086f4:	f003 0306 	and.w	r3, r3, #6
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	bf08      	it	eq
 80086fc:	1aad      	subeq	r5, r5, r2
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	6922      	ldr	r2, [r4, #16]
 8008702:	bf0c      	ite	eq
 8008704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008708:	2500      	movne	r5, #0
 800870a:	4293      	cmp	r3, r2
 800870c:	bfc4      	itt	gt
 800870e:	1a9b      	subgt	r3, r3, r2
 8008710:	18ed      	addgt	r5, r5, r3
 8008712:	f04f 0900 	mov.w	r9, #0
 8008716:	341a      	adds	r4, #26
 8008718:	454d      	cmp	r5, r9
 800871a:	d11a      	bne.n	8008752 <_printf_common+0xd6>
 800871c:	2000      	movs	r0, #0
 800871e:	e008      	b.n	8008732 <_printf_common+0xb6>
 8008720:	2301      	movs	r3, #1
 8008722:	4652      	mov	r2, sl
 8008724:	4639      	mov	r1, r7
 8008726:	4630      	mov	r0, r6
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d103      	bne.n	8008736 <_printf_common+0xba>
 800872e:	f04f 30ff 	mov.w	r0, #4294967295
 8008732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008736:	3501      	adds	r5, #1
 8008738:	e7c3      	b.n	80086c2 <_printf_common+0x46>
 800873a:	18e1      	adds	r1, r4, r3
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	2030      	movs	r0, #48	; 0x30
 8008740:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008744:	4422      	add	r2, r4
 8008746:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800874a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800874e:	3302      	adds	r3, #2
 8008750:	e7c5      	b.n	80086de <_printf_common+0x62>
 8008752:	2301      	movs	r3, #1
 8008754:	4622      	mov	r2, r4
 8008756:	4639      	mov	r1, r7
 8008758:	4630      	mov	r0, r6
 800875a:	47c0      	blx	r8
 800875c:	3001      	adds	r0, #1
 800875e:	d0e6      	beq.n	800872e <_printf_common+0xb2>
 8008760:	f109 0901 	add.w	r9, r9, #1
 8008764:	e7d8      	b.n	8008718 <_printf_common+0x9c>
	...

08008768 <_printf_i>:
 8008768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800876c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008770:	460c      	mov	r4, r1
 8008772:	7e09      	ldrb	r1, [r1, #24]
 8008774:	b085      	sub	sp, #20
 8008776:	296e      	cmp	r1, #110	; 0x6e
 8008778:	4617      	mov	r7, r2
 800877a:	4606      	mov	r6, r0
 800877c:	4698      	mov	r8, r3
 800877e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008780:	f000 80b3 	beq.w	80088ea <_printf_i+0x182>
 8008784:	d822      	bhi.n	80087cc <_printf_i+0x64>
 8008786:	2963      	cmp	r1, #99	; 0x63
 8008788:	d036      	beq.n	80087f8 <_printf_i+0x90>
 800878a:	d80a      	bhi.n	80087a2 <_printf_i+0x3a>
 800878c:	2900      	cmp	r1, #0
 800878e:	f000 80b9 	beq.w	8008904 <_printf_i+0x19c>
 8008792:	2958      	cmp	r1, #88	; 0x58
 8008794:	f000 8083 	beq.w	800889e <_printf_i+0x136>
 8008798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800879c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80087a0:	e032      	b.n	8008808 <_printf_i+0xa0>
 80087a2:	2964      	cmp	r1, #100	; 0x64
 80087a4:	d001      	beq.n	80087aa <_printf_i+0x42>
 80087a6:	2969      	cmp	r1, #105	; 0x69
 80087a8:	d1f6      	bne.n	8008798 <_printf_i+0x30>
 80087aa:	6820      	ldr	r0, [r4, #0]
 80087ac:	6813      	ldr	r3, [r2, #0]
 80087ae:	0605      	lsls	r5, r0, #24
 80087b0:	f103 0104 	add.w	r1, r3, #4
 80087b4:	d52a      	bpl.n	800880c <_printf_i+0xa4>
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6011      	str	r1, [r2, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da03      	bge.n	80087c6 <_printf_i+0x5e>
 80087be:	222d      	movs	r2, #45	; 0x2d
 80087c0:	425b      	negs	r3, r3
 80087c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80087c6:	486f      	ldr	r0, [pc, #444]	; (8008984 <_printf_i+0x21c>)
 80087c8:	220a      	movs	r2, #10
 80087ca:	e039      	b.n	8008840 <_printf_i+0xd8>
 80087cc:	2973      	cmp	r1, #115	; 0x73
 80087ce:	f000 809d 	beq.w	800890c <_printf_i+0x1a4>
 80087d2:	d808      	bhi.n	80087e6 <_printf_i+0x7e>
 80087d4:	296f      	cmp	r1, #111	; 0x6f
 80087d6:	d020      	beq.n	800881a <_printf_i+0xb2>
 80087d8:	2970      	cmp	r1, #112	; 0x70
 80087da:	d1dd      	bne.n	8008798 <_printf_i+0x30>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	f043 0320 	orr.w	r3, r3, #32
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	e003      	b.n	80087ee <_printf_i+0x86>
 80087e6:	2975      	cmp	r1, #117	; 0x75
 80087e8:	d017      	beq.n	800881a <_printf_i+0xb2>
 80087ea:	2978      	cmp	r1, #120	; 0x78
 80087ec:	d1d4      	bne.n	8008798 <_printf_i+0x30>
 80087ee:	2378      	movs	r3, #120	; 0x78
 80087f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087f4:	4864      	ldr	r0, [pc, #400]	; (8008988 <_printf_i+0x220>)
 80087f6:	e055      	b.n	80088a4 <_printf_i+0x13c>
 80087f8:	6813      	ldr	r3, [r2, #0]
 80087fa:	1d19      	adds	r1, r3, #4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6011      	str	r1, [r2, #0]
 8008800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008808:	2301      	movs	r3, #1
 800880a:	e08c      	b.n	8008926 <_printf_i+0x1be>
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6011      	str	r1, [r2, #0]
 8008810:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008814:	bf18      	it	ne
 8008816:	b21b      	sxthne	r3, r3
 8008818:	e7cf      	b.n	80087ba <_printf_i+0x52>
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	6825      	ldr	r5, [r4, #0]
 800881e:	1d18      	adds	r0, r3, #4
 8008820:	6010      	str	r0, [r2, #0]
 8008822:	0628      	lsls	r0, r5, #24
 8008824:	d501      	bpl.n	800882a <_printf_i+0xc2>
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	e002      	b.n	8008830 <_printf_i+0xc8>
 800882a:	0668      	lsls	r0, r5, #25
 800882c:	d5fb      	bpl.n	8008826 <_printf_i+0xbe>
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	4854      	ldr	r0, [pc, #336]	; (8008984 <_printf_i+0x21c>)
 8008832:	296f      	cmp	r1, #111	; 0x6f
 8008834:	bf14      	ite	ne
 8008836:	220a      	movne	r2, #10
 8008838:	2208      	moveq	r2, #8
 800883a:	2100      	movs	r1, #0
 800883c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008840:	6865      	ldr	r5, [r4, #4]
 8008842:	60a5      	str	r5, [r4, #8]
 8008844:	2d00      	cmp	r5, #0
 8008846:	f2c0 8095 	blt.w	8008974 <_printf_i+0x20c>
 800884a:	6821      	ldr	r1, [r4, #0]
 800884c:	f021 0104 	bic.w	r1, r1, #4
 8008850:	6021      	str	r1, [r4, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d13d      	bne.n	80088d2 <_printf_i+0x16a>
 8008856:	2d00      	cmp	r5, #0
 8008858:	f040 808e 	bne.w	8008978 <_printf_i+0x210>
 800885c:	4665      	mov	r5, ip
 800885e:	2a08      	cmp	r2, #8
 8008860:	d10b      	bne.n	800887a <_printf_i+0x112>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	07db      	lsls	r3, r3, #31
 8008866:	d508      	bpl.n	800887a <_printf_i+0x112>
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	6862      	ldr	r2, [r4, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	bfde      	ittt	le
 8008870:	2330      	movle	r3, #48	; 0x30
 8008872:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008876:	f105 35ff 	addle.w	r5, r5, #4294967295
 800887a:	ebac 0305 	sub.w	r3, ip, r5
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	f8cd 8000 	str.w	r8, [sp]
 8008884:	463b      	mov	r3, r7
 8008886:	aa03      	add	r2, sp, #12
 8008888:	4621      	mov	r1, r4
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff fef6 	bl	800867c <_printf_common>
 8008890:	3001      	adds	r0, #1
 8008892:	d14d      	bne.n	8008930 <_printf_i+0x1c8>
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	b005      	add	sp, #20
 800889a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800889e:	4839      	ldr	r0, [pc, #228]	; (8008984 <_printf_i+0x21c>)
 80088a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80088a4:	6813      	ldr	r3, [r2, #0]
 80088a6:	6821      	ldr	r1, [r4, #0]
 80088a8:	1d1d      	adds	r5, r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6015      	str	r5, [r2, #0]
 80088ae:	060a      	lsls	r2, r1, #24
 80088b0:	d50b      	bpl.n	80088ca <_printf_i+0x162>
 80088b2:	07ca      	lsls	r2, r1, #31
 80088b4:	bf44      	itt	mi
 80088b6:	f041 0120 	orrmi.w	r1, r1, #32
 80088ba:	6021      	strmi	r1, [r4, #0]
 80088bc:	b91b      	cbnz	r3, 80088c6 <_printf_i+0x15e>
 80088be:	6822      	ldr	r2, [r4, #0]
 80088c0:	f022 0220 	bic.w	r2, r2, #32
 80088c4:	6022      	str	r2, [r4, #0]
 80088c6:	2210      	movs	r2, #16
 80088c8:	e7b7      	b.n	800883a <_printf_i+0xd2>
 80088ca:	064d      	lsls	r5, r1, #25
 80088cc:	bf48      	it	mi
 80088ce:	b29b      	uxthmi	r3, r3
 80088d0:	e7ef      	b.n	80088b2 <_printf_i+0x14a>
 80088d2:	4665      	mov	r5, ip
 80088d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d8:	fb02 3311 	mls	r3, r2, r1, r3
 80088dc:	5cc3      	ldrb	r3, [r0, r3]
 80088de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80088e2:	460b      	mov	r3, r1
 80088e4:	2900      	cmp	r1, #0
 80088e6:	d1f5      	bne.n	80088d4 <_printf_i+0x16c>
 80088e8:	e7b9      	b.n	800885e <_printf_i+0xf6>
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	6825      	ldr	r5, [r4, #0]
 80088ee:	6961      	ldr	r1, [r4, #20]
 80088f0:	1d18      	adds	r0, r3, #4
 80088f2:	6010      	str	r0, [r2, #0]
 80088f4:	0628      	lsls	r0, r5, #24
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	d501      	bpl.n	80088fe <_printf_i+0x196>
 80088fa:	6019      	str	r1, [r3, #0]
 80088fc:	e002      	b.n	8008904 <_printf_i+0x19c>
 80088fe:	066a      	lsls	r2, r5, #25
 8008900:	d5fb      	bpl.n	80088fa <_printf_i+0x192>
 8008902:	8019      	strh	r1, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	4665      	mov	r5, ip
 800890a:	e7b9      	b.n	8008880 <_printf_i+0x118>
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	1d19      	adds	r1, r3, #4
 8008910:	6011      	str	r1, [r2, #0]
 8008912:	681d      	ldr	r5, [r3, #0]
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	2100      	movs	r1, #0
 8008918:	4628      	mov	r0, r5
 800891a:	f7f7 fc61 	bl	80001e0 <memchr>
 800891e:	b108      	cbz	r0, 8008924 <_printf_i+0x1bc>
 8008920:	1b40      	subs	r0, r0, r5
 8008922:	6060      	str	r0, [r4, #4]
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	2300      	movs	r3, #0
 800892a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800892e:	e7a7      	b.n	8008880 <_printf_i+0x118>
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	462a      	mov	r2, r5
 8008934:	4639      	mov	r1, r7
 8008936:	4630      	mov	r0, r6
 8008938:	47c0      	blx	r8
 800893a:	3001      	adds	r0, #1
 800893c:	d0aa      	beq.n	8008894 <_printf_i+0x12c>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	079b      	lsls	r3, r3, #30
 8008942:	d413      	bmi.n	800896c <_printf_i+0x204>
 8008944:	68e0      	ldr	r0, [r4, #12]
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	4298      	cmp	r0, r3
 800894a:	bfb8      	it	lt
 800894c:	4618      	movlt	r0, r3
 800894e:	e7a3      	b.n	8008898 <_printf_i+0x130>
 8008950:	2301      	movs	r3, #1
 8008952:	464a      	mov	r2, r9
 8008954:	4639      	mov	r1, r7
 8008956:	4630      	mov	r0, r6
 8008958:	47c0      	blx	r8
 800895a:	3001      	adds	r0, #1
 800895c:	d09a      	beq.n	8008894 <_printf_i+0x12c>
 800895e:	3501      	adds	r5, #1
 8008960:	68e3      	ldr	r3, [r4, #12]
 8008962:	9a03      	ldr	r2, [sp, #12]
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	42ab      	cmp	r3, r5
 8008968:	dcf2      	bgt.n	8008950 <_printf_i+0x1e8>
 800896a:	e7eb      	b.n	8008944 <_printf_i+0x1dc>
 800896c:	2500      	movs	r5, #0
 800896e:	f104 0919 	add.w	r9, r4, #25
 8008972:	e7f5      	b.n	8008960 <_printf_i+0x1f8>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1ac      	bne.n	80088d2 <_printf_i+0x16a>
 8008978:	7803      	ldrb	r3, [r0, #0]
 800897a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800897e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008982:	e76c      	b.n	800885e <_printf_i+0xf6>
 8008984:	08008f79 	.word	0x08008f79
 8008988:	08008f8a 	.word	0x08008f8a

0800898c <memmove>:
 800898c:	4288      	cmp	r0, r1
 800898e:	b510      	push	{r4, lr}
 8008990:	eb01 0302 	add.w	r3, r1, r2
 8008994:	d807      	bhi.n	80089a6 <memmove+0x1a>
 8008996:	1e42      	subs	r2, r0, #1
 8008998:	4299      	cmp	r1, r3
 800899a:	d00a      	beq.n	80089b2 <memmove+0x26>
 800899c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80089a4:	e7f8      	b.n	8008998 <memmove+0xc>
 80089a6:	4283      	cmp	r3, r0
 80089a8:	d9f5      	bls.n	8008996 <memmove+0xa>
 80089aa:	1881      	adds	r1, r0, r2
 80089ac:	1ad2      	subs	r2, r2, r3
 80089ae:	42d3      	cmn	r3, r2
 80089b0:	d100      	bne.n	80089b4 <memmove+0x28>
 80089b2:	bd10      	pop	{r4, pc}
 80089b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80089bc:	e7f7      	b.n	80089ae <memmove+0x22>
	...

080089c0 <_free_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4605      	mov	r5, r0
 80089c4:	2900      	cmp	r1, #0
 80089c6:	d045      	beq.n	8008a54 <_free_r+0x94>
 80089c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089cc:	1f0c      	subs	r4, r1, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	18e4      	addlt	r4, r4, r3
 80089d4:	f000 f8d2 	bl	8008b7c <__malloc_lock>
 80089d8:	4a1f      	ldr	r2, [pc, #124]	; (8008a58 <_free_r+0x98>)
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	4610      	mov	r0, r2
 80089de:	b933      	cbnz	r3, 80089ee <_free_r+0x2e>
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6014      	str	r4, [r2, #0]
 80089e4:	4628      	mov	r0, r5
 80089e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ea:	f000 b8c8 	b.w	8008b7e <__malloc_unlock>
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	d90c      	bls.n	8008a0c <_free_r+0x4c>
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	1862      	adds	r2, r4, r1
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bf04      	itt	eq
 80089fa:	681a      	ldreq	r2, [r3, #0]
 80089fc:	685b      	ldreq	r3, [r3, #4]
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	bf04      	itt	eq
 8008a02:	1852      	addeq	r2, r2, r1
 8008a04:	6022      	streq	r2, [r4, #0]
 8008a06:	6004      	str	r4, [r0, #0]
 8008a08:	e7ec      	b.n	80089e4 <_free_r+0x24>
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	b10a      	cbz	r2, 8008a14 <_free_r+0x54>
 8008a10:	42a2      	cmp	r2, r4
 8008a12:	d9fa      	bls.n	8008a0a <_free_r+0x4a>
 8008a14:	6819      	ldr	r1, [r3, #0]
 8008a16:	1858      	adds	r0, r3, r1
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d10b      	bne.n	8008a34 <_free_r+0x74>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	4401      	add	r1, r0
 8008a20:	1858      	adds	r0, r3, r1
 8008a22:	4282      	cmp	r2, r0
 8008a24:	6019      	str	r1, [r3, #0]
 8008a26:	d1dd      	bne.n	80089e4 <_free_r+0x24>
 8008a28:	6810      	ldr	r0, [r2, #0]
 8008a2a:	6852      	ldr	r2, [r2, #4]
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	4401      	add	r1, r0
 8008a30:	6019      	str	r1, [r3, #0]
 8008a32:	e7d7      	b.n	80089e4 <_free_r+0x24>
 8008a34:	d902      	bls.n	8008a3c <_free_r+0x7c>
 8008a36:	230c      	movs	r3, #12
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	e7d3      	b.n	80089e4 <_free_r+0x24>
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	1821      	adds	r1, r4, r0
 8008a40:	428a      	cmp	r2, r1
 8008a42:	bf04      	itt	eq
 8008a44:	6811      	ldreq	r1, [r2, #0]
 8008a46:	6852      	ldreq	r2, [r2, #4]
 8008a48:	6062      	str	r2, [r4, #4]
 8008a4a:	bf04      	itt	eq
 8008a4c:	1809      	addeq	r1, r1, r0
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	605c      	str	r4, [r3, #4]
 8008a52:	e7c7      	b.n	80089e4 <_free_r+0x24>
 8008a54:	bd38      	pop	{r3, r4, r5, pc}
 8008a56:	bf00      	nop
 8008a58:	200048e4 	.word	0x200048e4

08008a5c <_malloc_r>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	1ccd      	adds	r5, r1, #3
 8008a60:	f025 0503 	bic.w	r5, r5, #3
 8008a64:	3508      	adds	r5, #8
 8008a66:	2d0c      	cmp	r5, #12
 8008a68:	bf38      	it	cc
 8008a6a:	250c      	movcc	r5, #12
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	4606      	mov	r6, r0
 8008a70:	db01      	blt.n	8008a76 <_malloc_r+0x1a>
 8008a72:	42a9      	cmp	r1, r5
 8008a74:	d903      	bls.n	8008a7e <_malloc_r+0x22>
 8008a76:	230c      	movs	r3, #12
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	f000 f87d 	bl	8008b7c <__malloc_lock>
 8008a82:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <_malloc_r+0xac>)
 8008a84:	6814      	ldr	r4, [r2, #0]
 8008a86:	4621      	mov	r1, r4
 8008a88:	b991      	cbnz	r1, 8008ab0 <_malloc_r+0x54>
 8008a8a:	4c20      	ldr	r4, [pc, #128]	; (8008b0c <_malloc_r+0xb0>)
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	b91b      	cbnz	r3, 8008a98 <_malloc_r+0x3c>
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 f863 	bl	8008b5c <_sbrk_r>
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f85e 	bl	8008b5c <_sbrk_r>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d124      	bne.n	8008aee <_malloc_r+0x92>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f868 	bl	8008b7e <__malloc_unlock>
 8008aae:	e7e4      	b.n	8008a7a <_malloc_r+0x1e>
 8008ab0:	680b      	ldr	r3, [r1, #0]
 8008ab2:	1b5b      	subs	r3, r3, r5
 8008ab4:	d418      	bmi.n	8008ae8 <_malloc_r+0x8c>
 8008ab6:	2b0b      	cmp	r3, #11
 8008ab8:	d90f      	bls.n	8008ada <_malloc_r+0x7e>
 8008aba:	600b      	str	r3, [r1, #0]
 8008abc:	50cd      	str	r5, [r1, r3]
 8008abe:	18cc      	adds	r4, r1, r3
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f000 f85c 	bl	8008b7e <__malloc_unlock>
 8008ac6:	f104 000b 	add.w	r0, r4, #11
 8008aca:	1d23      	adds	r3, r4, #4
 8008acc:	f020 0007 	bic.w	r0, r0, #7
 8008ad0:	1ac3      	subs	r3, r0, r3
 8008ad2:	d0d3      	beq.n	8008a7c <_malloc_r+0x20>
 8008ad4:	425a      	negs	r2, r3
 8008ad6:	50e2      	str	r2, [r4, r3]
 8008ad8:	e7d0      	b.n	8008a7c <_malloc_r+0x20>
 8008ada:	428c      	cmp	r4, r1
 8008adc:	684b      	ldr	r3, [r1, #4]
 8008ade:	bf16      	itet	ne
 8008ae0:	6063      	strne	r3, [r4, #4]
 8008ae2:	6013      	streq	r3, [r2, #0]
 8008ae4:	460c      	movne	r4, r1
 8008ae6:	e7eb      	b.n	8008ac0 <_malloc_r+0x64>
 8008ae8:	460c      	mov	r4, r1
 8008aea:	6849      	ldr	r1, [r1, #4]
 8008aec:	e7cc      	b.n	8008a88 <_malloc_r+0x2c>
 8008aee:	1cc4      	adds	r4, r0, #3
 8008af0:	f024 0403 	bic.w	r4, r4, #3
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	d005      	beq.n	8008b04 <_malloc_r+0xa8>
 8008af8:	1a21      	subs	r1, r4, r0
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 f82e 	bl	8008b5c <_sbrk_r>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d0cf      	beq.n	8008aa4 <_malloc_r+0x48>
 8008b04:	6025      	str	r5, [r4, #0]
 8008b06:	e7db      	b.n	8008ac0 <_malloc_r+0x64>
 8008b08:	200048e4 	.word	0x200048e4
 8008b0c:	200048e8 	.word	0x200048e8

08008b10 <_realloc_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	4607      	mov	r7, r0
 8008b14:	4614      	mov	r4, r2
 8008b16:	460e      	mov	r6, r1
 8008b18:	b921      	cbnz	r1, 8008b24 <_realloc_r+0x14>
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b20:	f7ff bf9c 	b.w	8008a5c <_malloc_r>
 8008b24:	b922      	cbnz	r2, 8008b30 <_realloc_r+0x20>
 8008b26:	f7ff ff4b 	bl	80089c0 <_free_r>
 8008b2a:	4625      	mov	r5, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b30:	f000 f826 	bl	8008b80 <_malloc_usable_size_r>
 8008b34:	42a0      	cmp	r0, r4
 8008b36:	d20f      	bcs.n	8008b58 <_realloc_r+0x48>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7ff ff8e 	bl	8008a5c <_malloc_r>
 8008b40:	4605      	mov	r5, r0
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d0f2      	beq.n	8008b2c <_realloc_r+0x1c>
 8008b46:	4631      	mov	r1, r6
 8008b48:	4622      	mov	r2, r4
 8008b4a:	f7ff fc11 	bl	8008370 <memcpy>
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7ff ff35 	bl	80089c0 <_free_r>
 8008b56:	e7e9      	b.n	8008b2c <_realloc_r+0x1c>
 8008b58:	4635      	mov	r5, r6
 8008b5a:	e7e7      	b.n	8008b2c <_realloc_r+0x1c>

08008b5c <_sbrk_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4c06      	ldr	r4, [pc, #24]	; (8008b78 <_sbrk_r+0x1c>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4605      	mov	r5, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	f7f8 ff96 	bl	8001a98 <_sbrk>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_sbrk_r+0x1a>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_sbrk_r+0x1a>
 8008b74:	602b      	str	r3, [r5, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20004a60 	.word	0x20004a60

08008b7c <__malloc_lock>:
 8008b7c:	4770      	bx	lr

08008b7e <__malloc_unlock>:
 8008b7e:	4770      	bx	lr

08008b80 <_malloc_usable_size_r>:
 8008b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b84:	1f18      	subs	r0, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfbc      	itt	lt
 8008b8a:	580b      	ldrlt	r3, [r1, r0]
 8008b8c:	18c0      	addlt	r0, r0, r3
 8008b8e:	4770      	bx	lr

08008b90 <_init>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	bf00      	nop
 8008b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	469e      	mov	lr, r3
 8008b9a:	4770      	bx	lr

08008b9c <_fini>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	bf00      	nop
 8008ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba2:	bc08      	pop	{r3}
 8008ba4:	469e      	mov	lr, r3
 8008ba6:	4770      	bx	lr
