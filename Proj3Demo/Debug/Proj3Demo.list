
Proj3Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008c18  08008c18  00018c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e38  08008e38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e40  08008e40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e44  08008e44  00018e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000325c  20000074  08008ebc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032d0  08008ebc  000232d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b5b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040e2  00000000  00000000  00041bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  00045ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001690  00000000  00000000  00047578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aff2  00000000  00000000  00048c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000154c4  00000000  00000000  00073bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fee18  00000000  00000000  000890be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00187ed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006844  00000000  00000000  00187f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c00 	.word	0x08008c00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008c00 	.word	0x08008c00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <update_breaks_metrics>:
 * Updates the metrics of the break info for a teller
 * [BreakS*]  break_info   - Pointer to the break information to be changed
 * [uint32_t] break_length - Length of the break to be taken
 * */
void update_breaks_metrics(BreakS* break_info, uint32_t break_length)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
    break_info->num++;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
    break_info->total += break_length;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	441a      	add	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	605a      	str	r2, [r3, #4]
    if (break_length < break_info->shortest)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d203      	bcs.n	80005b2 <update_breaks_metrics+0x32>
    {
        break_info->shortest = break_length;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	609a      	str	r2, [r3, #8]
    else if ( break_length > break_info->longest)
    {
        break_info->longest = break_length;
    }

}
 80005b0:	e007      	b.n	80005c2 <update_breaks_metrics+0x42>
    else if ( break_length > break_info->longest)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d902      	bls.n	80005c2 <update_breaks_metrics+0x42>
        break_info->longest = break_length;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	60da      	str	r2, [r3, #12]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <generate_break_length>:
 * Randomly generate a break length using RNG function of STM32 peripheral
 * Inputs: None
 * Returns: Randomly generated number between 1 minute and 4 minutes
 * */
unsigned int generate_break_length(unsigned int random_time)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    return ((random_time % DIFF_BREAK_LENGTH) + MIN_BREAK_LENGTH);
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	0893      	lsrs	r3, r2, #2
 80005dc:	4907      	ldr	r1, [pc, #28]	; (80005fc <generate_break_length+0x2c>)
 80005de:	fba1 1303 	umull	r1, r3, r1, r3
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	21b4      	movs	r1, #180	; 0xb4
 80005e6:	fb01 f303 	mul.w	r3, r1, r3
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	333c      	adds	r3, #60	; 0x3c
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	16c16c17 	.word	0x16c16c17

08000600 <generate_time_until_break>:
 * Randomly generate when a teller can take their next breakusing RNG function of STM32 peripheral
 * Inputs: None
 * Returns: Randomly generated number between 30 minutes and 60 minutes
 * */
unsigned int generate_time_until_break(unsigned int random_time)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

    return ((random_time % DIFF_TIME_UNTIL_BREAK) + MIN_TIME_UNTIL_BREAK);
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <generate_time_until_break+0x2c>)
 800060c:	fba3 1302 	umull	r1, r3, r3, r2
 8000610:	0a9b      	lsrs	r3, r3, #10
 8000612:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	91a2b3c5 	.word	0x91a2b3c5

08000630 <Generate_Customer>:
 * Allocates memory for customer and generates random interactino time for them
 * Inputs: None
 * Returns: Pointer to new customer
 * */
CustomerS* Generate_Customer(unsigned int random_time)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    CustomerS* new_customer = (CustomerS*) malloc(sizeof(CustomerS));
 8000638:	2008      	movs	r0, #8
 800063a:	f007 fec1 	bl	80083c0 <malloc>
 800063e:	4603      	mov	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]
    new_customer->interaction_time = generate_interaction_time(random_time);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f808 	bl	8000658 <generate_interaction_time>
 8000648:	4602      	mov	r2, r0
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	605a      	str	r2, [r3, #4]
    return new_customer;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <generate_interaction_time>:
 * Randomly generates an interaction time for customers (between 30 seconds and 4 minutes)
 * Inputs: None
 * Returns: Random time
 * */
static unsigned int generate_interaction_time(unsigned int random_time)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_INTERACTION_TIME;
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <generate_interaction_time+0x2c>)
 8000664:	fba3 1302 	umull	r1, r3, r3, r2
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	331e      	adds	r3, #30
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	91a2b3c5 	.word	0x91a2b3c5

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f001 f80c 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f860 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f994 	bl	80009c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000698:	f000 f962 	bl	8000960 <MX_USART2_UART_Init>
  MX_RNG_Init();
 800069c:	f000 f8f6 	bl	800088c <MX_RNG_Init>
  MX_TIM2_Init();
 80006a0:	f000 f908 	bl	80008b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006a4:	481a      	ldr	r0, [pc, #104]	; (8000710 <main+0x88>)
 80006a6:	f002 ff3b 	bl	8003520 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80006aa:	f004 faad 	bl	8004c08 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of queue_mutex */
  queue_mutexHandle = osMutexNew(&queue_mutex_attributes);
 80006ae:	4819      	ldr	r0, [pc, #100]	; (8000714 <main+0x8c>)
 80006b0:	f004 fbe8 	bl	8004e84 <osMutexNew>
 80006b4:	4602      	mov	r2, r0
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <main+0x90>)
 80006b8:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <main+0x94>)
 80006bc:	2101      	movs	r1, #1
 80006be:	2001      	movs	r0, #1
 80006c0:	f004 fc7a 	bl	8004fb8 <osSemaphoreNew>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <main+0x98>)
 80006c8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <main+0x9c>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4816      	ldr	r0, [pc, #88]	; (8000728 <main+0xa0>)
 80006d0:	f004 fb04 	bl	8004cdc <osThreadNew>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0xa4>)
 80006d8:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread1 */
  TellerThread1Handle = osThreadNew(StartTask02, NULL, &TellerThread1_attributes);
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <main+0xa8>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4815      	ldr	r0, [pc, #84]	; (8000734 <main+0xac>)
 80006e0:	f004 fafc 	bl	8004cdc <osThreadNew>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <main+0xb0>)
 80006e8:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread2 */
  TellerThread2Handle = osThreadNew(StartTask03, NULL, &TellerThread2_attributes);
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <main+0xb4>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4814      	ldr	r0, [pc, #80]	; (8000740 <main+0xb8>)
 80006f0:	f004 faf4 	bl	8004cdc <osThreadNew>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <main+0xbc>)
 80006f8:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread3 */
  TellerThread3Handle = osThreadNew(StartTask04, NULL, &TellerThread3_attributes);
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <main+0xc0>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4813      	ldr	r0, [pc, #76]	; (800074c <main+0xc4>)
 8000700:	f004 faec 	bl	8004cdc <osThreadNew>
 8000704:	4602      	mov	r2, r0
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <main+0xc8>)
 8000708:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800070a:	f004 fab1 	bl	8004c70 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x86>
 8000710:	2000317c 	.word	0x2000317c
 8000714:	08008d9c 	.word	0x08008d9c
 8000718:	200031bc 	.word	0x200031bc
 800071c:	08008dac 	.word	0x08008dac
 8000720:	20003178 	.word	0x20003178
 8000724:	08008d0c 	.word	0x08008d0c
 8000728:	08000dc1 	.word	0x08000dc1
 800072c:	20003160 	.word	0x20003160
 8000730:	08008d30 	.word	0x08008d30
 8000734:	08000e25 	.word	0x08000e25
 8000738:	20003244 	.word	0x20003244
 800073c:	08008d54 	.word	0x08008d54
 8000740:	08000e39 	.word	0x08000e39
 8000744:	20003240 	.word	0x20003240
 8000748:	08008d78 	.word	0x08008d78
 800074c:	080010b9 	.word	0x080010b9
 8000750:	20003164 	.word	0x20003164

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0b8      	sub	sp, #224	; 0xe0
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800075e:	2244      	movs	r2, #68	; 0x44
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f007 fe47 	bl	80083f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2288      	movs	r2, #136	; 0x88
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f007 fe39 	bl	80083f6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000784:	f001 fab2 	bl	8001cec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000788:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <SystemClock_Config+0x130>)
 800078a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800078e:	4a3d      	ldr	r2, [pc, #244]	; (8000884 <SystemClock_Config+0x130>)
 8000790:	f023 0318 	bic.w	r3, r3, #24
 8000794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000798:	2314      	movs	r3, #20
 800079a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007bc:	2301      	movs	r3, #1
 80007be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007c8:	2328      	movs	r3, #40	; 0x28
 80007ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ce:	2307      	movs	r3, #7
 80007d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 faf5 	bl	8001dd4 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007f0:	f000 fc7c 	bl	80010ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2303      	movs	r3, #3
 80007fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000812:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000816:	2104      	movs	r1, #4
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fec1 	bl	80025a0 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000824:	f000 fc62 	bl	80010ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <SystemClock_Config+0x134>)
 800082a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000830:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000834:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000836:	2301      	movs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800083e:	2310      	movs	r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000842:	2307      	movs	r3, #7
 8000844:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800084e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000852:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f8d8 	bl	8002a0c <HAL_RCCEx_PeriphCLKConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000862:	f000 fc43 	bl	80010ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000866:	f44f 7000 	mov.w	r0, #512	; 0x200
 800086a:	f001 fa5d 	bl	8001d28 <HAL_PWREx_ControlVoltageScaling>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8000874:	f000 fc3a 	bl	80010ec <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000878:	f002 fbae 	bl	8002fd8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800087c:	bf00      	nop
 800087e:	37e0      	adds	r7, #224	; 0xe0
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	00040002 	.word	0x00040002

0800088c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_RNG_Init+0x20>)
 8000892:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <MX_RNG_Init+0x24>)
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_RNG_Init+0x20>)
 8000898:	f002 fd78 	bl	800338c <HAL_RNG_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008a2:	f000 fc23 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20003168 	.word	0x20003168
 80008b0:	50060800 	.word	0x50060800

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_TIM2_Init+0xa8>)
 80008d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 13332;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_TIM2_Init+0xa8>)
 80008dc:	f243 4214 	movw	r2, #13332	; 0x3414
 80008e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_TIM2_Init+0xa8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM2_Init+0xa8>)
 80008ea:	220a      	movs	r2, #10
 80008ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_TIM2_Init+0xa8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_TIM2_Init+0xa8>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008fa:	4818      	ldr	r0, [pc, #96]	; (800095c <MX_TIM2_Init+0xa8>)
 80008fc:	f002 fde5 	bl	80034ca <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000906:	f000 fbf1 	bl	80010ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_TIM2_Init+0xa8>)
 8000918:	f002 ff4b 	bl	80037b2 <HAL_TIM_ConfigClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000922:	f000 fbe3 	bl	80010ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <MX_TIM2_Init+0xa8>)
 8000934:	f003 f952 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800093e:	f000 fbd5 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	201c      	movs	r0, #28
 8000948:	f000 ffa4 	bl	8001894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800094c:	201c      	movs	r0, #28
 800094e:	f000 ffbd 	bl	80018cc <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000317c 	.word	0x2000317c

08000960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <MX_USART2_UART_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x58>)
 80009a4:	f003 f9c0 	bl	8003d28 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 fb9d 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200031c0 	.word	0x200031c0
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	4bb7      	ldr	r3, [pc, #732]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4ab6      	ldr	r2, [pc, #728]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4bb4      	ldr	r3, [pc, #720]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4bb1      	ldr	r3, [pc, #708]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4ab0      	ldr	r2, [pc, #704]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4bae      	ldr	r3, [pc, #696]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	4bab      	ldr	r3, [pc, #684]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4aaa      	ldr	r2, [pc, #680]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4ba8      	ldr	r3, [pc, #672]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4ba5      	ldr	r3, [pc, #660]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4aa4      	ldr	r2, [pc, #656]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4ba2      	ldr	r3, [pc, #648]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b9f      	ldr	r3, [pc, #636]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a9e      	ldr	r2, [pc, #632]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b9c      	ldr	r3, [pc, #624]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b99      	ldr	r3, [pc, #612]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a98      	ldr	r2, [pc, #608]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b96      	ldr	r3, [pc, #600]	; (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f240 1109 	movw	r1, #265	; 0x109
 8000a6c:	4892      	ldr	r0, [pc, #584]	; (8000cb8 <MX_GPIO_Init+0x2f8>)
 8000a6e:	f001 f925 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210c      	movs	r1, #12
 8000a76:	4891      	ldr	r0, [pc, #580]	; (8000cbc <MX_GPIO_Init+0x2fc>)
 8000a78:	f001 f920 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	488f      	ldr	r0, [pc, #572]	; (8000cc0 <MX_GPIO_Init+0x300>)
 8000a84:	f001 f91a 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8e:	488c      	ldr	r0, [pc, #560]	; (8000cc0 <MX_GPIO_Init+0x300>)
 8000a90:	f001 f914 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	488a      	ldr	r0, [pc, #552]	; (8000cc4 <MX_GPIO_Init+0x304>)
 8000a9a:	f001 f90f 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 8000a9e:	23f4      	movs	r3, #244	; 0xf4
 8000aa0:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000aae:	230d      	movs	r3, #13
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	487f      	ldr	r0, [pc, #508]	; (8000cb8 <MX_GPIO_Init+0x2f8>)
 8000aba:	f000 ff57 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4878      	ldr	r0, [pc, #480]	; (8000cb8 <MX_GPIO_Init+0x2f8>)
 8000ad6:	f000 ff49 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000ada:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae0:	4b79      	ldr	r3, [pc, #484]	; (8000cc8 <MX_GPIO_Init+0x308>)
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4874      	ldr	r0, [pc, #464]	; (8000cc0 <MX_GPIO_Init+0x300>)
 8000af0:	f000 ff3c 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000af4:	2307      	movs	r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	486e      	ldr	r0, [pc, #440]	; (8000cc0 <MX_GPIO_Init+0x300>)
 8000b08:	f000 ff30 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000b0c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000b10:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b1e:	230b      	movs	r3, #11
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4865      	ldr	r0, [pc, #404]	; (8000cc0 <MX_GPIO_Init+0x300>)
 8000b2a:	f000 ff1f 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000b2e:	232f      	movs	r3, #47	; 0x2f
 8000b30:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b36:	2302      	movs	r3, #2
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f000 ff12 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b4c:	4b5e      	ldr	r3, [pc, #376]	; (8000cc8 <MX_GPIO_Init+0x308>)
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f000 ff05 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000b62:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000b66:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b74:	230b      	movs	r3, #11
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fef3 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000b86:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000b8a:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4846      	ldr	r0, [pc, #280]	; (8000cbc <MX_GPIO_Init+0x2fc>)
 8000ba4:	f000 fee2 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	483f      	ldr	r0, [pc, #252]	; (8000cbc <MX_GPIO_Init+0x2fc>)
 8000bc0:	f000 fed4 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4836      	ldr	r0, [pc, #216]	; (8000cb8 <MX_GPIO_Init+0x2f8>)
 8000bde:	f000 fec5 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000bf4:	230d      	movs	r3, #13
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	482e      	ldr	r0, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0x2f8>)
 8000c00:	f000 feb4 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000c04:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000c08:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c16:	230a      	movs	r3, #10
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4825      	ldr	r0, [pc, #148]	; (8000cb8 <MX_GPIO_Init+0x2f8>)
 8000c22:	f000 fea3 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_I2C_SLC_Pin MFX_I2C_SDA_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000c26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2c:	2312      	movs	r3, #18
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	481e      	ldr	r0, [pc, #120]	; (8000cbc <MX_GPIO_Init+0x2fc>)
 8000c44:	f000 fe92 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000c48:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000c4c:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4817      	ldr	r0, [pc, #92]	; (8000cc4 <MX_GPIO_Init+0x304>)
 8000c66:	f000 fe81 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000c6a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0x300>)
 8000c84:	f000 fe72 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f000 fe60 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000cac:	2305      	movs	r3, #5
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	e00c      	b.n	8000ccc <MX_GPIO_Init+0x30c>
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ccc:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <MX_GPIO_Init+0x3f0>)
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4836      	ldr	r0, [pc, #216]	; (8000db4 <MX_GPIO_Init+0x3f4>)
 8000cdc:	f000 fe46 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_SCK_Pin MEMS_MISO_Pin MEMS_MOSI_Pin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000ce0:	231a      	movs	r3, #26
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	482e      	ldr	r0, [pc, #184]	; (8000db4 <MX_GPIO_Init+0x3f4>)
 8000cfc:	f000 fe36 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4827      	ldr	r0, [pc, #156]	; (8000db4 <MX_GPIO_Init+0x3f4>)
 8000d18:	f000 fe28 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4821      	ldr	r0, [pc, #132]	; (8000db8 <MX_GPIO_Init+0x3f8>)
 8000d34:	f000 fe1a 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d38:	23c0      	movs	r3, #192	; 0xc0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3c:	2312      	movs	r3, #18
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4819      	ldr	r0, [pc, #100]	; (8000db8 <MX_GPIO_Init+0x3f8>)
 8000d54:	f000 fe0a 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_GPIO_Init+0x3f0>)
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <MX_GPIO_Init+0x3f8>)
 8000d6e:	f000 fdfd 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_GPIO_Init+0x3fc>)
 8000d8a:	f000 fdef 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_GPIO_Init+0x3f0>)
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_GPIO_Init+0x3fc>)
 8000da2:	f000 fde3 	bl	800196c <HAL_GPIO_Init>

}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	; 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	10120000 	.word	0x10120000
 8000db4:	48000c00 	.word	0x48000c00
 8000db8:	48000400 	.word	0x48000400
 8000dbc:	48001000 	.word	0x48001000

08000dc0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
uint8_t buffer[64];
unsigned int random_time;
HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <StartDefaultTask+0x54>)
 8000dd0:	f002 fb2c 	bl	800342c <HAL_RNG_GenerateRandomNumber>
init_queue(&customer_queue,random_time);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480f      	ldr	r0, [pc, #60]	; (8000e18 <StartDefaultTask+0x58>)
 8000dda:	f000 f98e 	bl	80010fa <init_queue>

  for(;;)
  {
	  break;
 8000dde:	bf00      	nop
	}
  }
  //customer_queue.max_depth;


  sprintf(buffer,"Maximum depth of queue: %u\r\n", customer_queue.max_depth);
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <StartDefaultTask+0x58>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <StartDefaultTask+0x5c>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 fbc4 	bl	8008578 <siprintf>
  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9eb 	bl	80001d0 <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	f107 0110 	add.w	r1, r7, #16
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <StartDefaultTask+0x60>)
 8000e08:	f002 ffdc 	bl	8003dc4 <HAL_UART_Transmit>
  /* USER CODE END 5 */ 
}
 8000e0c:	bf00      	nop
 8000e0e:	3750      	adds	r7, #80	; 0x50
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20003168 	.word	0x20003168
 8000e18:	20000090 	.word	0x20000090
 8000e1c:	08008c70 	.word	0x08008c70
 8000e20:	200031c0 	.word	0x200031c0

08000e24 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e30:	f003 fffa 	bl	8004e28 <osDelay>
 8000e34:	e7fa      	b.n	8000e2c <StartTask02+0x8>
	...

08000e38 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b096      	sub	sp, #88	; 0x58
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  uint8_t buffer[64];
  unsigned int random_time;
  static TellerS teller;
  HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	4892      	ldr	r0, [pc, #584]	; (8001090 <StartTask03+0x258>)
 8000e48:	f002 faf0 	bl	800342c <HAL_RNG_GenerateRandomNumber>
  init_teller(&teller,TELLER_1,random_time);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2101      	movs	r1, #1
 8000e52:	4890      	ldr	r0, [pc, #576]	; (8001094 <StartTask03+0x25c>)
 8000e54:	f000 fbd4 	bl	8001600 <init_teller>
  sprintf(buffer,"Teller 1 initialized\r\n");
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4a8e      	ldr	r2, [pc, #568]	; (8001098 <StartTask03+0x260>)
 8000e5e:	461c      	mov	r4, r3
 8000e60:	4615      	mov	r5, r2
 8000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e6a:	6020      	str	r0, [r4, #0]
 8000e6c:	3404      	adds	r4, #4
 8000e6e:	8021      	strh	r1, [r4, #0]
 8000e70:	3402      	adds	r4, #2
 8000e72:	0c0b      	lsrs	r3, r1, #16
 8000e74:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f9a8 	bl	80001d0 <strlen>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	f107 010c 	add.w	r1, r7, #12
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	4883      	ldr	r0, [pc, #524]	; (800109c <StartTask03+0x264>)
 8000e8e:	f002 ff99 	bl	8003dc4 <HAL_UART_Transmit>
  add_customer(&customer_queue,random_time);
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4882      	ldr	r0, [pc, #520]	; (80010a0 <StartTask03+0x268>)
 8000e98:	f000 f9a6 	bl	80011e8 <add_customer>
  add_customer(&customer_queue,random_time);
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	487f      	ldr	r0, [pc, #508]	; (80010a0 <StartTask03+0x268>)
 8000ea2:	f000 f9a1 	bl	80011e8 <add_customer>
  add_customer(&customer_queue,random_time);
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	487d      	ldr	r0, [pc, #500]	; (80010a0 <StartTask03+0x268>)
 8000eac:	f000 f99c 	bl	80011e8 <add_customer>
  add_customer(&customer_queue,random_time);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	487a      	ldr	r0, [pc, #488]	; (80010a0 <StartTask03+0x268>)
 8000eb6:	f000 f997 	bl	80011e8 <add_customer>
  add_customer(&customer_queue,random_time);
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4878      	ldr	r0, [pc, #480]	; (80010a0 <StartTask03+0x268>)
 8000ec0:	f000 f992 	bl	80011e8 <add_customer>
  for(;;)
  {

    // If it is the end of the and there are no more customers to serve
    if (master_timer > MAX_TIME && is_empty(&customer_queue))
 8000ec4:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <StartTask03+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f246 2270 	movw	r2, #25200	; 0x6270
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d906      	bls.n	8000ede <StartTask03+0xa6>
 8000ed0:	4873      	ldr	r0, [pc, #460]	; (80010a0 <StartTask03+0x268>)
 8000ed2:	f000 f9d5 	bl	8001280 <is_empty>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f040 80d4 	bne.w	8001086 <StartTask03+0x24e>
    {
      break;
    }
    if(teller.status == idle)
 8000ede:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <StartTask03+0x25c>)
 8000ee0:	7e1b      	ldrb	r3, [r3, #24]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	f040 8099 	bne.w	800101a <StartTask03+0x1e2>
    {
        // If the teller can, they should go on break
        // The time until break is the time at which the master_timer will be at when they can take a break
        if( master_timer>= teller.time_until_break)
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <StartTask03+0x25c>)
 8000eea:	6a1a      	ldr	r2, [r3, #32]
 8000eec:	4b6d      	ldr	r3, [pc, #436]	; (80010a4 <StartTask03+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d831      	bhi.n	8000f58 <StartTask03+0x120>
        {
            HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4865      	ldr	r0, [pc, #404]	; (8001090 <StartTask03+0x258>)
 8000efc:	f002 fa96 	bl	800342c <HAL_RNG_GenerateRandomNumber>
            unsigned int init_time_waiting= generate_break_length(random_time);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb64 	bl	80005d0 <generate_break_length>
 8000f08:	6578      	str	r0, [r7, #84]	; 0x54
            unsigned int time_waiting = init_time_waiting + master_timer;
 8000f0a:	4b66      	ldr	r3, [pc, #408]	; (80010a4 <StartTask03+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f10:	4413      	add	r3, r2
 8000f12:	653b      	str	r3, [r7, #80]	; 0x50

            teller.busy_time = time_waiting;
 8000f14:	4a5f      	ldr	r2, [pc, #380]	; (8001094 <StartTask03+0x25c>)
 8000f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f18:	6113      	str	r3, [r2, #16]
            teller.total_time_waiting = init_time_waiting;
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <StartTask03+0x25c>)
 8000f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f1e:	6093      	str	r3, [r2, #8]
            teller.break_info->num++;
 8000f20:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <StartTask03+0x25c>)
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	3201      	adds	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
            update_breaks_metrics(&teller.break_info, time_waiting);
 8000f2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000f2c:	485e      	ldr	r0, [pc, #376]	; (80010a8 <StartTask03+0x270>)
 8000f2e:	f7ff fb27 	bl	8000580 <update_breaks_metrics>
            teller.status = on_break;
 8000f32:	4b58      	ldr	r3, [pc, #352]	; (8001094 <StartTask03+0x25c>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	761a      	strb	r2, [r3, #24]
            HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4854      	ldr	r0, [pc, #336]	; (8001090 <StartTask03+0x258>)
 8000f40:	f002 fa74 	bl	800342c <HAL_RNG_GenerateRandomNumber>
            teller.time_until_break = master_timer + generate_time_until_break(random_time);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fb5a 	bl	8000600 <generate_time_until_break>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	4b55      	ldr	r3, [pc, #340]	; (80010a4 <StartTask03+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a4f      	ldr	r2, [pc, #316]	; (8001094 <StartTask03+0x25c>)
 8000f56:	6213      	str	r3, [r2, #32]
        }
        // Lock the queue info
        if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK){
 8000f58:	4b54      	ldr	r3, [pc, #336]	; (80010ac <StartTask03+0x274>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d07b      	beq.n	8001058 <StartTask03+0x220>
 8000f60:	4b52      	ldr	r3, [pc, #328]	; (80010ac <StartTask03+0x274>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 f8c4 	bl	80050f4 <osSemaphoreAcquire>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d172      	bne.n	8001058 <StartTask03+0x220>
          if(customer_queue.size > 0)
 8000f72:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <StartTask03+0x268>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d06e      	beq.n	8001058 <StartTask03+0x220>
          {
              CustomerS* customer = dequeue(&customer_queue);
 8000f7a:	4849      	ldr	r0, [pc, #292]	; (80010a0 <StartTask03+0x268>)
 8000f7c:	f000 f903 	bl	8001186 <dequeue>
 8000f80:	64f8      	str	r0, [r7, #76]	; 0x4c
              teller.total_served++;
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <StartTask03+0x25c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a42      	ldr	r2, [pc, #264]	; (8001094 <StartTask03+0x25c>)
 8000f8a:	6013      	str	r3, [r2, #0]
              teller.total_time_served += customer->interaction_time;
 8000f8c:	4b41      	ldr	r3, [pc, #260]	; (8001094 <StartTask03+0x25c>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a3f      	ldr	r2, [pc, #252]	; (8001094 <StartTask03+0x25c>)
 8000f98:	6053      	str	r3, [r2, #4]
              teller.busy_time = master_timer + customer->interaction_time;
 8000f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <StartTask03+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <StartTask03+0x25c>)
 8000fa6:	6113      	str	r3, [r2, #16]
              teller.status = busy;
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <StartTask03+0x25c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	761a      	strb	r2, [r3, #24]
              teller.total_time_waiting = master_timer - teller.time_finished_task;
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <StartTask03+0x26c>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <StartTask03+0x25c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4a36      	ldr	r2, [pc, #216]	; (8001094 <StartTask03+0x25c>)
 8000fba:	6093      	str	r3, [r2, #8]
              teller.time_finished_task = 0;
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <StartTask03+0x25c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]

              // Fix the current wait time for when new customers are being added
              customer_queue.current_wait_time -= customer->interaction_time;
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <StartTask03+0x268>)
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <StartTask03+0x268>)
 8000fce:	6113      	str	r3, [r2, #16]

              sprintf(buffer,"Teller 1 serving a customer \r\n");
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4a36      	ldr	r2, [pc, #216]	; (80010b0 <StartTask03+0x278>)
 8000fd6:	461c      	mov	r4, r3
 8000fd8:	4615      	mov	r5, r2
 8000fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fe2:	c407      	stmia	r4!, {r0, r1, r2}
 8000fe4:	8023      	strh	r3, [r4, #0]
 8000fe6:	3402      	adds	r4, #2
 8000fe8:	0c1b      	lsrs	r3, r3, #16
 8000fea:	7023      	strb	r3, [r4, #0]
			  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	f107 010c 	add.w	r1, r7, #12
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	4826      	ldr	r0, [pc, #152]	; (800109c <StartTask03+0x264>)
 8001004:	f002 fede 	bl	8003dc4 <HAL_UART_Transmit>

              // Free up the space occupied by the customer
              free(customer);
 8001008:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800100a:	f007 f9e1 	bl	80083d0 <free>

              // Unlock queue
              osSemaphoreRelease (myBinarySem01Handle);
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <StartTask03+0x274>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f004 f8d4 	bl	80051c0 <osSemaphoreRelease>
 8001018:	e01e      	b.n	8001058 <StartTask03+0x220>
          }
        }
        
    }
    else if (busy == teller.status)
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <StartTask03+0x25c>)
 800101c:	7e1b      	ldrb	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10d      	bne.n	800103e <StartTask03+0x206>
    {
        if(master_timer >= teller.busy_time)
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <StartTask03+0x25c>)
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <StartTask03+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d814      	bhi.n	8001058 <StartTask03+0x220>
        {
            teller.status = idle;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <StartTask03+0x25c>)
 8001030:	2201      	movs	r2, #1
 8001032:	761a      	strb	r2, [r3, #24]
            teller.time_finished_task = master_timer;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <StartTask03+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <StartTask03+0x25c>)
 800103a:	61d3      	str	r3, [r2, #28]
 800103c:	e00c      	b.n	8001058 <StartTask03+0x220>
        }
    }
    else // if teller.status == on_break
    {
        if (master_timer >= teller.busy_time)
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <StartTask03+0x25c>)
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <StartTask03+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d806      	bhi.n	8001058 <StartTask03+0x220>
        {
            teller.status = idle;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <StartTask03+0x25c>)
 800104c:	2201      	movs	r2, #1
 800104e:	761a      	strb	r2, [r3, #24]
            teller.time_finished_task = master_timer;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <StartTask03+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <StartTask03+0x25c>)
 8001056:	61d3      	str	r3, [r2, #28]
        }
    }

    sprintf(buffer,"Number of people served by teller 1: %u\r\n", teller.total_served);
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <StartTask03+0x25c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4914      	ldr	r1, [pc, #80]	; (80010b4 <StartTask03+0x27c>)
 8001062:	4618      	mov	r0, r3
 8001064:	f007 fa88 	bl	8008578 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f8af 	bl	80001d0 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	f107 010c 	add.w	r1, r7, #12
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	4807      	ldr	r0, [pc, #28]	; (800109c <StartTask03+0x264>)
 8001080:	f002 fea0 	bl	8003dc4 <HAL_UART_Transmit>
    if (master_timer > MAX_TIME && is_empty(&customer_queue))
 8001084:	e71e      	b.n	8000ec4 <StartTask03+0x8c>
      break;
 8001086:	bf00      	nop
  }
  /* USER CODE END StartTask03 */
}
 8001088:	bf00      	nop
 800108a:	3758      	adds	r7, #88	; 0x58
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	20003168 	.word	0x20003168
 8001094:	200000ac 	.word	0x200000ac
 8001098:	08008c90 	.word	0x08008c90
 800109c:	200031c0 	.word	0x200031c0
 80010a0:	20000090 	.word	0x20000090
 80010a4:	2000310c 	.word	0x2000310c
 80010a8:	200000c0 	.word	0x200000c0
 80010ac:	20003178 	.word	0x20003178
 80010b0:	08008ca8 	.word	0x08008ca8
 80010b4:	08008cc8 	.word	0x08008cc8

080010b8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f003 feb1 	bl	8004e28 <osDelay>
 80010c6:	e7fb      	b.n	80010c0 <StartTask04+0x8>

080010c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010da:	f000 fb05 	bl	80016e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40012c00 	.word	0x40012c00

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <init_queue>:
 * Sets values to 0 or NULL
 * [QueueS*] QueuePtr - Pointer to a queue to initialize
 * Returns: NULL
 * */
void init_queue(QueueS* QueuePtr,unsigned int random_time)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
    //Metric information init
    QueuePtr->max_depth = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    QueuePtr->max_wait_time = 0;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]

    //Active information init
    QueuePtr->size = 0;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
    QueuePtr->current_wait_time = generate_time_for_new_cust(random_time);
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f000 f89a 	bl	8001250 <generate_time_for_new_cust>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	611a      	str	r2, [r3, #16]
    QueuePtr->front_node = NULL;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
    QueuePtr->back_node = NULL;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <enqueue>:
 * [QueueS*] QueuePtr - Pointer to a queue to add item to
 * [QueueS*] NodePtr  - Pointer to a node to add the back of the queue (back of the line)
 *  Returns: NULL
 * */
void enqueue(QueueS* QueuePtr, Queue_NodeS* NodePtr)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
    if (QueuePtr->size == 0)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d109      	bne.n	800115c <enqueue+0x26>
    {
        NodePtr->next_node = NULL;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	619a      	str	r2, [r3, #24]
        QueuePtr->front_node = NodePtr;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	e009      	b.n	8001170 <enqueue+0x3a>
    }
    else
    {
        NodePtr->next_node = NULL;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node->next_node = NodePtr;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	619a      	str	r2, [r3, #24]
    }
    QueuePtr->size++;   
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	609a      	str	r2, [r3, #8]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <dequeue>:
 * [QueueS* QueuePtr] - Pointer to a queue
 * Returns:
 *          Pointer to the removed data from node OR NULL if empty queue
 * */
CustomerS* dequeue(QueueS* QueuePtr)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
    // If the queue is a single item
    if (QueuePtr->size > 0)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d023      	beq.n	80011de <dequeue+0x58>
    {
        Queue_NodeS* old_head = QueuePtr->front_node;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	60fb      	str	r3, [r7, #12]
        CustomerS* customer = old_head->customer;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60bb      	str	r3, [r7, #8]
        if(QueuePtr->size == 1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d106      	bne.n	80011b8 <dequeue+0x32>
        {
            QueuePtr->front_node = NULL;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
            QueuePtr->back_node = NULL;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
 80011b6:	e008      	b.n	80011ca <dequeue+0x44>
        }
        else if (QueuePtr->size > 1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d904      	bls.n	80011ca <dequeue+0x44>
        {
            QueuePtr->front_node = QueuePtr->front_node->next_node;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	615a      	str	r2, [r3, #20]
        }
        QueuePtr->size--;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
        free(old_head);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f007 f8fb 	bl	80083d0 <free>
        return customer;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	e000      	b.n	80011e0 <dequeue+0x5a>
    }
    return NULL;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <add_customer>:
 * Adds a customer to the static Queue object
 * Inputs: None
 * Returns: None
 * */
void add_customer(QueueS* queue_ptr,unsigned int random_time)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
    // Allocate Node
    Queue_NodeS* new_node = (Queue_NodeS*) malloc(sizeof(Queue_NodeS));
 80011f2:	2008      	movs	r0, #8
 80011f4:	f007 f8e4 	bl	80083c0 <malloc>
 80011f8:	4603      	mov	r3, r0
 80011fa:	60fb      	str	r3, [r7, #12]

    // Create new customer to be added
    CustomerS* new_customer = Generate_Customer(random_time);
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f7ff fa17 	bl	8000630 <Generate_Customer>
 8001202:	60b8      	str	r0, [r7, #8]
    new_node->customer = new_customer;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	601a      	str	r2, [r3, #0]
    enqueue(queue_ptr, new_node);
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff92 	bl	8001136 <enqueue>

   queue_ptr->current_wait_time += new_customer->interaction_time;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	611a      	str	r2, [r3, #16]
    if (queue_ptr->size > queue_ptr->max_depth)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d903      	bls.n	8001234 <add_customer+0x4c>
    {
        queue_ptr->max_depth = queue_ptr->size;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
    }

    if (queue_ptr->current_wait_time > queue_ptr->max_wait_time)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	d903      	bls.n	8001248 <add_customer+0x60>
    {
        queue_ptr->max_wait_time = queue_ptr->current_wait_time;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	605a      	str	r2, [r3, #4]
    }

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <generate_time_for_new_cust>:
 * Generates a time between 1 minute and 4 minutes
 * Inputs: None
 * Outputs: The time generated
 * */
unsigned int generate_time_for_new_cust(unsigned int random_time)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_ENTER_QUEUE_TIME;
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <generate_time_for_new_cust+0x2c>)
 800125c:	fba3 1302 	umull	r1, r3, r3, r2
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	333c      	adds	r3, #60	; 0x3c
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	91a2b3c5 	.word	0x91a2b3c5

08001280 <is_empty>:
 * Determines if the given queue is empty
 * Inputs: None
 * Returns: 1 if queue is empty 0 if not
 * */
int is_empty(QueueS* queue_ptr)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    if(queue_ptr->size == 0)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <is_empty+0x14>
    {
        return 1;
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <is_empty+0x16>
    }
    return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_MspInit+0x4c>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6613      	str	r3, [r2, #96]	; 0x60
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_MspInit+0x4c>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	210f      	movs	r1, #15
 80012de:	f06f 0001 	mvn.w	r0, #1
 80012e2:	f000 fad7 	bl	8001894 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_RNG_MspInit+0x38>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10b      	bne.n	800131e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_RNG_MspInit+0x3c>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_RNG_MspInit+0x3c>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_RNG_MspInit+0x3c>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	50060800 	.word	0x50060800
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001344:	d113      	bne.n	800136e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_TIM_Base_MspInit+0x44>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_TIM_Base_MspInit+0x44>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6593      	str	r3, [r2, #88]	; 0x58
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_Base_MspInit+0x44>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	201c      	movs	r0, #28
 8001364:	f000 fa96 	bl	8001894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001368:	201c      	movs	r0, #28
 800136a:	f000 faaf 	bl	80018cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_UART_MspInit+0x8c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12f      	bne.n	80013fe <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_UART_MspInit+0x90>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	4a1a      	ldr	r2, [pc, #104]	; (800140c <HAL_UART_MspInit+0x90>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	6593      	str	r3, [r2, #88]	; 0x58
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_UART_MspInit+0x90>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_UART_MspInit+0x90>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_UART_MspInit+0x90>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_UART_MspInit+0x90>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ce:	2360      	movs	r3, #96	; 0x60
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013de:	2307      	movs	r3, #7
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_UART_MspInit+0x94>)
 80013ea:	f000 fabf 	bl	800196c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	2026      	movs	r0, #38	; 0x26
 80013f4:	f000 fa4e 	bl	8001894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013f8:	2026      	movs	r0, #38	; 0x26
 80013fa:	f000 fa67 	bl	80018cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40004400 	.word	0x40004400
 800140c:	40021000 	.word	0x40021000
 8001410:	48000c00 	.word	0x48000c00

08001414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2019      	movs	r0, #25
 800142a:	f000 fa33 	bl	8001894 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800142e:	2019      	movs	r0, #25
 8001430:	f000 fa4c 	bl	80018cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_InitTick+0x9c>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_InitTick+0x9c>)
 800143a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800143e:	6613      	str	r3, [r2, #96]	; 0x60
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_InitTick+0x9c>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144c:	f107 0210 	add.w	r2, r7, #16
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fa46 	bl	80028e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800145c:	f001 fa2e 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8001460:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_InitTick+0xa0>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	3b01      	subs	r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_InitTick+0xa4>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_InitTick+0xa8>)
 8001474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_InitTick+0xa4>)
 8001478:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_InitTick+0xa4>)
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_InitTick+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_InitTick+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <HAL_InitTick+0xa4>)
 8001492:	f002 f81a 	bl	80034ca <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_InitTick+0xa4>)
 800149e:	f002 f83f 	bl	8003520 <HAL_TIM_Base_Start_IT>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	431bde83 	.word	0x431bde83
 80014b8:	20003248 	.word	0x20003248
 80014bc:	40012c00 	.word	0x40012c00

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014fa:	f002 f83b 	bl	8003574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20003248 	.word	0x20003248

08001508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	master_timer++;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <TIM2_IRQHandler+0x18>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a03      	ldr	r2, [pc, #12]	; (8001520 <TIM2_IRQHandler+0x18>)
 8001514:	6013      	str	r3, [r2, #0]
	//uint8_t buffer[16];
	//sprintf(buffer, "Count: %u\r\n", master_timer);
	//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <TIM2_IRQHandler+0x1c>)
 8001518:	f002 f82c 	bl	8003574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000310c 	.word	0x2000310c
 8001524:	2000317c 	.word	0x2000317c

08001528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <USART2_IRQHandler+0x10>)
 800152e:	f002 fcdd 	bl	8003eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200031c0 	.word	0x200031c0

0800153c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x50>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x16>
		heap_end = &end;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <_sbrk+0x50>)
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <_sbrk+0x54>)
 8001550:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <_sbrk+0x50>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <_sbrk+0x50>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	466a      	mov	r2, sp
 8001562:	4293      	cmp	r3, r2
 8001564:	d907      	bls.n	8001576 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001566:	f006 ff01 	bl	800836c <__errno>
 800156a:	4602      	mov	r2, r0
 800156c:	230c      	movs	r3, #12
 800156e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	e006      	b.n	8001584 <_sbrk+0x48>
	}

	heap_end += incr;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <_sbrk+0x50>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a03      	ldr	r2, [pc, #12]	; (800158c <_sbrk+0x50>)
 8001580:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000d0 	.word	0x200000d0
 8001590:	200032d0 	.word	0x200032d0

08001594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <SystemInit+0x64>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <SystemInit+0x64>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <SystemInit+0x68>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <SystemInit+0x68>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <SystemInit+0x68>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <SystemInit+0x68>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <SystemInit+0x68>)
 80015c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <SystemInit+0x68>)
 80015cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <SystemInit+0x68>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <SystemInit+0x68>)
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <SystemInit+0x68>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SystemInit+0x64>)
 80015e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ea:	609a      	str	r2, [r3, #8]
#endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	40021000 	.word	0x40021000

08001600 <init_teller>:
 * Initialization of a teller struct
 * [TellerS*] teller - pointer to a teller
 * [uint16_t] id     - Id number to initialize the teller with
 * */
void init_teller(TellerS* teller,uint16_t id, unsigned int random_time)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	460b      	mov	r3, r1
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	817b      	strh	r3, [r7, #10]
    teller->total_served = 0;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
    teller->total_time_served = 0;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
    teller->total_time_waiting = 0;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    teller->teller_id = id;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	897a      	ldrh	r2, [r7, #10]
 8001624:	819a      	strh	r2, [r3, #12]
    teller->busy_time = 0;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
    teller->break_info = (BreakS*) malloc(sizeof(BreakS));
 800162c:	2010      	movs	r0, #16
 800162e:	f006 fec7 	bl	80083c0 <malloc>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	615a      	str	r2, [r3, #20]
    teller->status = idle;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	761a      	strb	r2, [r3, #24]
    teller->time_until_break = generate_time_until_break(random_time);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe ffdd 	bl	8000600 <generate_time_until_break>
 8001646:	4602      	mov	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	621a      	str	r2, [r3, #32]
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001658:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800165a:	e003      	b.n	8001664 <LoopCopyDataInit>

0800165c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800165e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001660:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001662:	3104      	adds	r1, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001668:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800166a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800166c:	d3f6      	bcc.n	800165c <CopyDataInit>
	ldr	r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001670:	e002      	b.n	8001678 <LoopFillZerobss>

08001672 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001672:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001674:	f842 3b04 	str.w	r3, [r2], #4

08001678 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <LoopForever+0x16>)
	cmp	r2, r3
 800167a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800167c:	d3f9      	bcc.n	8001672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800167e:	f7ff ff89 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f006 fe79 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001686:	f7fe ffff 	bl	8000688 <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001690:	08008e48 	.word	0x08008e48
	ldr	r0, =_sdata
 8001694:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001698:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800169c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80016a0:	200032d0 	.word	0x200032d0

080016a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_2_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_Init+0x3c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_Init+0x3c>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016be:	2003      	movs	r0, #3
 80016c0:	f000 f8dd 	bl	800187e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fea5 	bl	8001414 <HAL_InitTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	e001      	b.n	80016da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d6:	f7ff fde5 	bl	80012a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016da:	79fb      	ldrb	r3, [r7, #7]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_IncTick+0x1c>)
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	20003288 	.word	0x20003288
 8001708:	20000008 	.word	0x20000008

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20003288 	.word	0x20003288

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff4c 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a6:	f7ff ff61 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	6978      	ldr	r0, [r7, #20]
 80018b2:	f7ff ffb1 	bl	8001818 <NVIC_EncodePriority>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff80 	bl	80017c4 <__NVIC_SetPriority>
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff54 	bl	8001788 <__NVIC_EnableIRQ>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d005      	beq.n	800190c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2204      	movs	r2, #4
 8001904:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	e029      	b.n	8001960 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 020e 	bic.w	r2, r2, #14
 800191a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f003 021c 	and.w	r2, r3, #28
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
    }
  }
  return status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	e17f      	b.n	8001c7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8171 	beq.w	8001c76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d00b      	beq.n	80019b4 <HAL_GPIO_Init+0x48>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a8:	2b11      	cmp	r3, #17
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d130      	bne.n	8001a16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ea:	2201      	movs	r2, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 0201 	and.w	r2, r3, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d118      	bne.n	8001a54 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f003 0201 	and.w	r2, r3, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x128>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b12      	cmp	r3, #18
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	6939      	ldr	r1, [r7, #16]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80ac 	beq.w	8001c76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b36:	4a59      	ldr	r2, [pc, #356]	; (8001c9c <HAL_GPIO_Init+0x330>)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b60:	d025      	beq.n	8001bae <HAL_GPIO_Init+0x242>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x334>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01f      	beq.n	8001baa <HAL_GPIO_Init+0x23e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x338>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d019      	beq.n	8001ba6 <HAL_GPIO_Init+0x23a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x33c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x236>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x340>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x232>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x344>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x22e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <HAL_GPIO_Init+0x348>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x22a>
 8001b92:	2306      	movs	r3, #6
 8001b94:	e00c      	b.n	8001bb0 <HAL_GPIO_Init+0x244>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e00a      	b.n	8001bb0 <HAL_GPIO_Init+0x244>
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	e008      	b.n	8001bb0 <HAL_GPIO_Init+0x244>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x244>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e004      	b.n	8001bb0 <HAL_GPIO_Init+0x244>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_Init+0x244>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x244>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	f002 0203 	and.w	r2, r2, #3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc0:	4936      	ldr	r1, [pc, #216]	; (8001c9c <HAL_GPIO_Init+0x330>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bf2:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f47f ae78 	bne.w	800197c <HAL_GPIO_Init+0x10>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	48001000 	.word	0x48001000
 8001cb0:	48001400 	.word	0x48001400
 8001cb4:	48001800 	.word	0x48001800
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd8:	e002      	b.n	8001ce0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40007000 	.word	0x40007000

08001d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d36:	d130      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d44:	d038      	beq.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2232      	movs	r2, #50	; 0x32
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0c9b      	lsrs	r3, r3, #18
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d6c:	e002      	b.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d80:	d102      	bne.n	8001d88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f2      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d94:	d110      	bne.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e00f      	b.n	8001dba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da6:	d007      	beq.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001db0:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e3d4      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4ba1      	ldr	r3, [pc, #644]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	4b9e      	ldr	r3, [pc, #632]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80e4 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4a>
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	f040 808b 	bne.w	8001f2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	f040 8087 	bne.w	8001f2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e1e:	4b93      	ldr	r3, [pc, #588]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x62>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e3ac      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <HAL_RCC_OscConfig+0x7c>
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4e:	e005      	b.n	8001e5c <HAL_RCC_OscConfig+0x88>
 8001e50:	4b86      	ldr	r3, [pc, #536]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d223      	bcs.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fd71 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e38d      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e74:	4b7d      	ldr	r3, [pc, #500]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a7c      	ldr	r2, [pc, #496]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b7a      	ldr	r3, [pc, #488]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4977      	ldr	r1, [pc, #476]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e92:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	4972      	ldr	r1, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
 8001ea6:	e025      	b.n	8001ef4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea8:	4b70      	ldr	r3, [pc, #448]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a6f      	ldr	r2, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b6d      	ldr	r3, [pc, #436]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	496a      	ldr	r1, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec6:	4b69      	ldr	r3, [pc, #420]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fd31 	bl	800294c <RCC_SetFlashLatencyFromMSIRange>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e34d      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef4:	f000 fc36 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8001ef8:	4601      	mov	r1, r0
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x29c>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_OscConfig+0x2a0>)
 8001f12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f14:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x2a4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fa7b 	bl	8001414 <HAL_InitTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d052      	beq.n	8001fce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	e331      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d032      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fbe4 	bl	800170c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f48:	f7ff fbe0 	bl	800170c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e31a      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a40      	ldr	r2, [pc, #256]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f6c:	f043 0308 	orr.w	r3, r3, #8
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	493b      	ldr	r1, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	4936      	ldr	r1, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
 8001f98:	e01a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fbb1 	bl	800170c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fae:	f7ff fbad 	bl	800170c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e2e7      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x1da>
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d074      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x21a>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	d10e      	bne.n	8002006 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d064      	beq.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d160      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e2c4      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x24a>
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e01d      	b.n	800205a <HAL_RCC_OscConfig+0x286>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002026:	d10c      	bne.n	8002042 <HAL_RCC_OscConfig+0x26e>
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0x298>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_RCC_OscConfig+0x298>)
 800202e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0c      	ldr	r2, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x298>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e00b      	b.n	800205a <HAL_RCC_OscConfig+0x286>
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_RCC_OscConfig+0x298>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01c      	beq.n	800209c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff fb53 	bl	800170c <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002068:	e011      	b.n	800208e <HAL_RCC_OscConfig+0x2ba>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	08008dbc 	.word	0x08008dbc
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fb46 	bl	800170c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e280      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	4baf      	ldr	r3, [pc, #700]	; (800234c <HAL_RCC_OscConfig+0x578>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x2a8>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff fb36 	bl	800170c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fb32 	bl	800170c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e26c      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b6:	4ba5      	ldr	r3, [pc, #660]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2d0>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d060      	beq.n	8002194 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x310>
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d119      	bne.n	8002112 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d116      	bne.n	8002112 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e4:	4b99      	ldr	r3, [pc, #612]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x328>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e249      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b93      	ldr	r3, [pc, #588]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	4990      	ldr	r1, [pc, #576]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002110:	e040      	b.n	8002194 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d023      	beq.n	8002162 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211a:	4b8c      	ldr	r3, [pc, #560]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8b      	ldr	r2, [pc, #556]	; (800234c <HAL_RCC_OscConfig+0x578>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7ff faf1 	bl	800170c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212e:	f7ff faed 	bl	800170c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e227      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002140:	4b82      	ldr	r3, [pc, #520]	; (800234c <HAL_RCC_OscConfig+0x578>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	497c      	ldr	r1, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	e018      	b.n	8002194 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002162:	4b7a      	ldr	r3, [pc, #488]	; (800234c <HAL_RCC_OscConfig+0x578>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a79      	ldr	r2, [pc, #484]	; (800234c <HAL_RCC_OscConfig+0x578>)
 8002168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7ff facd 	bl	800170c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002176:	f7ff fac9 	bl	800170c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e203      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002188:	4b70      	ldr	r3, [pc, #448]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d03c      	beq.n	800221a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a8:	4b68      	ldr	r3, [pc, #416]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	4a67      	ldr	r2, [pc, #412]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7ff faa8 	bl	800170c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7ff faa4 	bl	800170c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1de      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d2:	4b5e      	ldr	r3, [pc, #376]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80021d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ef      	beq.n	80021c0 <HAL_RCC_OscConfig+0x3ec>
 80021e0:	e01b      	b.n	800221a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b5a      	ldr	r3, [pc, #360]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80021e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e8:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7ff fa8b 	bl	800170c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fa:	f7ff fa87 	bl	800170c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1c1      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220c:	4b4f      	ldr	r3, [pc, #316]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ef      	bne.n	80021fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80a6 	beq.w	8002374 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800222c:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10d      	bne.n	8002254 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002238:	4b44      	ldr	r3, [pc, #272]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	4a43      	ldr	r2, [pc, #268]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	6593      	str	r3, [r2, #88]	; 0x58
 8002244:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x578>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002250:	2301      	movs	r3, #1
 8002252:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002254:	4b3e      	ldr	r3, [pc, #248]	; (8002350 <HAL_RCC_OscConfig+0x57c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d118      	bne.n	8002292 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002260:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <HAL_RCC_OscConfig+0x57c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a3a      	ldr	r2, [pc, #232]	; (8002350 <HAL_RCC_OscConfig+0x57c>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226c:	f7ff fa4e 	bl	800170c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7ff fa4a 	bl	800170c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e184      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_RCC_OscConfig+0x57c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d108      	bne.n	80022ac <HAL_RCC_OscConfig+0x4d8>
 800229a:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022aa:	e024      	b.n	80022f6 <HAL_RCC_OscConfig+0x522>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d110      	bne.n	80022d6 <HAL_RCC_OscConfig+0x502>
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d4:	e00f      	b.n	80022f6 <HAL_RCC_OscConfig+0x522>
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_RCC_OscConfig+0x578>)
 80022ee:	f023 0304 	bic.w	r3, r3, #4
 80022f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7ff fa05 	bl	800170c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff fa01 	bl	800170c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e139      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_OscConfig+0x578>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0ed      	beq.n	8002306 <HAL_RCC_OscConfig+0x532>
 800232a:	e01a      	b.n	8002362 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7ff f9ee 	bl	800170c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002332:	e00f      	b.n	8002354 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7ff f9ea 	bl	800170c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d906      	bls.n	8002354 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e122      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002354:	4b90      	ldr	r3, [pc, #576]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e8      	bne.n	8002334 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002362:	7ffb      	ldrb	r3, [r7, #31]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	4a8a      	ldr	r2, [pc, #552]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8108 	beq.w	800258e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	2b02      	cmp	r3, #2
 8002384:	f040 80d0 	bne.w	8002528 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002388:	4b83      	ldr	r3, [pc, #524]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	429a      	cmp	r2, r3
 800239a:	d130      	bne.n	80023fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	3b01      	subs	r3, #1
 80023a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d127      	bne.n	80023fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d11f      	bne.n	80023fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c8:	2a07      	cmp	r2, #7
 80023ca:	bf14      	ite	ne
 80023cc:	2201      	movne	r2, #1
 80023ce:	2200      	moveq	r2, #0
 80023d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d113      	bne.n	80023fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	3b01      	subs	r3, #1
 80023e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d06e      	beq.n	80024dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b0c      	cmp	r3, #12
 8002402:	d069      	beq.n	80024d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b7      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002420:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5c      	ldr	r2, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800242a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800242c:	f7ff f96e 	bl	800170c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7ff f96a 	bl	800170c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0a4      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002446:	4b54      	ldr	r3, [pc, #336]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <HAL_RCC_OscConfig+0x7c8>)
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002462:	3a01      	subs	r2, #1
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800246c:	0212      	lsls	r2, r2, #8
 800246e:	4311      	orrs	r1, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002474:	0852      	lsrs	r2, r2, #1
 8002476:	3a01      	subs	r2, #1
 8002478:	0552      	lsls	r2, r2, #21
 800247a:	4311      	orrs	r1, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002480:	0852      	lsrs	r2, r2, #1
 8002482:	3a01      	subs	r2, #1
 8002484:	0652      	lsls	r2, r2, #25
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800248c:	0912      	lsrs	r2, r2, #4
 800248e:	0452      	lsls	r2, r2, #17
 8002490:	430a      	orrs	r2, r1
 8002492:	4941      	ldr	r1, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800249e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024b0:	f7ff f92c 	bl	800170c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7ff f928 	bl	800170c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e062      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ca:	4b33      	ldr	r3, [pc, #204]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d6:	e05a      	b.n	800258e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e059      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d152      	bne.n	800258e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002500:	f7ff f904 	bl	800170c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff f900 	bl	800170c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e03a      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x734>
 8002526:	e032      	b.n	800258e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d02d      	beq.n	800258a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002538:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800254c:	f023 0303 	bic.w	r3, r3, #3
 8002550:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 8002558:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff f8d3 	bl	800170c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff f8cf 	bl	800170c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e009      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x7c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x796>
 8002588:	e001      	b.n	800258e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	f99d808c 	.word	0xf99d808c

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0c8      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b66      	ldr	r3, [pc, #408]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b63      	ldr	r3, [pc, #396]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4961      	ldr	r1, [pc, #388]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b0      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d04c      	beq.n	800268a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f8:	4b56      	ldr	r3, [pc, #344]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d121      	bne.n	8002648 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e09e      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d107      	bne.n	8002620 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d115      	bne.n	8002648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e092      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002628:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e086      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e07e      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002648:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 0203 	bic.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	493f      	ldr	r1, [pc, #252]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265a:	f7ff f857 	bl	800170c <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002660:	e00a      	b.n	8002678 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002662:	f7ff f853 	bl	800170c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e066      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002678:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 020c 	and.w	r2, r3, #12
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	429a      	cmp	r2, r3
 8002688:	d1eb      	bne.n	8002662 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	492c      	ldr	r1, [pc, #176]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d210      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4924      	ldr	r1, [pc, #144]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCC_ClockConfig+0x1b0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e036      	b.n	8002746 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4918      	ldr	r1, [pc, #96]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4910      	ldr	r1, [pc, #64]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002716:	f000 f825 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 800271a:	4601      	mov	r1, r0
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_RCC_ClockConfig+0x1b4>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	fa21 f303 	lsr.w	r3, r1, r3
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fe6a 	bl	8001414 <HAL_InitTick>
 8002740:	4603      	mov	r3, r0
 8002742:	72fb      	strb	r3, [r7, #11]

  return status;
 8002744:	7afb      	ldrb	r3, [r7, #11]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40022000 	.word	0x40022000
 8002754:	40021000 	.word	0x40021000
 8002758:	08008dbc 	.word	0x08008dbc
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004

08002764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002772:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x34>
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d121      	bne.n	80027d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d11e      	bne.n	80027d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002798:	4b33      	ldr	r3, [pc, #204]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e005      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027c0:	4a2a      	ldr	r2, [pc, #168]	; (800286c <HAL_RCC_GetSysClockFreq+0x108>)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d102      	bne.n	80027e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	e004      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d133      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0xa4>
 8002802:	2b03      	cmp	r3, #3
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0xaa>
 8002806:	e005      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_GetSysClockFreq+0x10c>)
 800280a:	617b      	str	r3, [r7, #20]
      break;
 800280c:	e005      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_RCC_GetSysClockFreq+0x110>)
 8002810:	617b      	str	r3, [r7, #20]
      break;
 8002812:	e002      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	617b      	str	r3, [r7, #20]
      break;
 8002818:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	3301      	adds	r3, #1
 8002826:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	fb02 f203 	mul.w	r2, r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_RCC_GetSysClockFreq+0x104>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0e5b      	lsrs	r3, r3, #25
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	3301      	adds	r3, #1
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800285a:	69bb      	ldr	r3, [r7, #24]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3724      	adds	r7, #36	; 0x24
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40021000 	.word	0x40021000
 800286c:	08008dd4 	.word	0x08008dd4
 8002870:	00f42400 	.word	0x00f42400
 8002874:	007a1200 	.word	0x007a1200

08002878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_GetHCLKFreq+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002894:	f7ff fff0 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002898:	4601      	mov	r1, r0
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08008dcc 	.word	0x08008dcc

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028c0:	f7ff ffda 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028c4:	4601      	mov	r1, r0
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0adb      	lsrs	r3, r3, #11
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	08008dcc 	.word	0x08008dcc

080028e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	220f      	movs	r2, #15
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0203 	and.w	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_GetClockConfig+0x5c>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_RCC_GetClockConfig+0x60>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0207 	and.w	r2, r3, #7
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40022000 	.word	0x40022000

0800294c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002964:	f7ff f9d2 	bl	8001d0c <HAL_PWREx_GetVoltageRange>
 8002968:	6178      	str	r0, [r7, #20]
 800296a:	e014      	b.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6593      	str	r3, [r2, #88]	; 0x58
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002984:	f7ff f9c2 	bl	8001d0c <HAL_PWREx_GetVoltageRange>
 8002988:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002994:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299c:	d10b      	bne.n	80029b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d919      	bls.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2ba0      	cmp	r3, #160	; 0xa0
 80029a8:	d902      	bls.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029aa:	2302      	movs	r3, #2
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	e013      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b0:	2301      	movs	r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	e010      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d902      	bls.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029bc:	2303      	movs	r3, #3
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e00a      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d102      	bne.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c8:	2302      	movs	r3, #2
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e004      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b70      	cmp	r3, #112	; 0x70
 80029d2:	d101      	bne.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d4:	2301      	movs	r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 0207 	bic.w	r2, r3, #7
 80029e0:	4909      	ldr	r1, [pc, #36]	; (8002a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40022000 	.word	0x40022000

08002a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d03f      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d01c      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a36:	d802      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002a3c:	e01f      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a42:	d003      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a48:	d01c      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002a4a:	e018      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a4c:	4b85      	ldr	r3, [pc, #532]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a84      	ldr	r2, [pc, #528]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a58:	e015      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fac9 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a6a:	e00c      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3320      	adds	r3, #32
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fbb0 	bl	80031d8 <RCCEx_PLLSAI2_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a7c:	e003      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	74fb      	strb	r3, [r7, #19]
      break;
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a8c:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9a:	4972      	ldr	r1, [pc, #456]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aa2:	e001      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d03f      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d01c      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002abe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac2:	d802      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ac8:	e01f      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ace:	d003      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ad0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ad4:	d01c      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002ad6:	e018      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ae4:	e015      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fa83 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002af6:	e00c      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3320      	adds	r3, #32
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fb6a 	bl	80031d8 <RCCEx_PLLSAI2_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b08:	e003      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b0e:	e000      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b18:	4b52      	ldr	r3, [pc, #328]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b26:	494f      	ldr	r1, [pc, #316]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b2e:	e001      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a0 	beq.w	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6593      	str	r3, [r2, #88]	; 0x58
 8002b68:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b74:	2301      	movs	r3, #1
 8002b76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fdc2 	bl	800170c <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fdbe 	bl	800170c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d902      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b9e:	e005      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ba0:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ef      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d15c      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01f      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d019      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fd7d 	bl	800170c <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c14:	e00b      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe fd79 	bl	800170c <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d902      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ec      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c5a:	e009      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	74bb      	strb	r3, [r7, #18]
 8002c60:	e006      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c70:	7c7b      	ldrb	r3, [r7, #17]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d105      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c76:	4b9e      	ldr	r3, [pc, #632]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	4a9d      	ldr	r2, [pc, #628]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8e:	4b98      	ldr	r3, [pc, #608]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c94:	f023 0203 	bic.w	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	4994      	ldr	r1, [pc, #592]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb0:	4b8f      	ldr	r3, [pc, #572]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 020c 	bic.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	498c      	ldr	r1, [pc, #560]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cd2:	4b87      	ldr	r3, [pc, #540]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4983      	ldr	r1, [pc, #524]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf4:	4b7e      	ldr	r3, [pc, #504]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	497b      	ldr	r1, [pc, #492]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d16:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d24:	4972      	ldr	r1, [pc, #456]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d38:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	496a      	ldr	r1, [pc, #424]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	4961      	ldr	r1, [pc, #388]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d7c:	4b5c      	ldr	r3, [pc, #368]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8a:	4959      	ldr	r1, [pc, #356]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dac:	4950      	ldr	r1, [pc, #320]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	4948      	ldr	r1, [pc, #288]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	493f      	ldr	r1, [pc, #252]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d028      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e04:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e12:	4937      	ldr	r1, [pc, #220]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e22:	d106      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e24:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a31      	ldr	r2, [pc, #196]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2e:	60d3      	str	r3, [r2, #12]
 8002e30:	e011      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f8d8 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d028      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	491f      	ldr	r1, [pc, #124]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a1a      	ldr	r2, [pc, #104]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8c:	60d3      	str	r3, [r2, #12]
 8002e8e:	e011      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f8a9 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d02b      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ede:	d109      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a02      	ldr	r2, [pc, #8]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eea:	60d3      	str	r3, [r2, #12]
 8002eec:	e014      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f877 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02f      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f32:	4928      	ldr	r1, [pc, #160]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f42:	d10d      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2102      	movs	r1, #2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f854 	bl	8002ff8 <RCCEx_PLLSAI1_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d014      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f5a:	7cfb      	ldrb	r3, [r7, #19]
 8002f5c:	74bb      	strb	r3, [r7, #18]
 8002f5e:	e011      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3320      	adds	r3, #32
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f931 	bl	80031d8 <RCCEx_PLLSAI2_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f9e:	490d      	ldr	r1, [pc, #52]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc2:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fca:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d018      	beq.n	8003044 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003012:	4b70      	ldr	r3, [pc, #448]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0203 	and.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d10d      	bne.n	800303e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
       ||
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800302a:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
       ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d044      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e041      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d00c      	beq.n	8003066 <RCCEx_PLLSAI1_Config+0x6e>
 800304c:	2b03      	cmp	r3, #3
 800304e:	d013      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x80>
 8003050:	2b01      	cmp	r3, #1
 8003052:	d120      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003054:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11d      	bne.n	800309c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003064:	e01a      	b.n	800309c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e013      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003078:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10f      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003094:	e006      	b.n	80030a4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      break;
 800309a:	e004      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800309c:	bf00      	nop
 800309e:	e002      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80030a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	3b01      	subs	r3, #1
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	430b      	orrs	r3, r1
 80030c2:	4944      	ldr	r1, [pc, #272]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d17d      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030da:	f7fe fb17 	bl	800170c <HAL_GetTick>
 80030de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030e0:	e009      	b.n	80030f6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e2:	f7fe fb13 	bl	800170c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	73fb      	strb	r3, [r7, #15]
        break;
 80030f4:	e005      	b.n	8003102 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ef      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d160      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d111      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	0211      	lsls	r1, r2, #8
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68d2      	ldr	r2, [r2, #12]
 8003124:	0912      	lsrs	r2, r2, #4
 8003126:	0452      	lsls	r2, r2, #17
 8003128:	430a      	orrs	r2, r1
 800312a:	492a      	ldr	r1, [pc, #168]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	610b      	str	r3, [r1, #16]
 8003130:	e027      	b.n	8003182 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d112      	bne.n	800315e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6892      	ldr	r2, [r2, #8]
 8003148:	0211      	lsls	r1, r2, #8
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6912      	ldr	r2, [r2, #16]
 800314e:	0852      	lsrs	r2, r2, #1
 8003150:	3a01      	subs	r2, #1
 8003152:	0552      	lsls	r2, r2, #21
 8003154:	430a      	orrs	r2, r1
 8003156:	491f      	ldr	r1, [pc, #124]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	610b      	str	r3, [r1, #16]
 800315c:	e011      	b.n	8003182 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003166:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6892      	ldr	r2, [r2, #8]
 800316e:	0211      	lsls	r1, r2, #8
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6952      	ldr	r2, [r2, #20]
 8003174:	0852      	lsrs	r2, r2, #1
 8003176:	3a01      	subs	r2, #1
 8003178:	0652      	lsls	r2, r2, #25
 800317a:	430a      	orrs	r2, r1
 800317c:	4915      	ldr	r1, [pc, #84]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003188:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800318c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe fabd 	bl	800170c <HAL_GetTick>
 8003192:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003194:	e009      	b.n	80031aa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003196:	f7fe fab9 	bl	800170c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d902      	bls.n	80031aa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	73fb      	strb	r3, [r7, #15]
          break;
 80031a8:	e005      	b.n	80031b6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ef      	beq.n	8003196 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000

080031d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031e6:	4b68      	ldr	r3, [pc, #416]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d018      	beq.n	8003224 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0203 	and.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10d      	bne.n	800321e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
       ||
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800320a:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
       ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d044      	beq.n	80032a8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	e041      	b.n	80032a8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d00c      	beq.n	8003246 <RCCEx_PLLSAI2_Config+0x6e>
 800322c:	2b03      	cmp	r3, #3
 800322e:	d013      	beq.n	8003258 <RCCEx_PLLSAI2_Config+0x80>
 8003230:	2b01      	cmp	r3, #1
 8003232:	d120      	bne.n	8003276 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003234:	4b54      	ldr	r3, [pc, #336]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11d      	bne.n	800327c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e01a      	b.n	800327c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	2b00      	cmp	r3, #0
 8003250:	d116      	bne.n	8003280 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003256:	e013      	b.n	8003280 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003258:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10f      	bne.n	8003284 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003264:	4b48      	ldr	r3, [pc, #288]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003274:	e006      	b.n	8003284 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
      break;
 800327a:	e004      	b.n	8003286 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800327c:	bf00      	nop
 800327e:	e002      	b.n	8003286 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003284:	bf00      	nop
    }

    if(status == HAL_OK)
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	3b01      	subs	r3, #1
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	430b      	orrs	r3, r1
 80032a2:	4939      	ldr	r1, [pc, #228]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d167      	bne.n	800337e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a35      	ldr	r2, [pc, #212]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ba:	f7fe fa27 	bl	800170c <HAL_GetTick>
 80032be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032c0:	e009      	b.n	80032d6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032c2:	f7fe fa23 	bl	800170c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d902      	bls.n	80032d6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	73fb      	strb	r3, [r7, #15]
        break;
 80032d4:	e005      	b.n	80032e2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032d6:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ef      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d14a      	bne.n	800337e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d111      	bne.n	8003312 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	0211      	lsls	r1, r2, #8
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68d2      	ldr	r2, [r2, #12]
 8003304:	0912      	lsrs	r2, r2, #4
 8003306:	0452      	lsls	r2, r2, #17
 8003308:	430a      	orrs	r2, r1
 800330a:	491f      	ldr	r1, [pc, #124]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	614b      	str	r3, [r1, #20]
 8003310:	e011      	b.n	8003336 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800331a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6892      	ldr	r2, [r2, #8]
 8003322:	0211      	lsls	r1, r2, #8
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6912      	ldr	r2, [r2, #16]
 8003328:	0852      	lsrs	r2, r2, #1
 800332a:	3a01      	subs	r2, #1
 800332c:	0652      	lsls	r2, r2, #25
 800332e:	430a      	orrs	r2, r1
 8003330:	4915      	ldr	r1, [pc, #84]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe f9e3 	bl	800170c <HAL_GetTick>
 8003346:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003348:	e009      	b.n	800335e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800334a:	f7fe f9df 	bl	800170c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d902      	bls.n	800335e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	73fb      	strb	r3, [r7, #15]
          break;
 800335c:	e005      	b.n	800336a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0ef      	beq.n	800334a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e042      	b.n	8003424 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	795b      	ldrb	r3, [r3, #5]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd ffa0 	bl	80012f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0204 	orr.w	r2, r2, #4
 80033c8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d104      	bne.n	80033e2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e020      	b.n	8003424 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80033e2:	f7fe f993 	bl	800170c <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80033e8:	e00e      	b.n	8003408 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80033ea:	f7fe f98f 	bl	800170c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d907      	bls.n	8003408 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2204      	movs	r2, #4
 80033fc:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e00d      	b.n	8003424 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d0e9      	beq.n	80033ea <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003442:	2302      	movs	r3, #2
 8003444:	e03d      	b.n	80034c2 <HAL_RNG_GenerateRandomNumber+0x96>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	795b      	ldrb	r3, [r3, #5]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d12c      	bne.n	80034b0 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800345c:	f7fe f956 	bl	800170c <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003462:	e011      	b.n	8003488 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003464:	f7fe f952 	bl	800170c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d90a      	bls.n	8003488 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e01c      	b.n	80034c2 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d1e6      	bne.n	8003464 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	715a      	strb	r2, [r3, #5]
 80034ae:	e004      	b.n	80034ba <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2204      	movs	r2, #4
 80034b4:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	711a      	strb	r2, [r3, #4]

  return status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01d      	b.n	8003518 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fd ff1f 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f000 fa33 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_TIM_Base_Start_IT+0x50>)
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b06      	cmp	r3, #6
 8003548:	d00b      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x42>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003550:	d007      	beq.n	8003562 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	00010007 	.word	0x00010007

08003574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d122      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d11b      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0202 	mvn.w	r2, #2
 80035a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9be 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9b0 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f9c1 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d122      	bne.n	8003624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d11b      	bne.n	8003624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0204 	mvn.w	r2, #4
 80035f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f994 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f986 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f997 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b08      	cmp	r3, #8
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0208 	mvn.w	r2, #8
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2204      	movs	r2, #4
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f96a 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f95c 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f96d 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b10      	cmp	r3, #16
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b10      	cmp	r3, #16
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0210 	mvn.w	r2, #16
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2208      	movs	r2, #8
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f940 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f932 	bl	8003924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f943 	bl	800394c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0201 	mvn.w	r2, #1
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fce8 	bl	80010c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d10e      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d107      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 faee 	bl	8003d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003732:	d10e      	bne.n	8003752 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d107      	bne.n	8003752 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800374a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fae1 	bl	8003d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d10e      	bne.n	800377e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d107      	bne.n	800377e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8f1 	bl	8003960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d10e      	bne.n	80037aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d107      	bne.n	80037aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f06f 0220 	mvn.w	r2, #32
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 faa1 	bl	8003cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_TIM_ConfigClockSource+0x18>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e0a8      	b.n	800391c <HAL_TIM_ConfigClockSource+0x16a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d067      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x124>
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d80b      	bhi.n	8003822 <HAL_TIM_ConfigClockSource+0x70>
 800380a:	2b10      	cmp	r3, #16
 800380c:	d073      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x144>
 800380e:	2b10      	cmp	r3, #16
 8003810:	d802      	bhi.n	8003818 <HAL_TIM_ConfigClockSource+0x66>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d06f      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003816:	e078      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003818:	2b20      	cmp	r3, #32
 800381a:	d06c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x144>
 800381c:	2b30      	cmp	r3, #48	; 0x30
 800381e:	d06a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003820:	e073      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003822:	2b70      	cmp	r3, #112	; 0x70
 8003824:	d00d      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x90>
 8003826:	2b70      	cmp	r3, #112	; 0x70
 8003828:	d804      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x82>
 800382a:	2b50      	cmp	r3, #80	; 0x50
 800382c:	d033      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xe4>
 800382e:	2b60      	cmp	r3, #96	; 0x60
 8003830:	d041      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003832:	e06a      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003838:	d066      	beq.n	8003908 <HAL_TIM_ConfigClockSource+0x156>
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d017      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003840:	e063      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f000 f9a3 	bl	8003b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003864:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	609a      	str	r2, [r3, #8]
      break;
 800386e:	e04c      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f000 f98c 	bl	8003b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e039      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f000 f900 	bl	8003aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2150      	movs	r1, #80	; 0x50
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f959 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80038b4:	e029      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 f91f 	bl	8003b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2160      	movs	r1, #96	; 0x60
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f949 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80038d4:	e019      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 f8e0 	bl	8003aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f939 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 80038f4:	e009      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f000 f930 	bl	8003b66 <TIM_ITRx_SetConfig>
      break;
 8003906:	e000      	b.n	800390a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003908:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <TIM_Base_SetConfig+0x114>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a3d      	ldr	r2, [pc, #244]	; (8003a8c <TIM_Base_SetConfig+0x118>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <TIM_Base_SetConfig+0x11c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a3b      	ldr	r2, [pc, #236]	; (8003a94 <TIM_Base_SetConfig+0x120>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3a      	ldr	r2, [pc, #232]	; (8003a98 <TIM_Base_SetConfig+0x124>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <TIM_Base_SetConfig+0x114>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01f      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d01b      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <TIM_Base_SetConfig+0x118>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d017      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <TIM_Base_SetConfig+0x11c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <TIM_Base_SetConfig+0x120>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00f      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <TIM_Base_SetConfig+0x124>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <TIM_Base_SetConfig+0x128>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <TIM_Base_SetConfig+0x12c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_Base_SetConfig+0x9a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <TIM_Base_SetConfig+0x130>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d108      	bne.n	8003a20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <TIM_Base_SetConfig+0x114>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0xf8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <TIM_Base_SetConfig+0x124>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0xf8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <TIM_Base_SetConfig+0x128>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0xf8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <TIM_Base_SetConfig+0x12c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0xf8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <TIM_Base_SetConfig+0x130>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	615a      	str	r2, [r3, #20]
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40013400 	.word	0x40013400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 030a 	bic.w	r3, r3, #10
 8003ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b087      	sub	sp, #28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0210 	bic.w	r2, r3, #16
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	031b      	lsls	r3, r3, #12
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f043 0307 	orr.w	r3, r3, #7
 8003b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e068      	b.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2e      	ldr	r2, [pc, #184]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c66:	d018      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40014000 	.word	0x40014000

08003cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e040      	b.n	8003dbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fb16 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa1a 	bl	80041a0 <UART_SetConfig>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e022      	b.n	8003dbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fd80 	bl	8004884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fe07 	bl	80049c8 <UART_CheckIdleState>
 8003dba:	4603      	mov	r3, r0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	f040 8081 	bne.w	8003ee0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_UART_Transmit+0x26>
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e079      	b.n	8003ee2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_UART_Transmit+0x38>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e072      	b.n	8003ee2 <HAL_UART_Transmit+0x11e>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2221      	movs	r2, #33	; 0x21
 8003e0e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003e10:	f7fd fc7c 	bl	800170c <HAL_GetTick>
 8003e14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	88fa      	ldrh	r2, [r7, #6]
 8003e1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	88fa      	ldrh	r2, [r7, #6]
 8003e22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d108      	bne.n	8003e42 <HAL_UART_Transmit+0x7e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	e003      	b.n	8003e4a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003e52:	e02d      	b.n	8003eb0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fdf7 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e039      	b.n	8003ee2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10b      	bne.n	8003e8c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	881a      	ldrh	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e80:	b292      	uxth	r2, r2
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	3302      	adds	r3, #2
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e008      	b.n	8003e9e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b292      	uxth	r2, r2
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1cb      	bne.n	8003e54 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fdc3 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e005      	b.n	8003ee2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d113      	bne.n	8003f44 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00e      	beq.n	8003f44 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8114 	beq.w	8004162 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
      }
      return;
 8003f42:	e10e      	b.n	8004162 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80d6 	beq.w	80040f8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80cb 	beq.w	80040f8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <HAL_UART_IRQHandler+0x9e>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xc6>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003faa:	f043 0204 	orr.w	r2, r3, #4
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_UART_IRQHandler+0xee>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	f043 0208 	orr.w	r2, r3, #8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00f      	beq.n	8004036 <HAL_UART_IRQHandler+0x14a>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8093 	beq.w	8004166 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004068:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d004      	beq.n	8004082 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800407e:	2b00      	cmp	r3, #0
 8004080:	d031      	beq.n	80040e6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fd60 	bl	8004b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d123      	bne.n	80040de <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d013      	beq.n	80040d6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	4a30      	ldr	r2, [pc, #192]	; (8004174 <HAL_UART_IRQHandler+0x288>)
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd fc14 	bl	80018e8 <HAL_DMA_Abort_IT>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80040d0:	4610      	mov	r0, r2
 80040d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	e00e      	b.n	80040f4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f858 	bl	800418c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	e00a      	b.n	80040f4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f854 	bl	800418c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e006      	b.n	80040f4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f850 	bl	800418c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80040f2:	e038      	b.n	8004166 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	bf00      	nop
    return;
 80040f6:	e036      	b.n	8004166 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <HAL_UART_IRQHandler+0x232>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fd65 	bl	8004be6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800411c:	e026      	b.n	800416c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
    }
    return;
 8004142:	e012      	b.n	800416a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <HAL_UART_IRQHandler+0x280>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fd2b 	bl	8004bb4 <UART_EndTransmit_IT>
    return;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <HAL_UART_IRQHandler+0x280>
      return;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <HAL_UART_IRQHandler+0x280>
    return;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <HAL_UART_IRQHandler+0x280>
    return;
 800416a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	08004b89 	.word	0x08004b89

08004178 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80041a4:	b08a      	sub	sp, #40	; 0x28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4bb8      	ldr	r3, [pc, #736]	; (80044b8 <UART_SetConfig+0x318>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041de:	430b      	orrs	r3, r1
 80041e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4aae      	ldr	r2, [pc, #696]	; (80044bc <UART_SetConfig+0x31c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	4313      	orrs	r3, r2
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4aa5      	ldr	r2, [pc, #660]	; (80044c0 <UART_SetConfig+0x320>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d126      	bne.n	800427e <UART_SetConfig+0xde>
 8004230:	4ba4      	ldr	r3, [pc, #656]	; (80044c4 <UART_SetConfig+0x324>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b03      	cmp	r3, #3
 800423c:	d81a      	bhi.n	8004274 <UART_SetConfig+0xd4>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0xa4>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004255 	.word	0x08004255
 8004248:	08004265 	.word	0x08004265
 800424c:	0800425d 	.word	0x0800425d
 8004250:	0800426d 	.word	0x0800426d
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e105      	b.n	8004468 <UART_SetConfig+0x2c8>
 800425c:	2302      	movs	r3, #2
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e101      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004264:	2304      	movs	r3, #4
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e0fd      	b.n	8004468 <UART_SetConfig+0x2c8>
 800426c:	2308      	movs	r3, #8
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e0f9      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004274:	2310      	movs	r3, #16
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	bf00      	nop
 800427c:	e0f4      	b.n	8004468 <UART_SetConfig+0x2c8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a91      	ldr	r2, [pc, #580]	; (80044c8 <UART_SetConfig+0x328>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d138      	bne.n	80042fa <UART_SetConfig+0x15a>
 8004288:	4b8e      	ldr	r3, [pc, #568]	; (80044c4 <UART_SetConfig+0x324>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d82c      	bhi.n	80042f0 <UART_SetConfig+0x150>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <UART_SetConfig+0xfc>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080042f1 	.word	0x080042f1
 80042a4:	080042f1 	.word	0x080042f1
 80042a8:	080042f1 	.word	0x080042f1
 80042ac:	080042e1 	.word	0x080042e1
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	080042f1 	.word	0x080042f1
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	080042d9 	.word	0x080042d9
 80042c0:	080042f1 	.word	0x080042f1
 80042c4:	080042f1 	.word	0x080042f1
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042e9 	.word	0x080042e9
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e0c7      	b.n	8004468 <UART_SetConfig+0x2c8>
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	e0c3      	b.n	8004468 <UART_SetConfig+0x2c8>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e0bf      	b.n	8004468 <UART_SetConfig+0x2c8>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e0bb      	b.n	8004468 <UART_SetConfig+0x2c8>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	bf00      	nop
 80042f8:	e0b6      	b.n	8004468 <UART_SetConfig+0x2c8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a73      	ldr	r2, [pc, #460]	; (80044cc <UART_SetConfig+0x32c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d125      	bne.n	8004350 <UART_SetConfig+0x1b0>
 8004304:	4b6f      	ldr	r3, [pc, #444]	; (80044c4 <UART_SetConfig+0x324>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800430e:	2b10      	cmp	r3, #16
 8004310:	d011      	beq.n	8004336 <UART_SetConfig+0x196>
 8004312:	2b10      	cmp	r3, #16
 8004314:	d802      	bhi.n	800431c <UART_SetConfig+0x17c>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <UART_SetConfig+0x186>
 800431a:	e014      	b.n	8004346 <UART_SetConfig+0x1a6>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d006      	beq.n	800432e <UART_SetConfig+0x18e>
 8004320:	2b30      	cmp	r3, #48	; 0x30
 8004322:	d00c      	beq.n	800433e <UART_SetConfig+0x19e>
 8004324:	e00f      	b.n	8004346 <UART_SetConfig+0x1a6>
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432c:	e09c      	b.n	8004468 <UART_SetConfig+0x2c8>
 800432e:	2302      	movs	r3, #2
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004334:	e098      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004336:	2304      	movs	r3, #4
 8004338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433c:	e094      	b.n	8004468 <UART_SetConfig+0x2c8>
 800433e:	2308      	movs	r3, #8
 8004340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004344:	e090      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004346:	2310      	movs	r3, #16
 8004348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434c:	bf00      	nop
 800434e:	e08b      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5e      	ldr	r2, [pc, #376]	; (80044d0 <UART_SetConfig+0x330>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d125      	bne.n	80043a6 <UART_SetConfig+0x206>
 800435a:	4b5a      	ldr	r3, [pc, #360]	; (80044c4 <UART_SetConfig+0x324>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d011      	beq.n	800438c <UART_SetConfig+0x1ec>
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d802      	bhi.n	8004372 <UART_SetConfig+0x1d2>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <UART_SetConfig+0x1dc>
 8004370:	e014      	b.n	800439c <UART_SetConfig+0x1fc>
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d006      	beq.n	8004384 <UART_SetConfig+0x1e4>
 8004376:	2bc0      	cmp	r3, #192	; 0xc0
 8004378:	d00c      	beq.n	8004394 <UART_SetConfig+0x1f4>
 800437a:	e00f      	b.n	800439c <UART_SetConfig+0x1fc>
 800437c:	2300      	movs	r3, #0
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e071      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004384:	2302      	movs	r3, #2
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e06d      	b.n	8004468 <UART_SetConfig+0x2c8>
 800438c:	2304      	movs	r3, #4
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e069      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004394:	2308      	movs	r3, #8
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e065      	b.n	8004468 <UART_SetConfig+0x2c8>
 800439c:	2310      	movs	r3, #16
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	bf00      	nop
 80043a4:	e060      	b.n	8004468 <UART_SetConfig+0x2c8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4a      	ldr	r2, [pc, #296]	; (80044d4 <UART_SetConfig+0x334>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d129      	bne.n	8004404 <UART_SetConfig+0x264>
 80043b0:	4b44      	ldr	r3, [pc, #272]	; (80044c4 <UART_SetConfig+0x324>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043be:	d014      	beq.n	80043ea <UART_SetConfig+0x24a>
 80043c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c4:	d802      	bhi.n	80043cc <UART_SetConfig+0x22c>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <UART_SetConfig+0x23a>
 80043ca:	e016      	b.n	80043fa <UART_SetConfig+0x25a>
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d0:	d007      	beq.n	80043e2 <UART_SetConfig+0x242>
 80043d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043d6:	d00c      	beq.n	80043f2 <UART_SetConfig+0x252>
 80043d8:	e00f      	b.n	80043fa <UART_SetConfig+0x25a>
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e0:	e042      	b.n	8004468 <UART_SetConfig+0x2c8>
 80043e2:	2302      	movs	r3, #2
 80043e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e8:	e03e      	b.n	8004468 <UART_SetConfig+0x2c8>
 80043ea:	2304      	movs	r3, #4
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e03a      	b.n	8004468 <UART_SetConfig+0x2c8>
 80043f2:	2308      	movs	r3, #8
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e036      	b.n	8004468 <UART_SetConfig+0x2c8>
 80043fa:	2310      	movs	r3, #16
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004400:	bf00      	nop
 8004402:	e031      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <UART_SetConfig+0x31c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d129      	bne.n	8004462 <UART_SetConfig+0x2c2>
 800440e:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <UART_SetConfig+0x324>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441c:	d014      	beq.n	8004448 <UART_SetConfig+0x2a8>
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d802      	bhi.n	800442a <UART_SetConfig+0x28a>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <UART_SetConfig+0x298>
 8004428:	e016      	b.n	8004458 <UART_SetConfig+0x2b8>
 800442a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442e:	d007      	beq.n	8004440 <UART_SetConfig+0x2a0>
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004434:	d00c      	beq.n	8004450 <UART_SetConfig+0x2b0>
 8004436:	e00f      	b.n	8004458 <UART_SetConfig+0x2b8>
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e013      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004440:	2302      	movs	r3, #2
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e00f      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e00b      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e007      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <UART_SetConfig+0x2c8>
 8004462:	2310      	movs	r3, #16
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a13      	ldr	r2, [pc, #76]	; (80044bc <UART_SetConfig+0x31c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	f040 80fe 	bne.w	8004670 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004474:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004478:	2b08      	cmp	r3, #8
 800447a:	d837      	bhi.n	80044ec <UART_SetConfig+0x34c>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0x2e4>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044ed 	.word	0x080044ed
 800448c:	080044b1 	.word	0x080044b1
 8004490:	080044ed 	.word	0x080044ed
 8004494:	080044dd 	.word	0x080044dd
 8004498:	080044ed 	.word	0x080044ed
 800449c:	080044ed 	.word	0x080044ed
 80044a0:	080044ed 	.word	0x080044ed
 80044a4:	080044e5 	.word	0x080044e5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80044a8:	f7fe f9f2 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80044ac:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044ae:	e020      	b.n	80044f2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80044b0:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <UART_SetConfig+0x338>)
 80044b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044b4:	e01d      	b.n	80044f2 <UART_SetConfig+0x352>
 80044b6:	bf00      	nop
 80044b8:	efff69f3 	.word	0xefff69f3
 80044bc:	40008000 	.word	0x40008000
 80044c0:	40013800 	.word	0x40013800
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40004400 	.word	0x40004400
 80044cc:	40004800 	.word	0x40004800
 80044d0:	40004c00 	.word	0x40004c00
 80044d4:	40005000 	.word	0x40005000
 80044d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80044dc:	f7fe f942 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 80044e0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044e2:	e006      	b.n	80044f2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80044e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044ea:	e002      	b.n	80044f2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	76fb      	strb	r3, [r7, #27]
        break;
 80044f0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 81b9 	beq.w	800486c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d305      	bcc.n	8004516 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	429a      	cmp	r2, r3
 8004514:	d902      	bls.n	800451c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	76fb      	strb	r3, [r7, #27]
 800451a:	e1a7      	b.n	800486c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800451c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004520:	2b08      	cmp	r3, #8
 8004522:	f200 8092 	bhi.w	800464a <UART_SetConfig+0x4aa>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x38c>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004551 	.word	0x08004551
 8004530:	0800464b 	.word	0x0800464b
 8004534:	0800459f 	.word	0x0800459f
 8004538:	0800464b 	.word	0x0800464b
 800453c:	080045d3 	.word	0x080045d3
 8004540:	0800464b 	.word	0x0800464b
 8004544:	0800464b 	.word	0x0800464b
 8004548:	0800464b 	.word	0x0800464b
 800454c:	08004621 	.word	0x08004621
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7fe f99e 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8004554:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4619      	mov	r1, r3
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	f04f 0400 	mov.w	r4, #0
 8004566:	0214      	lsls	r4, r2, #8
 8004568:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800456c:	020b      	lsls	r3, r1, #8
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6852      	ldr	r2, [r2, #4]
 8004572:	0852      	lsrs	r2, r2, #1
 8004574:	4611      	mov	r1, r2
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	eb13 0b01 	adds.w	fp, r3, r1
 800457e:	eb44 0c02 	adc.w	ip, r4, r2
 8004582:	4658      	mov	r0, fp
 8004584:	4661      	mov	r1, ip
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f04f 0400 	mov.w	r4, #0
 800458e:	461a      	mov	r2, r3
 8004590:	4623      	mov	r3, r4
 8004592:	f7fb fe75 	bl	8000280 <__aeabi_uldivmod>
 8004596:	4603      	mov	r3, r0
 8004598:	460c      	mov	r4, r1
 800459a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800459c:	e058      	b.n	8004650 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	49ae      	ldr	r1, [pc, #696]	; (8004864 <UART_SetConfig+0x6c4>)
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	eb13 0b01 	adds.w	fp, r3, r1
 80045b2:	eb44 0c02 	adc.w	ip, r4, r2
 80045b6:	4658      	mov	r0, fp
 80045b8:	4661      	mov	r1, ip
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	461a      	mov	r2, r3
 80045c4:	4623      	mov	r3, r4
 80045c6:	f7fb fe5b 	bl	8000280 <__aeabi_uldivmod>
 80045ca:	4603      	mov	r3, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045d0:	e03e      	b.n	8004650 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe f8c7 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 80045d6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4619      	mov	r1, r3
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	0214      	lsls	r4, r2, #8
 80045ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045ee:	020b      	lsls	r3, r1, #8
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	0852      	lsrs	r2, r2, #1
 80045f6:	4611      	mov	r1, r2
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	eb13 0b01 	adds.w	fp, r3, r1
 8004600:	eb44 0c02 	adc.w	ip, r4, r2
 8004604:	4658      	mov	r0, fp
 8004606:	4661      	mov	r1, ip
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	461a      	mov	r2, r3
 8004612:	4623      	mov	r3, r4
 8004614:	f7fb fe34 	bl	8000280 <__aeabi_uldivmod>
 8004618:	4603      	mov	r3, r0
 800461a:	460c      	mov	r4, r1
 800461c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800461e:	e017      	b.n	8004650 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	f04f 0400 	mov.w	r4, #0
 800462a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800462e:	f144 0100 	adc.w	r1, r4, #0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f04f 0400 	mov.w	r4, #0
 800463a:	461a      	mov	r2, r3
 800463c:	4623      	mov	r3, r4
 800463e:	f7fb fe1f 	bl	8000280 <__aeabi_uldivmod>
 8004642:	4603      	mov	r3, r0
 8004644:	460c      	mov	r4, r1
 8004646:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004648:	e002      	b.n	8004650 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	76fb      	strb	r3, [r7, #27]
            break;
 800464e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004656:	d308      	bcc.n	800466a <UART_SetConfig+0x4ca>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465e:	d204      	bcs.n	800466a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e100      	b.n	800486c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	76fb      	strb	r3, [r7, #27]
 800466e:	e0fd      	b.n	800486c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004678:	f040 8084 	bne.w	8004784 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800467c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004680:	2b08      	cmp	r3, #8
 8004682:	d85f      	bhi.n	8004744 <UART_SetConfig+0x5a4>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x4ec>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046d1 	.word	0x080046d1
 8004694:	080046f1 	.word	0x080046f1
 8004698:	08004745 	.word	0x08004745
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	08004745 	.word	0x08004745
 80046a4:	08004745 	.word	0x08004745
 80046a8:	08004745 	.word	0x08004745
 80046ac:	0800472d 	.word	0x0800472d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b0:	f7fe f8ee 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80046b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	005a      	lsls	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	441a      	add	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046ce:	e03c      	b.n	800474a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d0:	f7fe f8f4 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 80046d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	005a      	lsls	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	085b      	lsrs	r3, r3, #1
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046ee:	e02c      	b.n	800474a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80046fa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6852      	ldr	r2, [r2, #4]
 8004702:	fbb3 f3f2 	udiv	r3, r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800470a:	e01e      	b.n	800474a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470c:	f7fe f82a 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8004710:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	005a      	lsls	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	441a      	add	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	b29b      	uxth	r3, r3
 8004728:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800472a:	e00e      	b.n	800474a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	fbb2 f3f3 	udiv	r3, r2, r3
 800473e:	b29b      	uxth	r3, r3
 8004740:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004742:	e002      	b.n	800474a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	76fb      	strb	r3, [r7, #27]
        break;
 8004748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b0f      	cmp	r3, #15
 800474e:	d916      	bls.n	800477e <UART_SetConfig+0x5de>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004756:	d212      	bcs.n	800477e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f023 030f 	bic.w	r3, r3, #15
 8004760:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	b29b      	uxth	r3, r3
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	b29a      	uxth	r2, r3
 800476e:	89fb      	ldrh	r3, [r7, #14]
 8004770:	4313      	orrs	r3, r2
 8004772:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	89fa      	ldrh	r2, [r7, #14]
 800477a:	60da      	str	r2, [r3, #12]
 800477c:	e076      	b.n	800486c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e073      	b.n	800486c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004784:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004788:	2b08      	cmp	r3, #8
 800478a:	d85c      	bhi.n	8004846 <UART_SetConfig+0x6a6>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <UART_SetConfig+0x5f4>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047d7 	.word	0x080047d7
 800479c:	080047f5 	.word	0x080047f5
 80047a0:	08004847 	.word	0x08004847
 80047a4:	08004811 	.word	0x08004811
 80047a8:	08004847 	.word	0x08004847
 80047ac:	08004847 	.word	0x08004847
 80047b0:	08004847 	.word	0x08004847
 80047b4:	0800482f 	.word	0x0800482f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7fe f86a 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80047bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	085a      	lsrs	r2, r3, #1
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	441a      	add	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047d4:	e03a      	b.n	800484c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d6:	f7fe f871 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 80047da:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	085a      	lsrs	r2, r3, #1
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	441a      	add	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047f2:	e02b      	b.n	800484c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80047fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6852      	ldr	r2, [r2, #4]
 8004806:	fbb3 f3f2 	udiv	r3, r3, r2
 800480a:	b29b      	uxth	r3, r3
 800480c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800480e:	e01d      	b.n	800484c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004810:	f7fd ffa8 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8004814:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	085a      	lsrs	r2, r3, #1
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	441a      	add	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800482c:	e00e      	b.n	800484c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	b29b      	uxth	r3, r3
 8004842:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004844:	e002      	b.n	800484c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	76fb      	strb	r3, [r7, #27]
        break;
 800484a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b0f      	cmp	r3, #15
 8004850:	d90a      	bls.n	8004868 <UART_SetConfig+0x6c8>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d206      	bcs.n	8004868 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	e003      	b.n	800486c <UART_SetConfig+0x6cc>
 8004864:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004878:	7efb      	ldrb	r3, [r7, #27]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3728      	adds	r7, #40	; 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01a      	beq.n	800499a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004982:	d10a      	bne.n	800499a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049d6:	f7fc fe99 	bl	800170c <HAL_GetTick>
 80049da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d10e      	bne.n	8004a08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f82a 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e020      	b.n	8004a4a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d10e      	bne.n	8004a34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f814 	bl	8004a52 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e00a      	b.n	8004a4a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a62:	e05d      	b.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d059      	beq.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6c:	f7fc fe4e 	bl	800170c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11b      	bne.n	8004aba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e042      	b.n	8004b40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02b      	beq.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad6:	d123      	bne.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004af0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e00f      	b.n	8004b40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69da      	ldr	r2, [r3, #28]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d092      	beq.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff faf0 	bl	800418c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff facd 	bl	8004178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0e:	f3ef 8305 	mrs	r3, IPSR
 8004c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c26:	f3ef 8311 	mrs	r3, BASEPRI
 8004c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <osKernelInitialize+0x3a>
 8004c32:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <osKernelInitialize+0x64>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d103      	bne.n	8004c42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c3a:	f06f 0305 	mvn.w	r3, #5
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	e00c      	b.n	8004c5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <osKernelInitialize+0x64>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <osKernelInitialize+0x64>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e002      	b.n	8004c5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	200000d4 	.word	0x200000d4

08004c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c76:	f3ef 8305 	mrs	r3, IPSR
 8004c7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c82:	f3ef 8310 	mrs	r3, PRIMASK
 8004c86:	607b      	str	r3, [r7, #4]
  return(result);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d105      	bne.n	8004c9a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c92:	603b      	str	r3, [r7, #0]
  return(result);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <osKernelStart+0x3a>
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <osKernelStart+0x68>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d103      	bne.n	8004caa <osKernelStart+0x3a>
    stat = osErrorISR;
 8004ca2:	f06f 0305 	mvn.w	r3, #5
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	e010      	b.n	8004ccc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <osKernelStart+0x68>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d109      	bne.n	8004cc6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004cb2:	f7ff ffa2 	bl	8004bfa <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <osKernelStart+0x68>)
 8004cb8:	2202      	movs	r2, #2
 8004cba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cbc:	f001 fdd0 	bl	8006860 <vTaskStartScheduler>
      stat = osOK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e002      	b.n	8004ccc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200000d4 	.word	0x200000d4

08004cdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b090      	sub	sp, #64	; 0x40
 8004ce0:	af04      	add	r7, sp, #16
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cec:	f3ef 8305 	mrs	r3, IPSR
 8004cf0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cf2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 808f 	bne.w	8004e18 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d06:	f3ef 8311 	mrs	r3, BASEPRI
 8004d0a:	617b      	str	r3, [r7, #20]
  return(result);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <osThreadNew+0x3e>
 8004d12:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <osThreadNew+0x148>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d07e      	beq.n	8004e18 <osThreadNew+0x13c>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d07b      	beq.n	8004e18 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004d24:	2318      	movs	r3, #24
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d045      	beq.n	8004dc4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <osThreadNew+0x6a>
        name = attr->name;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d008      	beq.n	8004d6c <osThreadNew+0x90>
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	2b38      	cmp	r3, #56	; 0x38
 8004d5e:	d805      	bhi.n	8004d6c <osThreadNew+0x90>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <osThreadNew+0x94>
        return (NULL);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e054      	b.n	8004e1a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <osThreadNew+0xca>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b5b      	cmp	r3, #91	; 0x5b
 8004d8e:	d90a      	bls.n	8004da6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <osThreadNew+0xca>
        mem = 1;
 8004da0:	2301      	movs	r3, #1
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	e010      	b.n	8004dc8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10c      	bne.n	8004dc8 <osThreadNew+0xec>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d108      	bne.n	8004dc8 <osThreadNew+0xec>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <osThreadNew+0xec>
          mem = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	e001      	b.n	8004dc8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d110      	bne.n	8004df0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dd6:	9202      	str	r2, [sp, #8]
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f001 fb65 	bl	80064b4 <xTaskCreateStatic>
 8004dea:	4603      	mov	r3, r0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e013      	b.n	8004e18 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d110      	bne.n	8004e18 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	f107 0310 	add.w	r3, r7, #16
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f001 fbad 	bl	8006568 <xTaskCreate>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d001      	beq.n	8004e18 <osThreadNew+0x13c>
          hTask = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e18:	693b      	ldr	r3, [r7, #16]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3730      	adds	r7, #48	; 0x30
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200000d4 	.word	0x200000d4

08004e28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e30:	f3ef 8305 	mrs	r3, IPSR
 8004e34:	613b      	str	r3, [r7, #16]
  return(result);
 8004e36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e48:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <osDelay+0x3c>
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <osDelay+0x58>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d103      	bne.n	8004e64 <osDelay+0x3c>
    stat = osErrorISR;
 8004e5c:	f06f 0305 	mvn.w	r3, #5
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e007      	b.n	8004e74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f001 fcc2 	bl	80067f8 <vTaskDelay>
    }
  }

  return (stat);
 8004e74:	697b      	ldr	r3, [r7, #20]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	200000d4 	.word	0x200000d4

08004e84 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e90:	f3ef 8305 	mrs	r3, IPSR
 8004e94:	613b      	str	r3, [r7, #16]
  return(result);
 8004e96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f040 8085 	bne.w	8004fa8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8004eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <osMutexNew+0x3a>
 8004eb6:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <osMutexNew+0x130>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d074      	beq.n	8004fa8 <osMutexNew+0x124>
    if (attr != NULL) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <osMutexNew+0x48>
      type = attr->attr_bits;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	e001      	b.n	8004ed0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <osMutexNew+0x5c>
      rmtx = 1U;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	e001      	b.n	8004ee4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d15c      	bne.n	8004fa8 <osMutexNew+0x124>
      mem = -1;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d015      	beq.n	8004f26 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <osMutexNew+0x8c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b4f      	cmp	r3, #79	; 0x4f
 8004f08:	d902      	bls.n	8004f10 <osMutexNew+0x8c>
          mem = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	e00c      	b.n	8004f2a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <osMutexNew+0xa6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <osMutexNew+0xa6>
            mem = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e001      	b.n	8004f2a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d112      	bne.n	8004f56 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	2004      	movs	r0, #4
 8004f3e:	f000 fbee 	bl	800571e <xQueueCreateMutexStatic>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24
 8004f44:	e016      	b.n	8004f74 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	f000 fbe6 	bl	800571e <xQueueCreateMutexStatic>
 8004f52:	6278      	str	r0, [r7, #36]	; 0x24
 8004f54:	e00e      	b.n	8004f74 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004f62:	2004      	movs	r0, #4
 8004f64:	f000 fbc3 	bl	80056ee <xQueueCreateMutex>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24
 8004f6a:	e003      	b.n	8004f74 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f000 fbbe 	bl	80056ee <xQueueCreateMutex>
 8004f72:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <osMutexNew+0x110>
        if (attr != NULL) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <osMutexNew+0x104>
          name = attr->name;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e001      	b.n	8004f8c <osMutexNew+0x108>
        } else {
          name = NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004f8c:	6979      	ldr	r1, [r7, #20]
 8004f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f90:	f001 fa0a 	bl	80063a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <osMutexNew+0x124>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3728      	adds	r7, #40	; 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200000d4 	.word	0x200000d4

08004fb8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	; 0x30
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc8:	f3ef 8305 	mrs	r3, IPSR
 8004fcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 8087 	bne.w	80050e4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fda:	617b      	str	r3, [r7, #20]
  return(result);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d105      	bne.n	8004fee <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe6:	613b      	str	r3, [r7, #16]
  return(result);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <osSemaphoreNew+0x3e>
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <osSemaphoreNew+0x138>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d076      	beq.n	80050e4 <osSemaphoreNew+0x12c>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d073      	beq.n	80050e4 <osSemaphoreNew+0x12c>
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	429a      	cmp	r2, r3
 8005002:	d86f      	bhi.n	80050e4 <osSemaphoreNew+0x12c>
    mem = -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <osSemaphoreNew+0x6e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b4f      	cmp	r3, #79	; 0x4f
 800501e:	d902      	bls.n	8005026 <osSemaphoreNew+0x6e>
        mem = 1;
 8005020:	2301      	movs	r3, #1
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	e00c      	b.n	8005040 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <osSemaphoreNew+0x88>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <osSemaphoreNew+0x88>
          mem = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	e001      	b.n	8005040 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d04d      	beq.n	80050e4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d129      	bne.n	80050a2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d10b      	bne.n	800506c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	2303      	movs	r3, #3
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	2200      	movs	r2, #0
 8005060:	2100      	movs	r1, #0
 8005062:	2001      	movs	r0, #1
 8005064:	f000 fa54 	bl	8005510 <xQueueGenericCreateStatic>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24
 800506a:	e005      	b.n	8005078 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800506c:	2203      	movs	r2, #3
 800506e:	2100      	movs	r1, #0
 8005070:	2001      	movs	r0, #1
 8005072:	f000 fac0 	bl	80055f6 <xQueueGenericCreate>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d022      	beq.n	80050c4 <osSemaphoreNew+0x10c>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01f      	beq.n	80050c4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005084:	2300      	movs	r3, #0
 8005086:	2200      	movs	r2, #0
 8005088:	2100      	movs	r1, #0
 800508a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508c:	f000 fbc8 	bl	8005820 <xQueueGenericSend>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d016      	beq.n	80050c4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8005096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005098:	f001 f83b 	bl	8006112 <vQueueDelete>
            hSemaphore = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
 80050a0:	e010      	b.n	80050c4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d108      	bne.n	80050ba <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	461a      	mov	r2, r3
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fb4f 	bl	8005754 <xQueueCreateCountingSemaphoreStatic>
 80050b6:	6278      	str	r0, [r7, #36]	; 0x24
 80050b8:	e004      	b.n	80050c4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fb7e 	bl	80057be <xQueueCreateCountingSemaphore>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <osSemaphoreNew+0x120>
          name = attr->name;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	e001      	b.n	80050dc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e0:	f001 f962 	bl	80063a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200000d4 	.word	0x200000d4

080050f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d103      	bne.n	8005114 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800510c:	f06f 0303 	mvn.w	r3, #3
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	e04b      	b.n	80051ac <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005114:	f3ef 8305 	mrs	r3, IPSR
 8005118:	617b      	str	r3, [r7, #20]
  return(result);
 800511a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005120:	f3ef 8310 	mrs	r3, PRIMASK
 8005124:	613b      	str	r3, [r7, #16]
  return(result);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800512c:	f3ef 8311 	mrs	r3, BASEPRI
 8005130:	60fb      	str	r3, [r7, #12]
  return(result);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d026      	beq.n	8005186 <osSemaphoreAcquire+0x92>
 8005138:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <osSemaphoreAcquire+0xc4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d122      	bne.n	8005186 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005146:	f06f 0303 	mvn.w	r3, #3
 800514a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800514c:	e02d      	b.n	80051aa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	461a      	mov	r2, r3
 8005158:	2100      	movs	r1, #0
 800515a:	69b8      	ldr	r0, [r7, #24]
 800515c:	f000 ff5c 	bl	8006018 <xQueueReceiveFromISR>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d003      	beq.n	800516e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005166:	f06f 0302 	mvn.w	r3, #2
 800516a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800516c:	e01d      	b.n	80051aa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <osSemaphoreAcquire+0xb6>
 8005174:	4b11      	ldr	r3, [pc, #68]	; (80051bc <osSemaphoreAcquire+0xc8>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005184:	e011      	b.n	80051aa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	69b8      	ldr	r0, [r7, #24]
 800518a:	f000 fe3d 	bl	8005e08 <xQueueSemaphoreTake>
 800518e:	4603      	mov	r3, r0
 8005190:	2b01      	cmp	r3, #1
 8005192:	d00b      	beq.n	80051ac <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800519a:	f06f 0301 	mvn.w	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	e004      	b.n	80051ac <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80051a2:	f06f 0302 	mvn.w	r3, #2
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e000      	b.n	80051ac <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80051aa:	bf00      	nop
      }
    }
  }

  return (stat);
 80051ac:	69fb      	ldr	r3, [r7, #28]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200000d4 	.word	0x200000d4
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80051d6:	f06f 0303 	mvn.w	r3, #3
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	e03e      	b.n	800525c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051de:	f3ef 8305 	mrs	r3, IPSR
 80051e2:	617b      	str	r3, [r7, #20]
  return(result);
 80051e4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10f      	bne.n	800520a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ea:	f3ef 8310 	mrs	r3, PRIMASK
 80051ee:	613b      	str	r3, [r7, #16]
  return(result);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d105      	bne.n	8005202 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051f6:	f3ef 8311 	mrs	r3, BASEPRI
 80051fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01e      	beq.n	8005240 <osSemaphoreRelease+0x80>
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <osSemaphoreRelease+0xa8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d11a      	bne.n	8005240 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	4619      	mov	r1, r3
 8005214:	69b8      	ldr	r0, [r7, #24]
 8005216:	f000 fc91 	bl	8005b3c <xQueueGiveFromISR>
 800521a:	4603      	mov	r3, r0
 800521c:	2b01      	cmp	r3, #1
 800521e:	d003      	beq.n	8005228 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005220:	f06f 0302 	mvn.w	r3, #2
 8005224:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005226:	e018      	b.n	800525a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d015      	beq.n	800525a <osSemaphoreRelease+0x9a>
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <osSemaphoreRelease+0xac>)
 8005230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800523e:	e00c      	b.n	800525a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005240:	2300      	movs	r3, #0
 8005242:	2200      	movs	r2, #0
 8005244:	2100      	movs	r1, #0
 8005246:	69b8      	ldr	r0, [r7, #24]
 8005248:	f000 faea 	bl	8005820 <xQueueGenericSend>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d004      	beq.n	800525c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005252:	f06f 0302 	mvn.w	r3, #2
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e000      	b.n	800525c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800525a:	bf00      	nop
    }
  }

  return (stat);
 800525c:	69fb      	ldr	r3, [r7, #28]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	200000d4 	.word	0x200000d4
 800526c:	e000ed04 	.word	0xe000ed04

08005270 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a07      	ldr	r2, [pc, #28]	; (800529c <vApplicationGetIdleTaskMemory+0x2c>)
 8005280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4a06      	ldr	r2, [pc, #24]	; (80052a0 <vApplicationGetIdleTaskMemory+0x30>)
 8005286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	200000d8 	.word	0x200000d8
 80052a0:	20000134 	.word	0x20000134

080052a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80052b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4a06      	ldr	r2, [pc, #24]	; (80052d4 <vApplicationGetTimerTaskMemory+0x30>)
 80052ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20000334 	.word	0x20000334
 80052d4:	20000390 	.word	0x20000390

080052d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f103 0208 	add.w	r2, r3, #8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f04f 32ff 	mov.w	r2, #4294967295
 80052f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f103 0208 	add.w	r2, r3, #8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f103 0208 	add.w	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
}
 800536e:	bf00      	nop
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d103      	bne.n	800539a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e00c      	b.n	80053b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3308      	adds	r3, #8
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e002      	b.n	80053a8 <vListInsert+0x2e>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d2f6      	bcs.n	80053a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d103      	bne.n	8005420 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	1e5a      	subs	r2, r3, #1
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	e7fe      	b.n	8005466 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005468:	f002 fc90 	bl	8007d8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	68f9      	ldr	r1, [r7, #12]
 8005476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	441a      	add	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005498:	3b01      	subs	r3, #1
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800549e:	fb01 f303 	mul.w	r3, r1, r3
 80054a2:	441a      	add	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	22ff      	movs	r2, #255	; 0xff
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d114      	bne.n	80054e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01a      	beq.n	80054fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3310      	adds	r3, #16
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fc48 	bl	8006d60 <xTaskRemoveFromEventList>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d012      	beq.n	80054fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <xQueueGenericReset+0xcc>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	e009      	b.n	80054fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3310      	adds	r3, #16
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fef3 	bl	80052d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3324      	adds	r3, #36	; 0x24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff feee 	bl	80052d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054fc:	f002 fc74 	bl	8007de8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005500:	2301      	movs	r3, #1
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08e      	sub	sp, #56	; 0x38
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <xQueueGenericCreateStatic+0x28>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
 8005536:	e7fe      	b.n	8005536 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <xQueueGenericCreateStatic+0x42>
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
 8005550:	e7fe      	b.n	8005550 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <xQueueGenericCreateStatic+0x4e>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <xQueueGenericCreateStatic+0x52>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <xQueueGenericCreateStatic+0x54>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d109      	bne.n	800557c <xQueueGenericCreateStatic+0x6c>
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	e7fe      	b.n	800557a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <xQueueGenericCreateStatic+0x78>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <xQueueGenericCreateStatic+0x7c>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <xQueueGenericCreateStatic+0x7e>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <xQueueGenericCreateStatic+0x96>
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	e7fe      	b.n	80055a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055a6:	2350      	movs	r3, #80	; 0x50
 80055a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b50      	cmp	r3, #80	; 0x50
 80055ae:	d009      	beq.n	80055c4 <xQueueGenericCreateStatic+0xb4>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e7fe      	b.n	80055c2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f844 	bl	8005674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3730      	adds	r7, #48	; 0x30
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b08a      	sub	sp, #40	; 0x28
 80055fa:	af02      	add	r7, sp, #8
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	4613      	mov	r3, r2
 8005602:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <xQueueGenericCreate+0x28>
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e7fe      	b.n	800561c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	e004      	b.n	8005634 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3350      	adds	r3, #80	; 0x50
 8005638:	4618      	mov	r0, r3
 800563a:	f002 fcc1 	bl	8007fc0 <pvPortMalloc>
 800563e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d011      	beq.n	800566a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	3350      	adds	r3, #80	; 0x50
 800564e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005658:	79fa      	ldrb	r2, [r7, #7]
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	4613      	mov	r3, r2
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f805 	bl	8005674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800566a:	69bb      	ldr	r3, [r7, #24]
	}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d103      	bne.n	8005690 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e002      	b.n	8005696 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056a2:	2101      	movs	r1, #1
 80056a4:	69b8      	ldr	r0, [r7, #24]
 80056a6:	f7ff fecb 	bl	8005440 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00e      	beq.n	80056e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80056da:	2300      	movs	r3, #0
 80056dc:	2200      	movs	r2, #0
 80056de:	2100      	movs	r1, #0
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f89d 	bl	8005820 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	461a      	mov	r2, r3
 8005704:	6939      	ldr	r1, [r7, #16]
 8005706:	6978      	ldr	r0, [r7, #20]
 8005708:	f7ff ff75 	bl	80055f6 <xQueueGenericCreate>
 800570c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff ffd3 	bl	80056ba <prvInitialiseMutex>

		return xNewQueue;
 8005714:	68fb      	ldr	r3, [r7, #12]
	}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800571e:	b580      	push	{r7, lr}
 8005720:	b088      	sub	sp, #32
 8005722:	af02      	add	r7, sp, #8
 8005724:	4603      	mov	r3, r0
 8005726:	6039      	str	r1, [r7, #0]
 8005728:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800572a:	2301      	movs	r3, #1
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	6939      	ldr	r1, [r7, #16]
 800573c:	6978      	ldr	r0, [r7, #20]
 800573e:	f7ff fee7 	bl	8005510 <xQueueGenericCreateStatic>
 8005742:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff ffb8 	bl	80056ba <prvInitialiseMutex>

		return xNewQueue;
 800574a:	68fb      	ldr	r3, [r7, #12]
	}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <xQueueCreateCountingSemaphoreStatic+0x26>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e7fe      	b.n	8005778 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	429a      	cmp	r2, r3
 8005780:	d909      	bls.n	8005796 <xQueueCreateCountingSemaphoreStatic+0x42>
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e7fe      	b.n	8005794 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005796:	2302      	movs	r3, #2
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	2100      	movs	r1, #0
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff feb5 	bl	8005510 <xQueueGenericCreateStatic>
 80057a6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057b4:	69fb      	ldr	r3, [r7, #28]
	}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <xQueueCreateCountingSemaphore+0x24>
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	e7fe      	b.n	80057e0 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d909      	bls.n	80057fe <xQueueCreateCountingSemaphore+0x40>
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e7fe      	b.n	80057fc <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057fe:	2202      	movs	r2, #2
 8005800:	2100      	movs	r1, #0
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fef7 	bl	80055f6 <xQueueGenericCreate>
 8005808:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005816:	697b      	ldr	r3, [r7, #20]
	}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800582e:	2300      	movs	r3, #0
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <xQueueGenericSend+0x30>
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
 800584e:	e7fe      	b.n	800584e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <xQueueGenericSend+0x3e>
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <xQueueGenericSend+0x42>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <xQueueGenericSend+0x44>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <xQueueGenericSend+0x5c>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	e7fe      	b.n	800587a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d103      	bne.n	800588a <xQueueGenericSend+0x6a>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <xQueueGenericSend+0x6e>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSend+0x70>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <xQueueGenericSend+0x88>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	e7fe      	b.n	80058a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058a8:	f001 fc20 	bl	80070ec <xTaskGetSchedulerState>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <xQueueGenericSend+0x98>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <xQueueGenericSend+0x9c>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <xQueueGenericSend+0x9e>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <xQueueGenericSend+0xb6>
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058d6:	f002 fa59 	bl	8007d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d302      	bcc.n	80058ec <xQueueGenericSend+0xcc>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d129      	bne.n	8005940 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f2:	f000 fc48 	bl	8006186 <prvCopyDataToQueue>
 80058f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d010      	beq.n	8005922 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	3324      	adds	r3, #36	; 0x24
 8005904:	4618      	mov	r0, r3
 8005906:	f001 fa2b 	bl	8006d60 <xTaskRemoveFromEventList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005910:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <xQueueGenericSend+0x1f0>)
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	e00a      	b.n	8005938 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005928:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <xQueueGenericSend+0x1f0>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005938:	f002 fa56 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 800593c:	2301      	movs	r3, #1
 800593e:	e063      	b.n	8005a08 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005946:	f002 fa4f 	bl	8007de8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800594a:	2300      	movs	r3, #0
 800594c:	e05c      	b.n	8005a08 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	4618      	mov	r0, r3
 800595a:	f001 fa63 	bl	8006e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800595e:	2301      	movs	r3, #1
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005962:	f002 fa41 	bl	8007de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005966:	f000 ffdf 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800596a:	f002 fa0f 	bl	8007d8c <vPortEnterCritical>
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005974:	b25b      	sxtb	r3, r3
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d103      	bne.n	8005984 <xQueueGenericSend+0x164>
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800598a:	b25b      	sxtb	r3, r3
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d103      	bne.n	800599a <xQueueGenericSend+0x17a>
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599a:	f002 fa25 	bl	8007de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800599e:	1d3a      	adds	r2, r7, #4
 80059a0:	f107 0314 	add.w	r3, r7, #20
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fa52 	bl	8006e50 <xTaskCheckForTimeOut>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d124      	bne.n	80059fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b4:	f000 fcdf 	bl	8006376 <prvIsQueueFull>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	3310      	adds	r3, #16
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 f97c 	bl	8006cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ce:	f000 fc6a 	bl	80062a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059d2:	f000 ffb7 	bl	8006944 <xTaskResumeAll>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f af7c 	bne.w	80058d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <xQueueGenericSend+0x1f0>)
 80059e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	e772      	b.n	80058d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f2:	f000 fc58 	bl	80062a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059f6:	f000 ffa5 	bl	8006944 <xTaskResumeAll>
 80059fa:	e76c      	b.n	80058d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059fe:	f000 fc52 	bl	80062a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a02:	f000 ff9f 	bl	8006944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3738      	adds	r7, #56	; 0x38
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08e      	sub	sp, #56	; 0x38
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <xQueueGenericSendFromISR+0x2c>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3e:	e7fe      	b.n	8005a3e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <xQueueGenericSendFromISR+0x3a>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xQueueGenericSendFromISR+0x3e>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueGenericSendFromISR+0x40>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <xQueueGenericSendFromISR+0x58>
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	e7fe      	b.n	8005a6a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d103      	bne.n	8005a7a <xQueueGenericSendFromISR+0x66>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <xQueueGenericSendFromISR+0x6a>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <xQueueGenericSendFromISR+0x6c>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <xQueueGenericSendFromISR+0x84>
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	e7fe      	b.n	8005a96 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a98:	f002 fa54 	bl	8007f44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a9c:	f3ef 8211 	mrs	r2, BASEPRI
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	61ba      	str	r2, [r7, #24]
 8005ab2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d302      	bcc.n	8005aca <xQueueGenericSendFromISR+0xb6>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d12c      	bne.n	8005b24 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ada:	f000 fb54 	bl	8006186 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ade:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d112      	bne.n	8005b0e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d016      	beq.n	8005b1e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	3324      	adds	r3, #36	; 0x24
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 f933 	bl	8006d60 <xTaskRemoveFromEventList>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e007      	b.n	8005b1e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b12:	3301      	adds	r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	b25a      	sxtb	r2, r3
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b22:	e001      	b.n	8005b28 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3738      	adds	r7, #56	; 0x38
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08e      	sub	sp, #56	; 0x38
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
 8005b62:	e7fe      	b.n	8005b62 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <xQueueGiveFromISR+0x44>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e7fe      	b.n	8005b7e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d103      	bne.n	8005b90 <xQueueGiveFromISR+0x54>
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <xQueueGiveFromISR+0x58>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <xQueueGiveFromISR+0x5a>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <xQueueGiveFromISR+0x72>
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	e7fe      	b.n	8005bac <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bae:	f002 f9c9 	bl	8007f44 <vPortValidateInterruptPriority>
	__asm volatile
 8005bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	617a      	str	r2, [r7, #20]
 8005bc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005bca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d22b      	bcs.n	8005c36 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf8:	d112      	bne.n	8005c20 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	3324      	adds	r3, #36	; 0x24
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 f8aa 	bl	8006d60 <xTaskRemoveFromEventList>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00e      	beq.n	8005c30 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e007      	b.n	8005c30 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c24:	3301      	adds	r3, #1
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	b25a      	sxtb	r2, r3
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c30:	2301      	movs	r3, #1
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
 8005c34:	e001      	b.n	8005c3a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3738      	adds	r7, #56	; 0x38
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <xQueueReceive+0x2e>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	623b      	str	r3, [r7, #32]
 8005c7c:	e7fe      	b.n	8005c7c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <xQueueReceive+0x3c>
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xQueueReceive+0x40>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xQueueReceive+0x42>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <xQueueReceive+0x5a>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005caa:	f001 fa1f 	bl	80070ec <xTaskGetSchedulerState>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <xQueueReceive+0x6a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <xQueueReceive+0x6e>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <xQueueReceive+0x70>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <xQueueReceive+0x88>
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e7fe      	b.n	8005cd6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd8:	f002 f858 	bl	8007d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01f      	beq.n	8005d28 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cec:	f000 fab5 	bl	800625a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1e5a      	subs	r2, r3, #1
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	3310      	adds	r3, #16
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 f82b 	bl	8006d60 <xTaskRemoveFromEventList>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d10:	4b3c      	ldr	r3, [pc, #240]	; (8005e04 <xQueueReceive+0x1b4>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d20:	f002 f862 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e069      	b.n	8005dfc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2e:	f002 f85b 	bl	8007de8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e062      	b.n	8005dfc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d3c:	f107 0310 	add.w	r3, r7, #16
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 f86f 	bl	8006e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d4a:	f002 f84d 	bl	8007de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4e:	f000 fdeb 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d52:	f002 f81b 	bl	8007d8c <vPortEnterCritical>
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <xQueueReceive+0x11c>
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d103      	bne.n	8005d82 <xQueueReceive+0x132>
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d82:	f002 f831 	bl	8007de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d86:	1d3a      	adds	r2, r7, #4
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 f85e 	bl	8006e50 <xTaskCheckForTimeOut>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d123      	bne.n	8005de2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9c:	f000 fad5 	bl	800634a <prvIsQueueEmpty>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d017      	beq.n	8005dd6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 ff88 	bl	8006cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db6:	f000 fa76 	bl	80062a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f000 fdc3 	bl	8006944 <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d189      	bne.n	8005cd8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <xQueueReceive+0x1b4>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	e780      	b.n	8005cd8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd8:	f000 fa65 	bl	80062a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ddc:	f000 fdb2 	bl	8006944 <xTaskResumeAll>
 8005de0:	e77a      	b.n	8005cd8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de4:	f000 fa5f 	bl	80062a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de8:	f000 fdac 	bl	8006944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dee:	f000 faac 	bl	800634a <prvIsQueueEmpty>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f43f af6f 	beq.w	8005cd8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3730      	adds	r7, #48	; 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08e      	sub	sp, #56	; 0x38
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <xQueueSemaphoreTake+0x30>
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	e7fe      	b.n	8005e36 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <xQueueSemaphoreTake+0x4c>
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e7fe      	b.n	8005e52 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e54:	f001 f94a 	bl	80070ec <xTaskGetSchedulerState>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <xQueueSemaphoreTake+0x5c>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <xQueueSemaphoreTake+0x60>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <xQueueSemaphoreTake+0x62>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <xQueueSemaphoreTake+0x7a>
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e7fe      	b.n	8005e80 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e82:	f001 ff83 	bl	8007d8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d024      	beq.n	8005edc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ea2:	f001 fa95 	bl	80073d0 <pvTaskIncrementMutexHeldCount>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00f      	beq.n	8005ed4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	3310      	adds	r3, #16
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 ff51 	bl	8006d60 <xTaskRemoveFromEventList>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ec4:	4b53      	ldr	r3, [pc, #332]	; (8006014 <xQueueSemaphoreTake+0x20c>)
 8005ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ed4:	f001 ff88 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e096      	b.n	800600a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d110      	bne.n	8005f04 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <xQueueSemaphoreTake+0xf4>
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e7fe      	b.n	8005efa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005efc:	f001 ff74 	bl	8007de8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e082      	b.n	800600a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 ff88 	bl	8006e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f18:	f001 ff66 	bl	8007de8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f1c:	f000 fd04 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f20:	f001 ff34 	bl	8007d8c <vPortEnterCritical>
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f2a:	b25b      	sxtb	r3, r3
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d103      	bne.n	8005f3a <xQueueSemaphoreTake+0x132>
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d103      	bne.n	8005f50 <xQueueSemaphoreTake+0x148>
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f50:	f001 ff4a 	bl	8007de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f54:	463a      	mov	r2, r7
 8005f56:	f107 030c 	add.w	r3, r7, #12
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 ff77 	bl	8006e50 <xTaskCheckForTimeOut>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d132      	bne.n	8005fce <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f6a:	f000 f9ee 	bl	800634a <prvIsQueueEmpty>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d026      	beq.n	8005fc2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005f7c:	f001 ff06 	bl	8007d8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 f8cf 	bl	8007128 <xTaskPriorityInherit>
 8005f8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f8c:	f001 ff2c 	bl	8007de8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	3324      	adds	r3, #36	; 0x24
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	4611      	mov	r1, r2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fe93 	bl	8006cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fa0:	f000 f981 	bl	80062a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fa4:	f000 fcce 	bl	8006944 <xTaskResumeAll>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f47f af69 	bne.w	8005e82 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005fb0:	4b18      	ldr	r3, [pc, #96]	; (8006014 <xQueueSemaphoreTake+0x20c>)
 8005fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	e75f      	b.n	8005e82 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fc4:	f000 f96f 	bl	80062a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fc8:	f000 fcbc 	bl	8006944 <xTaskResumeAll>
 8005fcc:	e759      	b.n	8005e82 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fd0:	f000 f969 	bl	80062a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fd4:	f000 fcb6 	bl	8006944 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fda:	f000 f9b6 	bl	800634a <prvIsQueueEmpty>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f43f af4e 	beq.w	8005e82 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005fec:	f001 fece 	bl	8007d8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ff2:	f000 f8b0 	bl	8006156 <prvGetDisinheritPriorityAfterTimeout>
 8005ff6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 f966 	bl	80072d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006004:	f001 fef0 	bl	8007de8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006008:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800600a:	4618      	mov	r0, r3
 800600c:	3738      	adds	r7, #56	; 0x38
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	e000ed04 	.word	0xe000ed04

08006018 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08e      	sub	sp, #56	; 0x38
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <xQueueReceiveFromISR+0x2a>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	623b      	str	r3, [r7, #32]
 8006040:	e7fe      	b.n	8006040 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d103      	bne.n	8006050 <xQueueReceiveFromISR+0x38>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <xQueueReceiveFromISR+0x3c>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <xQueueReceiveFromISR+0x3e>
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <xQueueReceiveFromISR+0x56>
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	e7fe      	b.n	800606c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800606e:	f001 ff69 	bl	8007f44 <vPortValidateInterruptPriority>
	__asm volatile
 8006072:	f3ef 8211 	mrs	r2, BASEPRI
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	61ba      	str	r2, [r7, #24]
 8006088:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800608a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800608c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d02f      	beq.n	80060fa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a8:	f000 f8d7 	bl	800625a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d112      	bne.n	80060e4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	3310      	adds	r3, #16
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fe48 	bl	8006d60 <xTaskRemoveFromEventList>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e007      	b.n	80060f4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e8:	3301      	adds	r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	b25a      	sxtb	r2, r3
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060f4:	2301      	movs	r3, #1
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	e001      	b.n	80060fe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800610a:	4618      	mov	r0, r3
 800610c:	3738      	adds	r7, #56	; 0x38
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <vQueueDelete+0x26>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	e7fe      	b.n	8006136 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f95d 	bl	80063f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f001 fffb 	bl	8008144 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e001      	b.n	8006178 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006178:	68fb      	ldr	r3, [r7, #12]
	}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10d      	bne.n	80061c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d14d      	bne.n	8006248 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 f821 	bl	80071f8 <xTaskPriorityDisinherit>
 80061b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
 80061be:	e043      	b.n	8006248 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d119      	bne.n	80061fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6858      	ldr	r0, [r3, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	461a      	mov	r2, r3
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	f002 f905 	bl	80083e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d32b      	bcc.n	8006248 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	605a      	str	r2, [r3, #4]
 80061f8:	e026      	b.n	8006248 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68d8      	ldr	r0, [r3, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	461a      	mov	r2, r3
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	f002 f8eb 	bl	80083e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	425b      	negs	r3, r3
 8006214:	441a      	add	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d207      	bcs.n	8006236 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	425b      	negs	r3, r3
 8006230:	441a      	add	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d105      	bne.n	8006248 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3b01      	subs	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006250:	697b      	ldr	r3, [r7, #20]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d018      	beq.n	800629e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d303      	bcc.n	800628e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68d9      	ldr	r1, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	461a      	mov	r2, r3
 8006298:	6838      	ldr	r0, [r7, #0]
 800629a:	f002 f8a1 	bl	80083e0 <memcpy>
	}
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062ae:	f001 fd6d 	bl	8007d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062ba:	e011      	b.n	80062e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d012      	beq.n	80062ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3324      	adds	r3, #36	; 0x24
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fd49 	bl	8006d60 <xTaskRemoveFromEventList>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062d4:	f000 fe2c 	bl	8006f30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	3b01      	subs	r3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dce9      	bgt.n	80062bc <prvUnlockQueue+0x16>
 80062e8:	e000      	b.n	80062ec <prvUnlockQueue+0x46>
					break;
 80062ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	22ff      	movs	r2, #255	; 0xff
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062f4:	f001 fd78 	bl	8007de8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062f8:	f001 fd48 	bl	8007d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006302:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006304:	e011      	b.n	800632a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3310      	adds	r3, #16
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fd24 	bl	8006d60 <xTaskRemoveFromEventList>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800631e:	f000 fe07 	bl	8006f30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	3b01      	subs	r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800632a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dce9      	bgt.n	8006306 <prvUnlockQueue+0x60>
 8006332:	e000      	b.n	8006336 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006334:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800633e:	f001 fd53 	bl	8007de8 <vPortExitCritical>
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006352:	f001 fd1b 	bl	8007d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800635e:	2301      	movs	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e001      	b.n	8006368 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006368:	f001 fd3e 	bl	8007de8 <vPortExitCritical>

	return xReturn;
 800636c:	68fb      	ldr	r3, [r7, #12]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800637e:	f001 fd05 	bl	8007d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	429a      	cmp	r2, r3
 800638c:	d102      	bne.n	8006394 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800638e:	2301      	movs	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e001      	b.n	8006398 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006398:	f001 fd26 	bl	8007de8 <vPortExitCritical>

	return xReturn;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e014      	b.n	80063e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063b8:	4a0e      	ldr	r2, [pc, #56]	; (80063f4 <vQueueAddToRegistry+0x4c>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063c4:	490b      	ldr	r1, [pc, #44]	; (80063f4 <vQueueAddToRegistry+0x4c>)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063ce:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <vQueueAddToRegistry+0x4c>)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	4413      	add	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063da:	e005      	b.n	80063e8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b07      	cmp	r3, #7
 80063e6:	d9e7      	bls.n	80063b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	2000328c 	.word	0x2000328c

080063f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e016      	b.n	8006434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006406:	4a10      	ldr	r2, [pc, #64]	; (8006448 <vQueueUnregisterQueue+0x50>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d10b      	bne.n	800642e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <vQueueUnregisterQueue+0x50>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2100      	movs	r1, #0
 800641c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006420:	4a09      	ldr	r2, [pc, #36]	; (8006448 <vQueueUnregisterQueue+0x50>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	2200      	movs	r2, #0
 800642a:	605a      	str	r2, [r3, #4]
				break;
 800642c:	e005      	b.n	800643a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b07      	cmp	r3, #7
 8006438:	d9e5      	bls.n	8006406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800643a:	bf00      	nop
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	2000328c 	.word	0x2000328c

0800644c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800645c:	f001 fc96 	bl	8007d8c <vPortEnterCritical>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006466:	b25b      	sxtb	r3, r3
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d103      	bne.n	8006476 <vQueueWaitForMessageRestricted+0x2a>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800647c:	b25b      	sxtb	r3, r3
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006482:	d103      	bne.n	800648c <vQueueWaitForMessageRestricted+0x40>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800648c:	f001 fcac 	bl	8007de8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	3324      	adds	r3, #36	; 0x24
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fc33 	bl	8006d0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064a6:	6978      	ldr	r0, [r7, #20]
 80064a8:	f7ff fefd 	bl	80062a6 <prvUnlockQueue>
	}
 80064ac:	bf00      	nop
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08e      	sub	sp, #56	; 0x38
 80064b8:	af04      	add	r7, sp, #16
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <xTaskCreateStatic+0x28>
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	e7fe      	b.n	80064da <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <xTaskCreateStatic+0x42>
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e7fe      	b.n	80064f4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064f6:	235c      	movs	r3, #92	; 0x5c
 80064f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b5c      	cmp	r3, #92	; 0x5c
 80064fe:	d009      	beq.n	8006514 <xTaskCreateStatic+0x60>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e7fe      	b.n	8006512 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006514:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01e      	beq.n	800655a <xTaskCreateStatic+0xa6>
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01b      	beq.n	800655a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800652a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006534:	2300      	movs	r3, #0
 8006536:	9303      	str	r3, [sp, #12]
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	9302      	str	r3, [sp, #8]
 800653c:	f107 0314 	add.w	r3, r7, #20
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f850 	bl	80065f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006554:	f000 f8e0 	bl	8006718 <prvAddNewTaskToReadyList>
 8006558:	e001      	b.n	800655e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800655e:	697b      	ldr	r3, [r7, #20]
	}
 8006560:	4618      	mov	r0, r3
 8006562:	3728      	adds	r7, #40	; 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	; 0x30
 800656c:	af04      	add	r7, sp, #16
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006578:	88fb      	ldrh	r3, [r7, #6]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4618      	mov	r0, r3
 800657e:	f001 fd1f 	bl	8007fc0 <pvPortMalloc>
 8006582:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800658a:	205c      	movs	r0, #92	; 0x5c
 800658c:	f001 fd18 	bl	8007fc0 <pvPortMalloc>
 8006590:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	631a      	str	r2, [r3, #48]	; 0x30
 800659e:	e005      	b.n	80065ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f001 fdcf 	bl	8008144 <vPortFree>
 80065a6:	e001      	b.n	80065ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d017      	beq.n	80065e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065ba:	88fa      	ldrh	r2, [r7, #6]
 80065bc:	2300      	movs	r3, #0
 80065be:	9303      	str	r3, [sp, #12]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	9302      	str	r3, [sp, #8]
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f80e 	bl	80065f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065d6:	69f8      	ldr	r0, [r7, #28]
 80065d8:	f000 f89e 	bl	8006718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065dc:	2301      	movs	r3, #1
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	e002      	b.n	80065e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065e2:	f04f 33ff 	mov.w	r3, #4294967295
 80065e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065e8:	69bb      	ldr	r3, [r7, #24]
	}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b088      	sub	sp, #32
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	461a      	mov	r2, r3
 800660a:	21a5      	movs	r1, #165	; 0xa5
 800660c:	f001 fef3 	bl	80083f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800661a:	3b01      	subs	r3, #1
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f023 0307 	bic.w	r3, r3, #7
 8006628:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <prvInitialiseNewTask+0x56>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e7fe      	b.n	8006646 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01f      	beq.n	800668e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e012      	b.n	800667a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	7819      	ldrb	r1, [r3, #0]
 800665c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	3334      	adds	r3, #52	; 0x34
 8006664:	460a      	mov	r2, r1
 8006666:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d006      	beq.n	8006682 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	3301      	adds	r3, #1
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	2b0f      	cmp	r3, #15
 800667e:	d9e9      	bls.n	8006654 <prvInitialiseNewTask+0x62>
 8006680:	e000      	b.n	8006684 <prvInitialiseNewTask+0x92>
			{
				break;
 8006682:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800668c:	e003      	b.n	8006696 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	2b37      	cmp	r3, #55	; 0x37
 800669a:	d901      	bls.n	80066a0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800669c:	2337      	movs	r3, #55	; 0x37
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	2200      	movs	r2, #0
 80066b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	3304      	adds	r3, #4
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fe2e 	bl	8005318 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	3318      	adds	r3, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fe29 	bl	8005318 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2200      	movs	r2, #0
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	68f9      	ldr	r1, [r7, #12]
 80066f6:	69b8      	ldr	r0, [r7, #24]
 80066f8:	f001 fa1e 	bl	8007b38 <pxPortInitialiseStack>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800670e:	bf00      	nop
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006720:	f001 fb34 	bl	8007d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006724:	4b2d      	ldr	r3, [pc, #180]	; (80067dc <prvAddNewTaskToReadyList+0xc4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3301      	adds	r3, #1
 800672a:	4a2c      	ldr	r2, [pc, #176]	; (80067dc <prvAddNewTaskToReadyList+0xc4>)
 800672c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800672e:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <prvAddNewTaskToReadyList+0xc8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006736:	4a2a      	ldr	r2, [pc, #168]	; (80067e0 <prvAddNewTaskToReadyList+0xc8>)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800673c:	4b27      	ldr	r3, [pc, #156]	; (80067dc <prvAddNewTaskToReadyList+0xc4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d110      	bne.n	8006766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006744:	f000 fc18 	bl	8006f78 <prvInitialiseTaskLists>
 8006748:	e00d      	b.n	8006766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800674a:	4b26      	ldr	r3, [pc, #152]	; (80067e4 <prvAddNewTaskToReadyList+0xcc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006752:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <prvAddNewTaskToReadyList+0xc8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d802      	bhi.n	8006766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <prvAddNewTaskToReadyList+0xc8>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006766:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <prvAddNewTaskToReadyList+0xd0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3301      	adds	r3, #1
 800676c:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <prvAddNewTaskToReadyList+0xd0>)
 800676e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006770:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <prvAddNewTaskToReadyList+0xd0>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <prvAddNewTaskToReadyList+0xd4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d903      	bls.n	800678c <prvAddNewTaskToReadyList+0x74>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	4a18      	ldr	r2, [pc, #96]	; (80067ec <prvAddNewTaskToReadyList+0xd4>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <prvAddNewTaskToReadyList+0xd8>)
 800679a:	441a      	add	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe fdc5 	bl	8005332 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067a8:	f001 fb1e 	bl	8007de8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <prvAddNewTaskToReadyList+0xcc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00e      	beq.n	80067d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <prvAddNewTaskToReadyList+0xc8>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	429a      	cmp	r2, r3
 80067c0:	d207      	bcs.n	80067d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <prvAddNewTaskToReadyList+0xdc>)
 80067c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000c64 	.word	0x20000c64
 80067e0:	20000790 	.word	0x20000790
 80067e4:	20000c70 	.word	0x20000c70
 80067e8:	20000c80 	.word	0x20000c80
 80067ec:	20000c6c 	.word	0x20000c6c
 80067f0:	20000794 	.word	0x20000794
 80067f4:	e000ed04 	.word	0xe000ed04

080067f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800680a:	4b13      	ldr	r3, [pc, #76]	; (8006858 <vTaskDelay+0x60>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <vTaskDelay+0x2e>
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
 8006824:	e7fe      	b.n	8006824 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006826:	f000 f87f 	bl	8006928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800682a:	2100      	movs	r1, #0
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fde3 	bl	80073f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006832:	f000 f887 	bl	8006944 <xTaskResumeAll>
 8006836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d107      	bne.n	800684e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <vTaskDelay+0x64>)
 8006840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000c8c 	.word	0x20000c8c
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800686e:	463a      	mov	r2, r7
 8006870:	1d39      	adds	r1, r7, #4
 8006872:	f107 0308 	add.w	r3, r7, #8
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fcfa 	bl	8005270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	9202      	str	r2, [sp, #8]
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	2300      	movs	r3, #0
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	460a      	mov	r2, r1
 800688e:	4920      	ldr	r1, [pc, #128]	; (8006910 <vTaskStartScheduler+0xb0>)
 8006890:	4820      	ldr	r0, [pc, #128]	; (8006914 <vTaskStartScheduler+0xb4>)
 8006892:	f7ff fe0f 	bl	80064b4 <xTaskCreateStatic>
 8006896:	4602      	mov	r2, r0
 8006898:	4b1f      	ldr	r3, [pc, #124]	; (8006918 <vTaskStartScheduler+0xb8>)
 800689a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800689c:	4b1e      	ldr	r3, [pc, #120]	; (8006918 <vTaskStartScheduler+0xb8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e001      	b.n	80068ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d102      	bne.n	80068ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068b4:	f000 fdfa 	bl	80074ac <xTimerCreateTimerTask>
 80068b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d115      	bne.n	80068ec <vTaskStartScheduler+0x8c>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068d2:	4b12      	ldr	r3, [pc, #72]	; (800691c <vTaskStartScheduler+0xbc>)
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068da:	4b11      	ldr	r3, [pc, #68]	; (8006920 <vTaskStartScheduler+0xc0>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068e0:	4b10      	ldr	r3, [pc, #64]	; (8006924 <vTaskStartScheduler+0xc4>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068e6:	f001 f9b3 	bl	8007c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068ea:	e00d      	b.n	8006908 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d109      	bne.n	8006908 <vTaskStartScheduler+0xa8>
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e7fe      	b.n	8006906 <vTaskStartScheduler+0xa6>
}
 8006908:	bf00      	nop
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	08008cf4 	.word	0x08008cf4
 8006914:	08006f49 	.word	0x08006f49
 8006918:	20000c88 	.word	0x20000c88
 800691c:	20000c84 	.word	0x20000c84
 8006920:	20000c70 	.word	0x20000c70
 8006924:	20000c68 	.word	0x20000c68

08006928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <vTaskSuspendAll+0x18>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	4a03      	ldr	r2, [pc, #12]	; (8006940 <vTaskSuspendAll+0x18>)
 8006934:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006936:	bf00      	nop
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	20000c8c 	.word	0x20000c8c

08006944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006952:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <xTaskResumeAll+0x114>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <xTaskResumeAll+0x2a>
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	e7fe      	b.n	800696c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800696e:	f001 fa0d 	bl	8007d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <xTaskResumeAll+0x114>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a37      	ldr	r2, [pc, #220]	; (8006a58 <xTaskResumeAll+0x114>)
 800697a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <xTaskResumeAll+0x114>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d162      	bne.n	8006a4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006984:	4b35      	ldr	r3, [pc, #212]	; (8006a5c <xTaskResumeAll+0x118>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d05e      	beq.n	8006a4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800698c:	e02f      	b.n	80069ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698e:	4b34      	ldr	r3, [pc, #208]	; (8006a60 <xTaskResumeAll+0x11c>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3318      	adds	r3, #24
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe fd26 	bl	80053ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fd21 	bl	80053ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ae:	4b2d      	ldr	r3, [pc, #180]	; (8006a64 <xTaskResumeAll+0x120>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d903      	bls.n	80069be <xTaskResumeAll+0x7a>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	4a2a      	ldr	r2, [pc, #168]	; (8006a64 <xTaskResumeAll+0x120>)
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4a27      	ldr	r2, [pc, #156]	; (8006a68 <xTaskResumeAll+0x124>)
 80069cc:	441a      	add	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7fe fcac 	bl	8005332 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	4b23      	ldr	r3, [pc, #140]	; (8006a6c <xTaskResumeAll+0x128>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d302      	bcc.n	80069ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069e8:	4b21      	ldr	r3, [pc, #132]	; (8006a70 <xTaskResumeAll+0x12c>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069ee:	4b1c      	ldr	r3, [pc, #112]	; (8006a60 <xTaskResumeAll+0x11c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1cb      	bne.n	800698e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069fc:	f000 fb56 	bl	80070ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a00:	4b1c      	ldr	r3, [pc, #112]	; (8006a74 <xTaskResumeAll+0x130>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d010      	beq.n	8006a2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a0c:	f000 f846 	bl	8006a9c <xTaskIncrementTick>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a16:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <xTaskResumeAll+0x12c>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1f1      	bne.n	8006a0c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006a28:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <xTaskResumeAll+0x130>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a2e:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <xTaskResumeAll+0x12c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a36:	2301      	movs	r3, #1
 8006a38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a3a:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <xTaskResumeAll+0x134>)
 8006a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 f9cd 	bl	8007de8 <vPortExitCritical>

	return xAlreadyYielded;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000c8c 	.word	0x20000c8c
 8006a5c:	20000c64 	.word	0x20000c64
 8006a60:	20000c24 	.word	0x20000c24
 8006a64:	20000c6c 	.word	0x20000c6c
 8006a68:	20000794 	.word	0x20000794
 8006a6c:	20000790 	.word	0x20000790
 8006a70:	20000c78 	.word	0x20000c78
 8006a74:	20000c74 	.word	0x20000c74
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <xTaskGetTickCount+0x1c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a88:	687b      	ldr	r3, [r7, #4]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20000c68 	.word	0x20000c68

08006a9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa6:	4b4e      	ldr	r3, [pc, #312]	; (8006be0 <xTaskIncrementTick+0x144>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f040 8088 	bne.w	8006bc0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ab0:	4b4c      	ldr	r3, [pc, #304]	; (8006be4 <xTaskIncrementTick+0x148>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ab8:	4a4a      	ldr	r2, [pc, #296]	; (8006be4 <xTaskIncrementTick+0x148>)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11f      	bne.n	8006b04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ac4:	4b48      	ldr	r3, [pc, #288]	; (8006be8 <xTaskIncrementTick+0x14c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <xTaskIncrementTick+0x46>
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	e7fe      	b.n	8006ae0 <xTaskIncrementTick+0x44>
 8006ae2:	4b41      	ldr	r3, [pc, #260]	; (8006be8 <xTaskIncrementTick+0x14c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	4b40      	ldr	r3, [pc, #256]	; (8006bec <xTaskIncrementTick+0x150>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a3e      	ldr	r2, [pc, #248]	; (8006be8 <xTaskIncrementTick+0x14c>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	4a3e      	ldr	r2, [pc, #248]	; (8006bec <xTaskIncrementTick+0x150>)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	4b3e      	ldr	r3, [pc, #248]	; (8006bf0 <xTaskIncrementTick+0x154>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	4a3c      	ldr	r2, [pc, #240]	; (8006bf0 <xTaskIncrementTick+0x154>)
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	f000 fad4 	bl	80070ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b04:	4b3b      	ldr	r3, [pc, #236]	; (8006bf4 <xTaskIncrementTick+0x158>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d349      	bcc.n	8006ba2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b0e:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <xTaskIncrementTick+0x14c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b18:	4b36      	ldr	r3, [pc, #216]	; (8006bf4 <xTaskIncrementTick+0x158>)
 8006b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1e:	601a      	str	r2, [r3, #0]
					break;
 8006b20:	e03f      	b.n	8006ba2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b22:	4b31      	ldr	r3, [pc, #196]	; (8006be8 <xTaskIncrementTick+0x14c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d203      	bcs.n	8006b42 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b3a:	4a2e      	ldr	r2, [pc, #184]	; (8006bf4 <xTaskIncrementTick+0x158>)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b40:	e02f      	b.n	8006ba2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fc50 	bl	80053ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3318      	adds	r3, #24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fc47 	bl	80053ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4b25      	ldr	r3, [pc, #148]	; (8006bf8 <xTaskIncrementTick+0x15c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d903      	bls.n	8006b72 <xTaskIncrementTick+0xd6>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	4a22      	ldr	r2, [pc, #136]	; (8006bf8 <xTaskIncrementTick+0x15c>)
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4a1f      	ldr	r2, [pc, #124]	; (8006bfc <xTaskIncrementTick+0x160>)
 8006b80:	441a      	add	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7fe fbd2 	bl	8005332 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <xTaskIncrementTick+0x164>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d3b8      	bcc.n	8006b0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ba0:	e7b5      	b.n	8006b0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <xTaskIncrementTick+0x164>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4914      	ldr	r1, [pc, #80]	; (8006bfc <xTaskIncrementTick+0x160>)
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d907      	bls.n	8006bca <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e004      	b.n	8006bca <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bc0:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <xTaskIncrementTick+0x168>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a0f      	ldr	r2, [pc, #60]	; (8006c04 <xTaskIncrementTick+0x168>)
 8006bc8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006bca:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <xTaskIncrementTick+0x16c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bd6:	697b      	ldr	r3, [r7, #20]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000c8c 	.word	0x20000c8c
 8006be4:	20000c68 	.word	0x20000c68
 8006be8:	20000c1c 	.word	0x20000c1c
 8006bec:	20000c20 	.word	0x20000c20
 8006bf0:	20000c7c 	.word	0x20000c7c
 8006bf4:	20000c84 	.word	0x20000c84
 8006bf8:	20000c6c 	.word	0x20000c6c
 8006bfc:	20000794 	.word	0x20000794
 8006c00:	20000790 	.word	0x20000790
 8006c04:	20000c74 	.word	0x20000c74
 8006c08:	20000c78 	.word	0x20000c78

08006c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c12:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <vTaskSwitchContext+0xa4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c1a:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <vTaskSwitchContext+0xa8>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c20:	e040      	b.n	8006ca4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <vTaskSwitchContext+0xa8>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c28:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <vTaskSwitchContext+0xac>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	e00f      	b.n	8006c50 <vTaskSwitchContext+0x44>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d109      	bne.n	8006c4a <vTaskSwitchContext+0x3e>
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	e7fe      	b.n	8006c48 <vTaskSwitchContext+0x3c>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	491a      	ldr	r1, [pc, #104]	; (8006cbc <vTaskSwitchContext+0xb0>)
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0e5      	beq.n	8006c30 <vTaskSwitchContext+0x24>
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4a13      	ldr	r2, [pc, #76]	; (8006cbc <vTaskSwitchContext+0xb0>)
 8006c70:	4413      	add	r3, r2
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	3308      	adds	r3, #8
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d104      	bne.n	8006c94 <vTaskSwitchContext+0x88>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <vTaskSwitchContext+0xb4>)
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4a06      	ldr	r2, [pc, #24]	; (8006cb8 <vTaskSwitchContext+0xac>)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6013      	str	r3, [r2, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	20000c8c 	.word	0x20000c8c
 8006cb4:	20000c78 	.word	0x20000c78
 8006cb8:	20000c6c 	.word	0x20000c6c
 8006cbc:	20000794 	.word	0x20000794
 8006cc0:	20000790 	.word	0x20000790

08006cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <vTaskPlaceOnEventList+0x24>
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	e7fe      	b.n	8006ce6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <vTaskPlaceOnEventList+0x44>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3318      	adds	r3, #24
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fe fb42 	bl	800537a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	6838      	ldr	r0, [r7, #0]
 8006cfa:	f000 fb7d 	bl	80073f8 <prvAddCurrentTaskToDelayedList>
}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000790 	.word	0x20000790

08006d0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <vTaskPlaceOnEventListRestricted+0x26>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e7fe      	b.n	8006d30 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <vTaskPlaceOnEventListRestricted+0x50>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3318      	adds	r3, #24
 8006d38:	4619      	mov	r1, r3
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7fe faf9 	bl	8005332 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	68b8      	ldr	r0, [r7, #8]
 8006d50:	f000 fb52 	bl	80073f8 <prvAddCurrentTaskToDelayedList>
	}
 8006d54:	bf00      	nop
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000790 	.word	0x20000790

08006d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <xTaskRemoveFromEventList+0x2a>
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e7fe      	b.n	8006d88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fb2c 	bl	80053ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d94:	4b1d      	ldr	r3, [pc, #116]	; (8006e0c <xTaskRemoveFromEventList+0xac>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11d      	bne.n	8006dd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe fb23 	bl	80053ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006daa:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <xTaskRemoveFromEventList+0xb0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d903      	bls.n	8006dba <xTaskRemoveFromEventList+0x5a>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <xTaskRemoveFromEventList+0xb0>)
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a13      	ldr	r2, [pc, #76]	; (8006e14 <xTaskRemoveFromEventList+0xb4>)
 8006dc8:	441a      	add	r2, r3
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fe faae 	bl	8005332 <vListInsertEnd>
 8006dd6:	e005      	b.n	8006de4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3318      	adds	r3, #24
 8006ddc:	4619      	mov	r1, r3
 8006dde:	480e      	ldr	r0, [pc, #56]	; (8006e18 <xTaskRemoveFromEventList+0xb8>)
 8006de0:	f7fe faa7 	bl	8005332 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <xTaskRemoveFromEventList+0xbc>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d905      	bls.n	8006dfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006df2:	2301      	movs	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006df6:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <xTaskRemoveFromEventList+0xc0>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e001      	b.n	8006e02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e02:	697b      	ldr	r3, [r7, #20]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000c8c 	.word	0x20000c8c
 8006e10:	20000c6c 	.word	0x20000c6c
 8006e14:	20000794 	.word	0x20000794
 8006e18:	20000c24 	.word	0x20000c24
 8006e1c:	20000790 	.word	0x20000790
 8006e20:	20000c78 	.word	0x20000c78

08006e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <vTaskInternalSetTimeOutState+0x24>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <vTaskInternalSetTimeOutState+0x28>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	605a      	str	r2, [r3, #4]
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	20000c7c 	.word	0x20000c7c
 8006e4c:	20000c68 	.word	0x20000c68

08006e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <xTaskCheckForTimeOut+0x24>
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	e7fe      	b.n	8006e72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <xTaskCheckForTimeOut+0x3e>
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e7fe      	b.n	8006e8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006e8e:	f000 ff7d 	bl	8007d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e92:	4b24      	ldr	r3, [pc, #144]	; (8006f24 <xTaskCheckForTimeOut+0xd4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8006ea2:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <xTaskCheckForTimeOut+0xd8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8006eae:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <xTaskCheckForTimeOut+0xd8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	e02b      	b.n	8006f16 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d102      	bne.n	8006ece <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61fb      	str	r3, [r7, #28]
 8006ecc:	e023      	b.n	8006f16 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	4b16      	ldr	r3, [pc, #88]	; (8006f2c <xTaskCheckForTimeOut+0xdc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d007      	beq.n	8006eea <xTaskCheckForTimeOut+0x9a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	e015      	b.n	8006f16 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d20b      	bcs.n	8006f0c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff ff8f 	bl	8006e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	e004      	b.n	8006f16 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f16:	f000 ff67 	bl	8007de8 <vPortExitCritical>

	return xReturn;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000c68 	.word	0x20000c68
 8006f28:	20000790 	.word	0x20000790
 8006f2c:	20000c7c 	.word	0x20000c7c

08006f30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f34:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <vTaskMissedYield+0x14>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	20000c78 	.word	0x20000c78

08006f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f50:	f000 f852 	bl	8006ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f54:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <prvIdleTask+0x28>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d9f9      	bls.n	8006f50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <prvIdleTask+0x2c>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f6c:	e7f0      	b.n	8006f50 <prvIdleTask+0x8>
 8006f6e:	bf00      	nop
 8006f70:	20000794 	.word	0x20000794
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f7e:	2300      	movs	r3, #0
 8006f80:	607b      	str	r3, [r7, #4]
 8006f82:	e00c      	b.n	8006f9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <prvInitialiseTaskLists+0x60>)
 8006f90:	4413      	add	r3, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe f9a0 	bl	80052d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	607b      	str	r3, [r7, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b37      	cmp	r3, #55	; 0x37
 8006fa2:	d9ef      	bls.n	8006f84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fa4:	480d      	ldr	r0, [pc, #52]	; (8006fdc <prvInitialiseTaskLists+0x64>)
 8006fa6:	f7fe f997 	bl	80052d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006faa:	480d      	ldr	r0, [pc, #52]	; (8006fe0 <prvInitialiseTaskLists+0x68>)
 8006fac:	f7fe f994 	bl	80052d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fb0:	480c      	ldr	r0, [pc, #48]	; (8006fe4 <prvInitialiseTaskLists+0x6c>)
 8006fb2:	f7fe f991 	bl	80052d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fb6:	480c      	ldr	r0, [pc, #48]	; (8006fe8 <prvInitialiseTaskLists+0x70>)
 8006fb8:	f7fe f98e 	bl	80052d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fbc:	480b      	ldr	r0, [pc, #44]	; (8006fec <prvInitialiseTaskLists+0x74>)
 8006fbe:	f7fe f98b 	bl	80052d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <prvInitialiseTaskLists+0x78>)
 8006fc4:	4a05      	ldr	r2, [pc, #20]	; (8006fdc <prvInitialiseTaskLists+0x64>)
 8006fc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <prvInitialiseTaskLists+0x7c>)
 8006fca:	4a05      	ldr	r2, [pc, #20]	; (8006fe0 <prvInitialiseTaskLists+0x68>)
 8006fcc:	601a      	str	r2, [r3, #0]
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000794 	.word	0x20000794
 8006fdc:	20000bf4 	.word	0x20000bf4
 8006fe0:	20000c08 	.word	0x20000c08
 8006fe4:	20000c24 	.word	0x20000c24
 8006fe8:	20000c38 	.word	0x20000c38
 8006fec:	20000c50 	.word	0x20000c50
 8006ff0:	20000c1c 	.word	0x20000c1c
 8006ff4:	20000c20 	.word	0x20000c20

08006ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ffe:	e019      	b.n	8007034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007000:	f000 fec4 	bl	8007d8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <prvCheckTasksWaitingTermination+0x4c>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe f9eb 	bl	80053ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007016:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <prvCheckTasksWaitingTermination+0x50>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3b01      	subs	r3, #1
 800701c:	4a0a      	ldr	r2, [pc, #40]	; (8007048 <prvCheckTasksWaitingTermination+0x50>)
 800701e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <prvCheckTasksWaitingTermination+0x54>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3b01      	subs	r3, #1
 8007026:	4a09      	ldr	r2, [pc, #36]	; (800704c <prvCheckTasksWaitingTermination+0x54>)
 8007028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800702a:	f000 fedd 	bl	8007de8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f80e 	bl	8007050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <prvCheckTasksWaitingTermination+0x54>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e1      	bne.n	8007000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000c38 	.word	0x20000c38
 8007048:	20000c64 	.word	0x20000c64
 800704c:	20000c4c 	.word	0x20000c4c

08007050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800705e:	2b00      	cmp	r3, #0
 8007060:	d108      	bne.n	8007074 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	4618      	mov	r0, r3
 8007068:	f001 f86c 	bl	8008144 <vPortFree>
				vPortFree( pxTCB );
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 f869 	bl	8008144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007072:	e017      	b.n	80070a4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800707a:	2b01      	cmp	r3, #1
 800707c:	d103      	bne.n	8007086 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f860 	bl	8008144 <vPortFree>
	}
 8007084:	e00e      	b.n	80070a4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800708c:	2b02      	cmp	r3, #2
 800708e:	d009      	beq.n	80070a4 <prvDeleteTCB+0x54>
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	e7fe      	b.n	80070a2 <prvDeleteTCB+0x52>
	}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b2:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <prvResetNextTaskUnblockTime+0x38>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <prvResetNextTaskUnblockTime+0x3c>)
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070c4:	e008      	b.n	80070d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <prvResetNextTaskUnblockTime+0x38>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a04      	ldr	r2, [pc, #16]	; (80070e8 <prvResetNextTaskUnblockTime+0x3c>)
 80070d6:	6013      	str	r3, [r2, #0]
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	20000c1c 	.word	0x20000c1c
 80070e8:	20000c84 	.word	0x20000c84

080070ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070f2:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <xTaskGetSchedulerState+0x34>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070fa:	2301      	movs	r3, #1
 80070fc:	607b      	str	r3, [r7, #4]
 80070fe:	e008      	b.n	8007112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007100:	4b08      	ldr	r3, [pc, #32]	; (8007124 <xTaskGetSchedulerState+0x38>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007108:	2302      	movs	r3, #2
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	e001      	b.n	8007112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800710e:	2300      	movs	r3, #0
 8007110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007112:	687b      	ldr	r3, [r7, #4]
	}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000c70 	.word	0x20000c70
 8007124:	20000c8c 	.word	0x20000c8c

08007128 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d051      	beq.n	80071e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <xTaskPriorityInherit+0xc4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	429a      	cmp	r2, r3
 800714a:	d241      	bcs.n	80071d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	db06      	blt.n	8007162 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007154:	4b25      	ldr	r3, [pc, #148]	; (80071ec <xTaskPriorityInherit+0xc4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6959      	ldr	r1, [r3, #20]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a1f      	ldr	r2, [pc, #124]	; (80071f0 <xTaskPriorityInherit+0xc8>)
 8007174:	4413      	add	r3, r2
 8007176:	4299      	cmp	r1, r3
 8007178:	d122      	bne.n	80071c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3304      	adds	r3, #4
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe f934 	bl	80053ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007184:	4b19      	ldr	r3, [pc, #100]	; (80071ec <xTaskPriorityInherit+0xc4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <xTaskPriorityInherit+0xcc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d903      	bls.n	80071a2 <xTaskPriorityInherit+0x7a>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <xTaskPriorityInherit+0xcc>)
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4a10      	ldr	r2, [pc, #64]	; (80071f0 <xTaskPriorityInherit+0xc8>)
 80071b0:	441a      	add	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f7fe f8ba 	bl	8005332 <vListInsertEnd>
 80071be:	e004      	b.n	80071ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071c0:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <xTaskPriorityInherit+0xc4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80071ca:	2301      	movs	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	e008      	b.n	80071e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <xTaskPriorityInherit+0xc4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	429a      	cmp	r2, r3
 80071dc:	d201      	bcs.n	80071e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80071de:	2301      	movs	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071e2:	68fb      	ldr	r3, [r7, #12]
	}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000790 	.word	0x20000790
 80071f0:	20000794 	.word	0x20000794
 80071f4:	20000c6c 	.word	0x20000c6c

080071f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d054      	beq.n	80072b8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800720e:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <xTaskPriorityDisinherit+0xcc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	429a      	cmp	r2, r3
 8007216:	d009      	beq.n	800722c <xTaskPriorityDisinherit+0x34>
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e7fe      	b.n	800722a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <xTaskPriorityDisinherit+0x50>
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	e7fe      	b.n	8007246 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724c:	1e5a      	subs	r2, r3, #1
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725a:	429a      	cmp	r2, r3
 800725c:	d02c      	beq.n	80072b8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	2b00      	cmp	r3, #0
 8007264:	d128      	bne.n	80072b8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	3304      	adds	r3, #4
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe f8be 	bl	80053ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007288:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <xTaskPriorityDisinherit+0xd0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d903      	bls.n	8007298 <xTaskPriorityDisinherit+0xa0>
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	4a0c      	ldr	r2, [pc, #48]	; (80072c8 <xTaskPriorityDisinherit+0xd0>)
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4a09      	ldr	r2, [pc, #36]	; (80072cc <xTaskPriorityDisinherit+0xd4>)
 80072a6:	441a      	add	r2, r3
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	3304      	adds	r3, #4
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	f7fe f83f 	bl	8005332 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072b8:	697b      	ldr	r3, [r7, #20]
	}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000790 	.word	0x20000790
 80072c8:	20000c6c 	.word	0x20000c6c
 80072cc:	20000794 	.word	0x20000794

080072d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072de:	2301      	movs	r3, #1
 80072e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d068      	beq.n	80073ba <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e7fe      	b.n	8007302 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d902      	bls.n	8007314 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	e002      	b.n	800731a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007318:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	429a      	cmp	r2, r3
 8007322:	d04a      	beq.n	80073ba <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	429a      	cmp	r2, r3
 800732c:	d145      	bne.n	80073ba <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800732e:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	429a      	cmp	r2, r3
 8007336:	d109      	bne.n	800734c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	e7fe      	b.n	800734a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	db04      	blt.n	800736a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	6959      	ldr	r1, [r3, #20]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800737a:	4413      	add	r3, r2
 800737c:	4299      	cmp	r1, r3
 800737e:	d11c      	bne.n	80073ba <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	3304      	adds	r3, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe f831 	bl	80053ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d903      	bls.n	800739e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	4a0c      	ldr	r2, [pc, #48]	; (80073cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4a07      	ldr	r2, [pc, #28]	; (80073c8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80073ac:	441a      	add	r2, r3
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7fd ffbc 	bl	8005332 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073ba:	bf00      	nop
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000790 	.word	0x20000790
 80073c8:	20000794 	.word	0x20000794
 80073cc:	20000c6c 	.word	0x20000c6c

080073d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073e2:	3201      	adds	r2, #1
 80073e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80073e6:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80073e8:	681b      	ldr	r3, [r3, #0]
	}
 80073ea:	4618      	mov	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	20000790 	.word	0x20000790

080073f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007408:	4b23      	ldr	r3, [pc, #140]	; (8007498 <prvAddCurrentTaskToDelayedList+0xa0>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007412:	4b21      	ldr	r3, [pc, #132]	; (8007498 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3304      	adds	r3, #4
 8007418:	4618      	mov	r0, r3
 800741a:	f7fd ffe7 	bl	80053ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d10a      	bne.n	800743c <prvAddCurrentTaskToDelayedList+0x44>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742c:	4b1a      	ldr	r3, [pc, #104]	; (8007498 <prvAddCurrentTaskToDelayedList+0xa0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4819      	ldr	r0, [pc, #100]	; (800749c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007436:	f7fd ff7c 	bl	8005332 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800743a:	e026      	b.n	800748a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007444:	4b14      	ldr	r3, [pc, #80]	; (8007498 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	429a      	cmp	r2, r3
 8007452:	d209      	bcs.n	8007468 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007454:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <prvAddCurrentTaskToDelayedList+0xa8>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <prvAddCurrentTaskToDelayedList+0xa0>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f7fd ff8a 	bl	800537a <vListInsert>
}
 8007466:	e010      	b.n	800748a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <prvAddCurrentTaskToDelayedList+0xac>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <prvAddCurrentTaskToDelayedList+0xa0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3304      	adds	r3, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f7fd ff80 	bl	800537a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	429a      	cmp	r2, r3
 8007482:	d202      	bcs.n	800748a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8007484:	4a08      	ldr	r2, [pc, #32]	; (80074a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6013      	str	r3, [r2, #0]
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000c68 	.word	0x20000c68
 8007498:	20000790 	.word	0x20000790
 800749c:	20000c50 	.word	0x20000c50
 80074a0:	20000c20 	.word	0x20000c20
 80074a4:	20000c1c 	.word	0x20000c1c
 80074a8:	20000c84 	.word	0x20000c84

080074ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08a      	sub	sp, #40	; 0x28
 80074b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80074b6:	f000 faff 	bl	8007ab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80074ba:	4b1c      	ldr	r3, [pc, #112]	; (800752c <xTimerCreateTimerTask+0x80>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d021      	beq.n	8007506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074ca:	1d3a      	adds	r2, r7, #4
 80074cc:	f107 0108 	add.w	r1, r7, #8
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd fee5 	bl	80052a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	9202      	str	r2, [sp, #8]
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	2302      	movs	r3, #2
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	460a      	mov	r2, r1
 80074ec:	4910      	ldr	r1, [pc, #64]	; (8007530 <xTimerCreateTimerTask+0x84>)
 80074ee:	4811      	ldr	r0, [pc, #68]	; (8007534 <xTimerCreateTimerTask+0x88>)
 80074f0:	f7fe ffe0 	bl	80064b4 <xTaskCreateStatic>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <xTimerCreateTimerTask+0x8c>)
 80074f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074fa:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <xTimerCreateTimerTask+0x8c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007502:	2301      	movs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <xTimerCreateTimerTask+0x74>
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	e7fe      	b.n	800751e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007520:	697b      	ldr	r3, [r7, #20]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20000cc0 	.word	0x20000cc0
 8007530:	08008cfc 	.word	0x08008cfc
 8007534:	0800766d 	.word	0x0800766d
 8007538:	20000cc4 	.word	0x20000cc4

0800753c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800754a:	2300      	movs	r3, #0
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <xTimerGenericCommand+0x2c>
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	623b      	str	r3, [r7, #32]
 8007566:	e7fe      	b.n	8007566 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007568:	4b19      	ldr	r3, [pc, #100]	; (80075d0 <xTimerGenericCommand+0x94>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d02a      	beq.n	80075c6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b05      	cmp	r3, #5
 8007580:	dc18      	bgt.n	80075b4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007582:	f7ff fdb3 	bl	80070ec <xTaskGetSchedulerState>
 8007586:	4603      	mov	r3, r0
 8007588:	2b02      	cmp	r3, #2
 800758a:	d109      	bne.n	80075a0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <xTimerGenericCommand+0x94>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	f107 0110 	add.w	r1, r7, #16
 8007594:	2300      	movs	r3, #0
 8007596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007598:	f7fe f942 	bl	8005820 <xQueueGenericSend>
 800759c:	6278      	str	r0, [r7, #36]	; 0x24
 800759e:	e012      	b.n	80075c6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <xTimerGenericCommand+0x94>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	f107 0110 	add.w	r1, r7, #16
 80075a8:	2300      	movs	r3, #0
 80075aa:	2200      	movs	r2, #0
 80075ac:	f7fe f938 	bl	8005820 <xQueueGenericSend>
 80075b0:	6278      	str	r0, [r7, #36]	; 0x24
 80075b2:	e008      	b.n	80075c6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075b4:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <xTimerGenericCommand+0x94>)
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	f107 0110 	add.w	r1, r7, #16
 80075bc:	2300      	movs	r3, #0
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	f7fe fa28 	bl	8005a14 <xQueueGenericSendFromISR>
 80075c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3728      	adds	r7, #40	; 0x28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20000cc0 	.word	0x20000cc0

080075d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af02      	add	r7, sp, #8
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075de:	4b22      	ldr	r3, [pc, #136]	; (8007668 <prvProcessExpiredTimer+0x94>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fefd 	bl	80053ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d021      	beq.n	8007644 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	18d1      	adds	r1, r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f000 f8d1 	bl	80077b4 <prvInsertTimerInActiveList>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01e      	beq.n	8007656 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007618:	2300      	movs	r3, #0
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2300      	movs	r3, #0
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	2100      	movs	r1, #0
 8007622:	6978      	ldr	r0, [r7, #20]
 8007624:	f7ff ff8a 	bl	800753c <xTimerGenericCommand>
 8007628:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d112      	bne.n	8007656 <prvProcessExpiredTimer+0x82>
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	e7fe      	b.n	8007642 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	6978      	ldr	r0, [r7, #20]
 800765c:	4798      	blx	r3
}
 800765e:	bf00      	nop
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000cb8 	.word	0x20000cb8

0800766c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007674:	f107 0308 	add.w	r3, r7, #8
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f857 	bl	800772c <prvGetNextExpireTime>
 800767e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f803 	bl	8007690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800768a:	f000 f8d5 	bl	8007838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800768e:	e7f1      	b.n	8007674 <prvTimerTask+0x8>

08007690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800769a:	f7ff f945 	bl	8006928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f866 	bl	8007774 <prvSampleTimeNow>
 80076a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d130      	bne.n	8007712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d806      	bhi.n	80076cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076be:	f7ff f941 	bl	8006944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff85 	bl	80075d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076ca:	e024      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076d2:	4b13      	ldr	r3, [pc, #76]	; (8007720 <prvProcessTimerOrBlockTask+0x90>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <prvProcessTimerOrBlockTask+0x50>
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <prvProcessTimerOrBlockTask+0x52>
 80076e0:	2300      	movs	r3, #0
 80076e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <prvProcessTimerOrBlockTask+0x94>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f7fe feab 	bl	800644c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076f6:	f7ff f925 	bl	8006944 <xTaskResumeAll>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007700:	4b09      	ldr	r3, [pc, #36]	; (8007728 <prvProcessTimerOrBlockTask+0x98>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
}
 8007710:	e001      	b.n	8007716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007712:	f7ff f917 	bl	8006944 <xTaskResumeAll>
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000cbc 	.word	0x20000cbc
 8007724:	20000cc0 	.word	0x20000cc0
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <prvGetNextExpireTime+0x44>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <prvGetNextExpireTime+0x16>
 800773e:	2201      	movs	r2, #1
 8007740:	e000      	b.n	8007744 <prvGetNextExpireTime+0x18>
 8007742:	2200      	movs	r2, #0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <prvGetNextExpireTime+0x44>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e001      	b.n	8007760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20000cb8 	.word	0x20000cb8

08007774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800777c:	f7ff f97e 	bl	8006a7c <xTaskGetTickCount>
 8007780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <prvSampleTimeNow+0x3c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	429a      	cmp	r2, r3
 800778a:	d205      	bcs.n	8007798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800778c:	f000 f930 	bl	80079f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e002      	b.n	800779e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800779e:	4a04      	ldr	r2, [pc, #16]	; (80077b0 <prvSampleTimeNow+0x3c>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077a4:	68fb      	ldr	r3, [r7, #12]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000cc8 	.word	0x20000cc8

080077b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d812      	bhi.n	8007800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	e01b      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <prvInsertTimerInActiveList+0x7c>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fd fdbe 	bl	800537a <vListInsert>
 80077fe:	e012      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d206      	bcs.n	8007816 <prvInsertTimerInActiveList+0x62>
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d302      	bcc.n	8007816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007810:	2301      	movs	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e007      	b.n	8007826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007816:	4b07      	ldr	r3, [pc, #28]	; (8007834 <prvInsertTimerInActiveList+0x80>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fd fdaa 	bl	800537a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007826:	697b      	ldr	r3, [r7, #20]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000cbc 	.word	0x20000cbc
 8007834:	20000cb8 	.word	0x20000cb8

08007838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08e      	sub	sp, #56	; 0x38
 800783c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800783e:	e0c6      	b.n	80079ce <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	da17      	bge.n	8007876 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007846:	1d3b      	adds	r3, r7, #4
 8007848:	3304      	adds	r3, #4
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <prvProcessReceivedCommands+0x2e>
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	61fb      	str	r3, [r7, #28]
 8007864:	e7fe      	b.n	8007864 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786c:	6850      	ldr	r0, [r2, #4]
 800786e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007870:	6892      	ldr	r2, [r2, #8]
 8007872:	4611      	mov	r1, r2
 8007874:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f2c0 80a7 	blt.w	80079cc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	3304      	adds	r3, #4
 800788e:	4618      	mov	r0, r3
 8007890:	f7fd fdac 	bl	80053ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007894:	463b      	mov	r3, r7
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff ff6c 	bl	8007774 <prvSampleTimeNow>
 800789c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b09      	cmp	r3, #9
 80078a2:	f200 8094 	bhi.w	80079ce <prvProcessReceivedCommands+0x196>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <prvProcessReceivedCommands+0x74>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078d5 	.word	0x080078d5
 80078b4:	080078d5 	.word	0x080078d5
 80078b8:	08007947 	.word	0x08007947
 80078bc:	0800795b 	.word	0x0800795b
 80078c0:	080079a3 	.word	0x080079a3
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	080078d5 	.word	0x080078d5
 80078cc:	08007947 	.word	0x08007947
 80078d0:	0800795b 	.word	0x0800795b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	18d1      	adds	r1, r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f4:	f7ff ff5e 	bl	80077b4 <prvInsertTimerInActiveList>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d067      	beq.n	80079ce <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007904:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d05c      	beq.n	80079ce <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	441a      	add	r2, r3
 800791c:	2300      	movs	r3, #0
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2300      	movs	r3, #0
 8007922:	2100      	movs	r1, #0
 8007924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007926:	f7ff fe09 	bl	800753c <xTimerGenericCommand>
 800792a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d14d      	bne.n	80079ce <prvProcessReceivedCommands+0x196>
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	e7fe      	b.n	8007944 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800794c:	f023 0301 	bic.w	r3, r3, #1
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007958:	e039      	b.n	80079ce <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	b2da      	uxtb	r2, r3
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <prvProcessReceivedCommands+0x156>
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	e7fe      	b.n	800798c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	18d1      	adds	r1, r2, r3
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800799c:	f7ff ff0a 	bl	80077b4 <prvInsertTimerInActiveList>
					break;
 80079a0:	e015      	b.n	80079ce <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80079b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079b2:	f000 fbc7 	bl	8008144 <vPortFree>
 80079b6:	e00a      	b.n	80079ce <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079ca:	e000      	b.n	80079ce <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ce:	4b07      	ldr	r3, [pc, #28]	; (80079ec <prvProcessReceivedCommands+0x1b4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	1d39      	adds	r1, r7, #4
 80079d4:	2200      	movs	r2, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe f93a 	bl	8005c50 <xQueueReceive>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f47f af2e 	bne.w	8007840 <prvProcessReceivedCommands+0x8>
	}
}
 80079e4:	bf00      	nop
 80079e6:	3730      	adds	r7, #48	; 0x30
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000cc0 	.word	0x20000cc0

080079f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079f6:	e047      	b.n	8007a88 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079f8:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <prvSwitchTimerLists+0xc0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a02:	4b2b      	ldr	r3, [pc, #172]	; (8007ab0 <prvSwitchTimerLists+0xc0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fd fceb 	bl	80053ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d02d      	beq.n	8007a88 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d90e      	bls.n	8007a5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a4a:	4b19      	ldr	r3, [pc, #100]	; (8007ab0 <prvSwitchTimerLists+0xc0>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	4610      	mov	r0, r2
 8007a56:	f7fd fc90 	bl	800537a <vListInsert>
 8007a5a:	e015      	b.n	8007a88 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	2300      	movs	r3, #0
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	2100      	movs	r1, #0
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fd68 	bl	800753c <xTimerGenericCommand>
 8007a6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d109      	bne.n	8007a88 <prvSwitchTimerLists+0x98>
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	603b      	str	r3, [r7, #0]
 8007a86:	e7fe      	b.n	8007a86 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a88:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <prvSwitchTimerLists+0xc0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1b2      	bne.n	80079f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a92:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <prvSwitchTimerLists+0xc0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a98:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <prvSwitchTimerLists+0xc4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a04      	ldr	r2, [pc, #16]	; (8007ab0 <prvSwitchTimerLists+0xc0>)
 8007a9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007aa0:	4a04      	ldr	r2, [pc, #16]	; (8007ab4 <prvSwitchTimerLists+0xc4>)
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6013      	str	r3, [r2, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000cb8 	.word	0x20000cb8
 8007ab4:	20000cbc 	.word	0x20000cbc

08007ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007abe:	f000 f965 	bl	8007d8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <prvCheckForValidListAndQueue+0x60>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d120      	bne.n	8007b0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007aca:	4814      	ldr	r0, [pc, #80]	; (8007b1c <prvCheckForValidListAndQueue+0x64>)
 8007acc:	f7fd fc04 	bl	80052d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ad0:	4813      	ldr	r0, [pc, #76]	; (8007b20 <prvCheckForValidListAndQueue+0x68>)
 8007ad2:	f7fd fc01 	bl	80052d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ad6:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <prvCheckForValidListAndQueue+0x6c>)
 8007ad8:	4a10      	ldr	r2, [pc, #64]	; (8007b1c <prvCheckForValidListAndQueue+0x64>)
 8007ada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007adc:	4b12      	ldr	r3, [pc, #72]	; (8007b28 <prvCheckForValidListAndQueue+0x70>)
 8007ade:	4a10      	ldr	r2, [pc, #64]	; (8007b20 <prvCheckForValidListAndQueue+0x68>)
 8007ae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <prvCheckForValidListAndQueue+0x74>)
 8007ae8:	4a11      	ldr	r2, [pc, #68]	; (8007b30 <prvCheckForValidListAndQueue+0x78>)
 8007aea:	2110      	movs	r1, #16
 8007aec:	200a      	movs	r0, #10
 8007aee:	f7fd fd0f 	bl	8005510 <xQueueGenericCreateStatic>
 8007af2:	4602      	mov	r2, r0
 8007af4:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <prvCheckForValidListAndQueue+0x60>)
 8007af6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007af8:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <prvCheckForValidListAndQueue+0x60>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <prvCheckForValidListAndQueue+0x60>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	490b      	ldr	r1, [pc, #44]	; (8007b34 <prvCheckForValidListAndQueue+0x7c>)
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fc4e 	bl	80063a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b0c:	f000 f96c 	bl	8007de8 <vPortExitCritical>
}
 8007b10:	bf00      	nop
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000cc0 	.word	0x20000cc0
 8007b1c:	20000c90 	.word	0x20000c90
 8007b20:	20000ca4 	.word	0x20000ca4
 8007b24:	20000cb8 	.word	0x20000cb8
 8007b28:	20000cbc 	.word	0x20000cbc
 8007b2c:	20000d6c 	.word	0x20000d6c
 8007b30:	20000ccc 	.word	0x20000ccc
 8007b34:	08008d04 	.word	0x08008d04

08007b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3b04      	subs	r3, #4
 8007b48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3b04      	subs	r3, #4
 8007b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f023 0201 	bic.w	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3b04      	subs	r3, #4
 8007b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b68:	4a0c      	ldr	r2, [pc, #48]	; (8007b9c <pxPortInitialiseStack+0x64>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3b14      	subs	r3, #20
 8007b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3b04      	subs	r3, #4
 8007b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f06f 0202 	mvn.w	r2, #2
 8007b86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3b20      	subs	r3, #32
 8007b8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	08007ba1 	.word	0x08007ba1

08007ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007baa:	4b11      	ldr	r3, [pc, #68]	; (8007bf0 <prvTaskExitError+0x50>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb2:	d009      	beq.n	8007bc8 <prvTaskExitError+0x28>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e7fe      	b.n	8007bc6 <prvTaskExitError+0x26>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bda:	bf00      	nop
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0fc      	beq.n	8007bdc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	2000000c 	.word	0x2000000c
	...

08007c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <pxCurrentTCBConst2>)
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f380 8809 	msr	PSP, r0
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8811 	msr	BASEPRI, r0
 8007c1a:	4770      	bx	lr
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst2>:
 8007c20:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c28:	4808      	ldr	r0, [pc, #32]	; (8007c4c <prvPortStartFirstTask+0x24>)
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	f380 8808 	msr	MSP, r0
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8814 	msr	CONTROL, r0
 8007c3a:	b662      	cpsie	i
 8007c3c:	b661      	cpsie	f
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	df00      	svc	0
 8007c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c4a:	bf00      	nop
 8007c4c:	e000ed08 	.word	0xe000ed08

08007c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c56:	4b44      	ldr	r3, [pc, #272]	; (8007d68 <xPortStartScheduler+0x118>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a44      	ldr	r2, [pc, #272]	; (8007d6c <xPortStartScheduler+0x11c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d109      	bne.n	8007c74 <xPortStartScheduler+0x24>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	e7fe      	b.n	8007c72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c74:	4b3c      	ldr	r3, [pc, #240]	; (8007d68 <xPortStartScheduler+0x118>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a3d      	ldr	r2, [pc, #244]	; (8007d70 <xPortStartScheduler+0x120>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d109      	bne.n	8007c92 <xPortStartScheduler+0x42>
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e7fe      	b.n	8007c90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c92:	4b38      	ldr	r3, [pc, #224]	; (8007d74 <xPortStartScheduler+0x124>)
 8007c94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	22ff      	movs	r2, #255	; 0xff
 8007ca2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	4b30      	ldr	r3, [pc, #192]	; (8007d78 <xPortStartScheduler+0x128>)
 8007cb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cba:	4b30      	ldr	r3, [pc, #192]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc0:	e009      	b.n	8007cd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007cc2:	4b2e      	ldr	r3, [pc, #184]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4a2c      	ldr	r2, [pc, #176]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007cca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d0ef      	beq.n	8007cc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ce2:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f1c3 0307 	rsb	r3, r3, #7
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d009      	beq.n	8007d02 <xPortStartScheduler+0xb2>
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60bb      	str	r3, [r7, #8]
 8007d00:	e7fe      	b.n	8007d00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d02:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d0c:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d14:	4a19      	ldr	r2, [pc, #100]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d20:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d2c:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a13      	ldr	r2, [pc, #76]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d38:	f000 f8d6 	bl	8007ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d42:	f000 f8f5 	bl	8007f30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d46:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a0f      	ldr	r2, [pc, #60]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d52:	f7ff ff69 	bl	8007c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d56:	f7fe ff59 	bl	8006c0c <vTaskSwitchContext>
	prvTaskExitError();
 8007d5a:	f7ff ff21 	bl	8007ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	e000ed00 	.word	0xe000ed00
 8007d6c:	410fc271 	.word	0x410fc271
 8007d70:	410fc270 	.word	0x410fc270
 8007d74:	e000e400 	.word	0xe000e400
 8007d78:	20000dbc 	.word	0x20000dbc
 8007d7c:	20000dc0 	.word	0x20000dc0
 8007d80:	e000ed20 	.word	0xe000ed20
 8007d84:	2000000c 	.word	0x2000000c
 8007d88:	e000ef34 	.word	0xe000ef34

08007d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007da4:	4b0e      	ldr	r3, [pc, #56]	; (8007de0 <vPortEnterCritical+0x54>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	4a0d      	ldr	r2, [pc, #52]	; (8007de0 <vPortEnterCritical+0x54>)
 8007dac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <vPortEnterCritical+0x54>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d10e      	bne.n	8007dd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <vPortEnterCritical+0x58>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <vPortEnterCritical+0x48>
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	e7fe      	b.n	8007dd2 <vPortEnterCritical+0x46>
	}
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	2000000c 	.word	0x2000000c
 8007de4:	e000ed04 	.word	0xe000ed04

08007de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <vPortExitCritical+0x4c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <vPortExitCritical+0x22>
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	607b      	str	r3, [r7, #4]
 8007e08:	e7fe      	b.n	8007e08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <vPortExitCritical+0x4c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <vPortExitCritical+0x4c>)
 8007e12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <vPortExitCritical+0x4c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <vPortExitCritical+0x3e>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	2000000c 	.word	0x2000000c
	...

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f7fe fecc 	bl	8006c0c <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc09      	pop	{r0, r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec0:	f7fe fdec 	bl	8006a9c <xTaskIncrementTick>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <SysTick_Handler+0x3c>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	e000ed04 	.word	0xe000ed04

08007ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <vPortSetupTimerInterrupt+0x34>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <vPortSetupTimerInterrupt+0x38>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <vPortSetupTimerInterrupt+0x3c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a0a      	ldr	r2, [pc, #40]	; (8007f28 <vPortSetupTimerInterrupt+0x40>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	099b      	lsrs	r3, r3, #6
 8007f04:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <vPortSetupTimerInterrupt+0x44>)
 8007f06:	3b01      	subs	r3, #1
 8007f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0a:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <vPortSetupTimerInterrupt+0x34>)
 8007f0c:	2207      	movs	r2, #7
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	bf00      	nop
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	e000e010 	.word	0xe000e010
 8007f20:	e000e018 	.word	0xe000e018
 8007f24:	20000000 	.word	0x20000000
 8007f28:	10624dd3 	.word	0x10624dd3
 8007f2c:	e000e014 	.word	0xe000e014

08007f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f40 <vPortEnableVFP+0x10>
 8007f34:	6801      	ldr	r1, [r0, #0]
 8007f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f3a:	6001      	str	r1, [r0, #0]
 8007f3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f3e:	bf00      	nop
 8007f40:	e000ed88 	.word	0xe000ed88

08007f44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f4a:	f3ef 8305 	mrs	r3, IPSR
 8007f4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b0f      	cmp	r3, #15
 8007f54:	d913      	bls.n	8007f7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <vPortValidateInterruptPriority+0x6c>)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f60:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <vPortValidateInterruptPriority+0x70>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	7afa      	ldrb	r2, [r7, #11]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d209      	bcs.n	8007f7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	607b      	str	r3, [r7, #4]
 8007f7c:	e7fe      	b.n	8007f7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f7e:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <vPortValidateInterruptPriority+0x74>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <vPortValidateInterruptPriority+0x78>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d909      	bls.n	8007fa2 <vPortValidateInterruptPriority+0x5e>
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	e7fe      	b.n	8007fa0 <vPortValidateInterruptPriority+0x5c>
	}
 8007fa2:	bf00      	nop
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	e000e3f0 	.word	0xe000e3f0
 8007fb4:	20000dbc 	.word	0x20000dbc
 8007fb8:	e000ed0c 	.word	0xe000ed0c
 8007fbc:	20000dc0 	.word	0x20000dc0

08007fc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	; 0x28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fcc:	f7fe fcac 	bl	8006928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fd0:	4b57      	ldr	r3, [pc, #348]	; (8008130 <pvPortMalloc+0x170>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fd8:	f000 f90c 	bl	80081f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fdc:	4b55      	ldr	r3, [pc, #340]	; (8008134 <pvPortMalloc+0x174>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f040 808c 	bne.w	8008102 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01c      	beq.n	800802a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d013      	beq.n	800802a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f023 0307 	bic.w	r3, r3, #7
 8008008:	3308      	adds	r3, #8
 800800a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	2b00      	cmp	r3, #0
 8008014:	d009      	beq.n	800802a <pvPortMalloc+0x6a>
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e7fe      	b.n	8008028 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d068      	beq.n	8008102 <pvPortMalloc+0x142>
 8008030:	4b41      	ldr	r3, [pc, #260]	; (8008138 <pvPortMalloc+0x178>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d863      	bhi.n	8008102 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800803a:	4b40      	ldr	r3, [pc, #256]	; (800813c <pvPortMalloc+0x17c>)
 800803c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800803e:	4b3f      	ldr	r3, [pc, #252]	; (800813c <pvPortMalloc+0x17c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008044:	e004      	b.n	8008050 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	429a      	cmp	r2, r3
 8008058:	d903      	bls.n	8008062 <pvPortMalloc+0xa2>
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f1      	bne.n	8008046 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008062:	4b33      	ldr	r3, [pc, #204]	; (8008130 <pvPortMalloc+0x170>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008068:	429a      	cmp	r2, r3
 800806a:	d04a      	beq.n	8008102 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2208      	movs	r2, #8
 8008072:	4413      	add	r3, r2
 8008074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	1ad2      	subs	r2, r2, r3
 8008086:	2308      	movs	r3, #8
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	429a      	cmp	r2, r3
 800808c:	d91e      	bls.n	80080cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800808e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4413      	add	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <pvPortMalloc+0xf4>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	e7fe      	b.n	80080b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080c6:	69b8      	ldr	r0, [r7, #24]
 80080c8:	f000 f8f6 	bl	80082b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080cc:	4b1a      	ldr	r3, [pc, #104]	; (8008138 <pvPortMalloc+0x178>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	4a18      	ldr	r2, [pc, #96]	; (8008138 <pvPortMalloc+0x178>)
 80080d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080da:	4b17      	ldr	r3, [pc, #92]	; (8008138 <pvPortMalloc+0x178>)
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b18      	ldr	r3, [pc, #96]	; (8008140 <pvPortMalloc+0x180>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d203      	bcs.n	80080ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <pvPortMalloc+0x178>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a15      	ldr	r2, [pc, #84]	; (8008140 <pvPortMalloc+0x180>)
 80080ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	4b10      	ldr	r3, [pc, #64]	; (8008134 <pvPortMalloc+0x174>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008102:	f7fe fc1f 	bl	8006944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <pvPortMalloc+0x164>
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e7fe      	b.n	8008122 <pvPortMalloc+0x162>
	return pvReturn;
 8008124:	69fb      	ldr	r3, [r7, #28]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3728      	adds	r7, #40	; 0x28
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200030f4 	.word	0x200030f4
 8008134:	20003100 	.word	0x20003100
 8008138:	200030f8 	.word	0x200030f8
 800813c:	200030ec 	.word	0x200030ec
 8008140:	200030fc 	.word	0x200030fc

08008144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d046      	beq.n	80081e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008156:	2308      	movs	r3, #8
 8008158:	425b      	negs	r3, r3
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4413      	add	r3, r2
 800815e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4b20      	ldr	r3, [pc, #128]	; (80081ec <vPortFree+0xa8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4013      	ands	r3, r2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <vPortFree+0x42>
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e7fe      	b.n	8008184 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <vPortFree+0x5e>
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60bb      	str	r3, [r7, #8]
 80081a0:	e7fe      	b.n	80081a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	4b11      	ldr	r3, [pc, #68]	; (80081ec <vPortFree+0xa8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d019      	beq.n	80081e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d115      	bne.n	80081e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <vPortFree+0xa8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	43db      	mvns	r3, r3
 80081c2:	401a      	ands	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081c8:	f7fe fbae 	bl	8006928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <vPortFree+0xac>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <vPortFree+0xac>)
 80081d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f000 f86c 	bl	80082b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081e0:	f7fe fbb0 	bl	8006944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081e4:	bf00      	nop
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20003100 	.word	0x20003100
 80081f0:	200030f8 	.word	0x200030f8

080081f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081fa:	f242 3328 	movw	r3, #9000	; 0x2328
 80081fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008200:	4b27      	ldr	r3, [pc, #156]	; (80082a0 <prvHeapInit+0xac>)
 8008202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00c      	beq.n	8008228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3307      	adds	r3, #7
 8008212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0307 	bic.w	r3, r3, #7
 800821a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <prvHeapInit+0xac>)
 8008224:	4413      	add	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800822c:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <prvHeapInit+0xb0>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008232:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <prvHeapInit+0xb0>)
 8008234:	2200      	movs	r2, #0
 8008236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4413      	add	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008240:	2208      	movs	r2, #8
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0307 	bic.w	r3, r3, #7
 800824e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4a15      	ldr	r2, [pc, #84]	; (80082a8 <prvHeapInit+0xb4>)
 8008254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <prvHeapInit+0xb4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800825e:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <prvHeapInit+0xb4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvHeapInit+0xb4>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <prvHeapInit+0xb8>)
 8008282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <prvHeapInit+0xbc>)
 800828a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800828c:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <prvHeapInit+0xc0>)
 800828e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20000dc4 	.word	0x20000dc4
 80082a4:	200030ec 	.word	0x200030ec
 80082a8:	200030f4 	.word	0x200030f4
 80082ac:	200030fc 	.word	0x200030fc
 80082b0:	200030f8 	.word	0x200030f8
 80082b4:	20003100 	.word	0x20003100

080082b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082c0:	4b28      	ldr	r3, [pc, #160]	; (8008364 <prvInsertBlockIntoFreeList+0xac>)
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e002      	b.n	80082cc <prvInsertBlockIntoFreeList+0x14>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d8f7      	bhi.n	80082c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4413      	add	r3, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d108      	bne.n	80082fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	441a      	add	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d118      	bne.n	8008340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b15      	ldr	r3, [pc, #84]	; (8008368 <prvInsertBlockIntoFreeList+0xb0>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d00d      	beq.n	8008336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	441a      	add	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e008      	b.n	8008348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <prvInsertBlockIntoFreeList+0xb0>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e003      	b.n	8008348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d002      	beq.n	8008356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	200030ec 	.word	0x200030ec
 8008368:	200030f4 	.word	0x200030f4

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000010 	.word	0x20000010

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4e0d      	ldr	r6, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1ba4      	subs	r4, r4, r6
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2500      	movs	r5, #0
 8008384:	42a5      	cmp	r5, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4e0b      	ldr	r6, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f000 fc38 	bl	8008c00 <_init>
 8008390:	1ba4      	subs	r4, r4, r6
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2500      	movs	r5, #0
 8008396:	42a5      	cmp	r5, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083a0:	4798      	blx	r3
 80083a2:	3501      	adds	r5, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083aa:	4798      	blx	r3
 80083ac:	3501      	adds	r5, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	08008e40 	.word	0x08008e40
 80083b4:	08008e40 	.word	0x08008e40
 80083b8:	08008e40 	.word	0x08008e40
 80083bc:	08008e44 	.word	0x08008e44

080083c0 <malloc>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <malloc+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f000 b86d 	b.w	80084a4 <_malloc_r>
 80083ca:	bf00      	nop
 80083cc:	20000010 	.word	0x20000010

080083d0 <free>:
 80083d0:	4b02      	ldr	r3, [pc, #8]	; (80083dc <free+0xc>)
 80083d2:	4601      	mov	r1, r0
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f000 b817 	b.w	8008408 <_free_r>
 80083da:	bf00      	nop
 80083dc:	20000010 	.word	0x20000010

080083e0 <memcpy>:
 80083e0:	b510      	push	{r4, lr}
 80083e2:	1e43      	subs	r3, r0, #1
 80083e4:	440a      	add	r2, r1
 80083e6:	4291      	cmp	r1, r2
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	bd10      	pop	{r4, pc}
 80083ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f4:	e7f7      	b.n	80083e6 <memcpy+0x6>

080083f6 <memset>:
 80083f6:	4402      	add	r2, r0
 80083f8:	4603      	mov	r3, r0
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d100      	bne.n	8008400 <memset+0xa>
 80083fe:	4770      	bx	lr
 8008400:	f803 1b01 	strb.w	r1, [r3], #1
 8008404:	e7f9      	b.n	80083fa <memset+0x4>
	...

08008408 <_free_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4605      	mov	r5, r0
 800840c:	2900      	cmp	r1, #0
 800840e:	d045      	beq.n	800849c <_free_r+0x94>
 8008410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008414:	1f0c      	subs	r4, r1, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfb8      	it	lt
 800841a:	18e4      	addlt	r4, r4, r3
 800841c:	f000 f8cc 	bl	80085b8 <__malloc_lock>
 8008420:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <_free_r+0x98>)
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	4610      	mov	r0, r2
 8008426:	b933      	cbnz	r3, 8008436 <_free_r+0x2e>
 8008428:	6063      	str	r3, [r4, #4]
 800842a:	6014      	str	r4, [r2, #0]
 800842c:	4628      	mov	r0, r5
 800842e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008432:	f000 b8c2 	b.w	80085ba <__malloc_unlock>
 8008436:	42a3      	cmp	r3, r4
 8008438:	d90c      	bls.n	8008454 <_free_r+0x4c>
 800843a:	6821      	ldr	r1, [r4, #0]
 800843c:	1862      	adds	r2, r4, r1
 800843e:	4293      	cmp	r3, r2
 8008440:	bf04      	itt	eq
 8008442:	681a      	ldreq	r2, [r3, #0]
 8008444:	685b      	ldreq	r3, [r3, #4]
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	bf04      	itt	eq
 800844a:	1852      	addeq	r2, r2, r1
 800844c:	6022      	streq	r2, [r4, #0]
 800844e:	6004      	str	r4, [r0, #0]
 8008450:	e7ec      	b.n	800842c <_free_r+0x24>
 8008452:	4613      	mov	r3, r2
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	b10a      	cbz	r2, 800845c <_free_r+0x54>
 8008458:	42a2      	cmp	r2, r4
 800845a:	d9fa      	bls.n	8008452 <_free_r+0x4a>
 800845c:	6819      	ldr	r1, [r3, #0]
 800845e:	1858      	adds	r0, r3, r1
 8008460:	42a0      	cmp	r0, r4
 8008462:	d10b      	bne.n	800847c <_free_r+0x74>
 8008464:	6820      	ldr	r0, [r4, #0]
 8008466:	4401      	add	r1, r0
 8008468:	1858      	adds	r0, r3, r1
 800846a:	4282      	cmp	r2, r0
 800846c:	6019      	str	r1, [r3, #0]
 800846e:	d1dd      	bne.n	800842c <_free_r+0x24>
 8008470:	6810      	ldr	r0, [r2, #0]
 8008472:	6852      	ldr	r2, [r2, #4]
 8008474:	605a      	str	r2, [r3, #4]
 8008476:	4401      	add	r1, r0
 8008478:	6019      	str	r1, [r3, #0]
 800847a:	e7d7      	b.n	800842c <_free_r+0x24>
 800847c:	d902      	bls.n	8008484 <_free_r+0x7c>
 800847e:	230c      	movs	r3, #12
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	e7d3      	b.n	800842c <_free_r+0x24>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	1821      	adds	r1, r4, r0
 8008488:	428a      	cmp	r2, r1
 800848a:	bf04      	itt	eq
 800848c:	6811      	ldreq	r1, [r2, #0]
 800848e:	6852      	ldreq	r2, [r2, #4]
 8008490:	6062      	str	r2, [r4, #4]
 8008492:	bf04      	itt	eq
 8008494:	1809      	addeq	r1, r1, r0
 8008496:	6021      	streq	r1, [r4, #0]
 8008498:	605c      	str	r4, [r3, #4]
 800849a:	e7c7      	b.n	800842c <_free_r+0x24>
 800849c:	bd38      	pop	{r3, r4, r5, pc}
 800849e:	bf00      	nop
 80084a0:	20003104 	.word	0x20003104

080084a4 <_malloc_r>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	1ccd      	adds	r5, r1, #3
 80084a8:	f025 0503 	bic.w	r5, r5, #3
 80084ac:	3508      	adds	r5, #8
 80084ae:	2d0c      	cmp	r5, #12
 80084b0:	bf38      	it	cc
 80084b2:	250c      	movcc	r5, #12
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	4606      	mov	r6, r0
 80084b8:	db01      	blt.n	80084be <_malloc_r+0x1a>
 80084ba:	42a9      	cmp	r1, r5
 80084bc:	d903      	bls.n	80084c6 <_malloc_r+0x22>
 80084be:	230c      	movs	r3, #12
 80084c0:	6033      	str	r3, [r6, #0]
 80084c2:	2000      	movs	r0, #0
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
 80084c6:	f000 f877 	bl	80085b8 <__malloc_lock>
 80084ca:	4a21      	ldr	r2, [pc, #132]	; (8008550 <_malloc_r+0xac>)
 80084cc:	6814      	ldr	r4, [r2, #0]
 80084ce:	4621      	mov	r1, r4
 80084d0:	b991      	cbnz	r1, 80084f8 <_malloc_r+0x54>
 80084d2:	4c20      	ldr	r4, [pc, #128]	; (8008554 <_malloc_r+0xb0>)
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	b91b      	cbnz	r3, 80084e0 <_malloc_r+0x3c>
 80084d8:	4630      	mov	r0, r6
 80084da:	f000 f83d 	bl	8008558 <_sbrk_r>
 80084de:	6020      	str	r0, [r4, #0]
 80084e0:	4629      	mov	r1, r5
 80084e2:	4630      	mov	r0, r6
 80084e4:	f000 f838 	bl	8008558 <_sbrk_r>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d124      	bne.n	8008536 <_malloc_r+0x92>
 80084ec:	230c      	movs	r3, #12
 80084ee:	6033      	str	r3, [r6, #0]
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 f862 	bl	80085ba <__malloc_unlock>
 80084f6:	e7e4      	b.n	80084c2 <_malloc_r+0x1e>
 80084f8:	680b      	ldr	r3, [r1, #0]
 80084fa:	1b5b      	subs	r3, r3, r5
 80084fc:	d418      	bmi.n	8008530 <_malloc_r+0x8c>
 80084fe:	2b0b      	cmp	r3, #11
 8008500:	d90f      	bls.n	8008522 <_malloc_r+0x7e>
 8008502:	600b      	str	r3, [r1, #0]
 8008504:	50cd      	str	r5, [r1, r3]
 8008506:	18cc      	adds	r4, r1, r3
 8008508:	4630      	mov	r0, r6
 800850a:	f000 f856 	bl	80085ba <__malloc_unlock>
 800850e:	f104 000b 	add.w	r0, r4, #11
 8008512:	1d23      	adds	r3, r4, #4
 8008514:	f020 0007 	bic.w	r0, r0, #7
 8008518:	1ac3      	subs	r3, r0, r3
 800851a:	d0d3      	beq.n	80084c4 <_malloc_r+0x20>
 800851c:	425a      	negs	r2, r3
 800851e:	50e2      	str	r2, [r4, r3]
 8008520:	e7d0      	b.n	80084c4 <_malloc_r+0x20>
 8008522:	428c      	cmp	r4, r1
 8008524:	684b      	ldr	r3, [r1, #4]
 8008526:	bf16      	itet	ne
 8008528:	6063      	strne	r3, [r4, #4]
 800852a:	6013      	streq	r3, [r2, #0]
 800852c:	460c      	movne	r4, r1
 800852e:	e7eb      	b.n	8008508 <_malloc_r+0x64>
 8008530:	460c      	mov	r4, r1
 8008532:	6849      	ldr	r1, [r1, #4]
 8008534:	e7cc      	b.n	80084d0 <_malloc_r+0x2c>
 8008536:	1cc4      	adds	r4, r0, #3
 8008538:	f024 0403 	bic.w	r4, r4, #3
 800853c:	42a0      	cmp	r0, r4
 800853e:	d005      	beq.n	800854c <_malloc_r+0xa8>
 8008540:	1a21      	subs	r1, r4, r0
 8008542:	4630      	mov	r0, r6
 8008544:	f000 f808 	bl	8008558 <_sbrk_r>
 8008548:	3001      	adds	r0, #1
 800854a:	d0cf      	beq.n	80084ec <_malloc_r+0x48>
 800854c:	6025      	str	r5, [r4, #0]
 800854e:	e7db      	b.n	8008508 <_malloc_r+0x64>
 8008550:	20003104 	.word	0x20003104
 8008554:	20003108 	.word	0x20003108

08008558 <_sbrk_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4c06      	ldr	r4, [pc, #24]	; (8008574 <_sbrk_r+0x1c>)
 800855c:	2300      	movs	r3, #0
 800855e:	4605      	mov	r5, r0
 8008560:	4608      	mov	r0, r1
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	f7f8 ffea 	bl	800153c <_sbrk>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d102      	bne.n	8008572 <_sbrk_r+0x1a>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	b103      	cbz	r3, 8008572 <_sbrk_r+0x1a>
 8008570:	602b      	str	r3, [r5, #0]
 8008572:	bd38      	pop	{r3, r4, r5, pc}
 8008574:	200032cc 	.word	0x200032cc

08008578 <siprintf>:
 8008578:	b40e      	push	{r1, r2, r3}
 800857a:	b500      	push	{lr}
 800857c:	b09c      	sub	sp, #112	; 0x70
 800857e:	ab1d      	add	r3, sp, #116	; 0x74
 8008580:	9002      	str	r0, [sp, #8]
 8008582:	9006      	str	r0, [sp, #24]
 8008584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008588:	4809      	ldr	r0, [pc, #36]	; (80085b0 <siprintf+0x38>)
 800858a:	9107      	str	r1, [sp, #28]
 800858c:	9104      	str	r1, [sp, #16]
 800858e:	4909      	ldr	r1, [pc, #36]	; (80085b4 <siprintf+0x3c>)
 8008590:	f853 2b04 	ldr.w	r2, [r3], #4
 8008594:	9105      	str	r1, [sp, #20]
 8008596:	6800      	ldr	r0, [r0, #0]
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	a902      	add	r1, sp, #8
 800859c:	f000 f868 	bl	8008670 <_svfiprintf_r>
 80085a0:	9b02      	ldr	r3, [sp, #8]
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	b01c      	add	sp, #112	; 0x70
 80085a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085ac:	b003      	add	sp, #12
 80085ae:	4770      	bx	lr
 80085b0:	20000010 	.word	0x20000010
 80085b4:	ffff0208 	.word	0xffff0208

080085b8 <__malloc_lock>:
 80085b8:	4770      	bx	lr

080085ba <__malloc_unlock>:
 80085ba:	4770      	bx	lr

080085bc <__ssputs_r>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	688e      	ldr	r6, [r1, #8]
 80085c2:	429e      	cmp	r6, r3
 80085c4:	4682      	mov	sl, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4690      	mov	r8, r2
 80085ca:	4699      	mov	r9, r3
 80085cc:	d837      	bhi.n	800863e <__ssputs_r+0x82>
 80085ce:	898a      	ldrh	r2, [r1, #12]
 80085d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085d4:	d031      	beq.n	800863a <__ssputs_r+0x7e>
 80085d6:	6825      	ldr	r5, [r4, #0]
 80085d8:	6909      	ldr	r1, [r1, #16]
 80085da:	1a6f      	subs	r7, r5, r1
 80085dc:	6965      	ldr	r5, [r4, #20]
 80085de:	2302      	movs	r3, #2
 80085e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80085e8:	f109 0301 	add.w	r3, r9, #1
 80085ec:	443b      	add	r3, r7
 80085ee:	429d      	cmp	r5, r3
 80085f0:	bf38      	it	cc
 80085f2:	461d      	movcc	r5, r3
 80085f4:	0553      	lsls	r3, r2, #21
 80085f6:	d530      	bpl.n	800865a <__ssputs_r+0x9e>
 80085f8:	4629      	mov	r1, r5
 80085fa:	f7ff ff53 	bl	80084a4 <_malloc_r>
 80085fe:	4606      	mov	r6, r0
 8008600:	b950      	cbnz	r0, 8008618 <__ssputs_r+0x5c>
 8008602:	230c      	movs	r3, #12
 8008604:	f8ca 3000 	str.w	r3, [sl]
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008618:	463a      	mov	r2, r7
 800861a:	6921      	ldr	r1, [r4, #16]
 800861c:	f7ff fee0 	bl	80083e0 <memcpy>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	6126      	str	r6, [r4, #16]
 800862e:	6165      	str	r5, [r4, #20]
 8008630:	443e      	add	r6, r7
 8008632:	1bed      	subs	r5, r5, r7
 8008634:	6026      	str	r6, [r4, #0]
 8008636:	60a5      	str	r5, [r4, #8]
 8008638:	464e      	mov	r6, r9
 800863a:	454e      	cmp	r6, r9
 800863c:	d900      	bls.n	8008640 <__ssputs_r+0x84>
 800863e:	464e      	mov	r6, r9
 8008640:	4632      	mov	r2, r6
 8008642:	4641      	mov	r1, r8
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	f000 fa93 	bl	8008b70 <memmove>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	1b9b      	subs	r3, r3, r6
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	441e      	add	r6, r3
 8008654:	6026      	str	r6, [r4, #0]
 8008656:	2000      	movs	r0, #0
 8008658:	e7dc      	b.n	8008614 <__ssputs_r+0x58>
 800865a:	462a      	mov	r2, r5
 800865c:	f000 faa1 	bl	8008ba2 <_realloc_r>
 8008660:	4606      	mov	r6, r0
 8008662:	2800      	cmp	r0, #0
 8008664:	d1e2      	bne.n	800862c <__ssputs_r+0x70>
 8008666:	6921      	ldr	r1, [r4, #16]
 8008668:	4650      	mov	r0, sl
 800866a:	f7ff fecd 	bl	8008408 <_free_r>
 800866e:	e7c8      	b.n	8008602 <__ssputs_r+0x46>

08008670 <_svfiprintf_r>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	461d      	mov	r5, r3
 8008676:	898b      	ldrh	r3, [r1, #12]
 8008678:	061f      	lsls	r7, r3, #24
 800867a:	b09d      	sub	sp, #116	; 0x74
 800867c:	4680      	mov	r8, r0
 800867e:	460c      	mov	r4, r1
 8008680:	4616      	mov	r6, r2
 8008682:	d50f      	bpl.n	80086a4 <_svfiprintf_r+0x34>
 8008684:	690b      	ldr	r3, [r1, #16]
 8008686:	b96b      	cbnz	r3, 80086a4 <_svfiprintf_r+0x34>
 8008688:	2140      	movs	r1, #64	; 0x40
 800868a:	f7ff ff0b 	bl	80084a4 <_malloc_r>
 800868e:	6020      	str	r0, [r4, #0]
 8008690:	6120      	str	r0, [r4, #16]
 8008692:	b928      	cbnz	r0, 80086a0 <_svfiprintf_r+0x30>
 8008694:	230c      	movs	r3, #12
 8008696:	f8c8 3000 	str.w	r3, [r8]
 800869a:	f04f 30ff 	mov.w	r0, #4294967295
 800869e:	e0c8      	b.n	8008832 <_svfiprintf_r+0x1c2>
 80086a0:	2340      	movs	r3, #64	; 0x40
 80086a2:	6163      	str	r3, [r4, #20]
 80086a4:	2300      	movs	r3, #0
 80086a6:	9309      	str	r3, [sp, #36]	; 0x24
 80086a8:	2320      	movs	r3, #32
 80086aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086ae:	2330      	movs	r3, #48	; 0x30
 80086b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b4:	9503      	str	r5, [sp, #12]
 80086b6:	f04f 0b01 	mov.w	fp, #1
 80086ba:	4637      	mov	r7, r6
 80086bc:	463d      	mov	r5, r7
 80086be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086c2:	b10b      	cbz	r3, 80086c8 <_svfiprintf_r+0x58>
 80086c4:	2b25      	cmp	r3, #37	; 0x25
 80086c6:	d13e      	bne.n	8008746 <_svfiprintf_r+0xd6>
 80086c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80086cc:	d00b      	beq.n	80086e6 <_svfiprintf_r+0x76>
 80086ce:	4653      	mov	r3, sl
 80086d0:	4632      	mov	r2, r6
 80086d2:	4621      	mov	r1, r4
 80086d4:	4640      	mov	r0, r8
 80086d6:	f7ff ff71 	bl	80085bc <__ssputs_r>
 80086da:	3001      	adds	r0, #1
 80086dc:	f000 80a4 	beq.w	8008828 <_svfiprintf_r+0x1b8>
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	4453      	add	r3, sl
 80086e4:	9309      	str	r3, [sp, #36]	; 0x24
 80086e6:	783b      	ldrb	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 809d 	beq.w	8008828 <_svfiprintf_r+0x1b8>
 80086ee:	2300      	movs	r3, #0
 80086f0:	f04f 32ff 	mov.w	r2, #4294967295
 80086f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	9307      	str	r3, [sp, #28]
 80086fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008700:	931a      	str	r3, [sp, #104]	; 0x68
 8008702:	462f      	mov	r7, r5
 8008704:	2205      	movs	r2, #5
 8008706:	f817 1b01 	ldrb.w	r1, [r7], #1
 800870a:	4850      	ldr	r0, [pc, #320]	; (800884c <_svfiprintf_r+0x1dc>)
 800870c:	f7f7 fd68 	bl	80001e0 <memchr>
 8008710:	9b04      	ldr	r3, [sp, #16]
 8008712:	b9d0      	cbnz	r0, 800874a <_svfiprintf_r+0xda>
 8008714:	06d9      	lsls	r1, r3, #27
 8008716:	bf44      	itt	mi
 8008718:	2220      	movmi	r2, #32
 800871a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800871e:	071a      	lsls	r2, r3, #28
 8008720:	bf44      	itt	mi
 8008722:	222b      	movmi	r2, #43	; 0x2b
 8008724:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008728:	782a      	ldrb	r2, [r5, #0]
 800872a:	2a2a      	cmp	r2, #42	; 0x2a
 800872c:	d015      	beq.n	800875a <_svfiprintf_r+0xea>
 800872e:	9a07      	ldr	r2, [sp, #28]
 8008730:	462f      	mov	r7, r5
 8008732:	2000      	movs	r0, #0
 8008734:	250a      	movs	r5, #10
 8008736:	4639      	mov	r1, r7
 8008738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873c:	3b30      	subs	r3, #48	; 0x30
 800873e:	2b09      	cmp	r3, #9
 8008740:	d94d      	bls.n	80087de <_svfiprintf_r+0x16e>
 8008742:	b1b8      	cbz	r0, 8008774 <_svfiprintf_r+0x104>
 8008744:	e00f      	b.n	8008766 <_svfiprintf_r+0xf6>
 8008746:	462f      	mov	r7, r5
 8008748:	e7b8      	b.n	80086bc <_svfiprintf_r+0x4c>
 800874a:	4a40      	ldr	r2, [pc, #256]	; (800884c <_svfiprintf_r+0x1dc>)
 800874c:	1a80      	subs	r0, r0, r2
 800874e:	fa0b f000 	lsl.w	r0, fp, r0
 8008752:	4318      	orrs	r0, r3
 8008754:	9004      	str	r0, [sp, #16]
 8008756:	463d      	mov	r5, r7
 8008758:	e7d3      	b.n	8008702 <_svfiprintf_r+0x92>
 800875a:	9a03      	ldr	r2, [sp, #12]
 800875c:	1d11      	adds	r1, r2, #4
 800875e:	6812      	ldr	r2, [r2, #0]
 8008760:	9103      	str	r1, [sp, #12]
 8008762:	2a00      	cmp	r2, #0
 8008764:	db01      	blt.n	800876a <_svfiprintf_r+0xfa>
 8008766:	9207      	str	r2, [sp, #28]
 8008768:	e004      	b.n	8008774 <_svfiprintf_r+0x104>
 800876a:	4252      	negs	r2, r2
 800876c:	f043 0302 	orr.w	r3, r3, #2
 8008770:	9207      	str	r2, [sp, #28]
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	783b      	ldrb	r3, [r7, #0]
 8008776:	2b2e      	cmp	r3, #46	; 0x2e
 8008778:	d10c      	bne.n	8008794 <_svfiprintf_r+0x124>
 800877a:	787b      	ldrb	r3, [r7, #1]
 800877c:	2b2a      	cmp	r3, #42	; 0x2a
 800877e:	d133      	bne.n	80087e8 <_svfiprintf_r+0x178>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9203      	str	r2, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfb8      	it	lt
 800878c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008790:	3702      	adds	r7, #2
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	4d2e      	ldr	r5, [pc, #184]	; (8008850 <_svfiprintf_r+0x1e0>)
 8008796:	7839      	ldrb	r1, [r7, #0]
 8008798:	2203      	movs	r2, #3
 800879a:	4628      	mov	r0, r5
 800879c:	f7f7 fd20 	bl	80001e0 <memchr>
 80087a0:	b138      	cbz	r0, 80087b2 <_svfiprintf_r+0x142>
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	1b40      	subs	r0, r0, r5
 80087a6:	fa03 f000 	lsl.w	r0, r3, r0
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	4303      	orrs	r3, r0
 80087ae:	3701      	adds	r7, #1
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	7839      	ldrb	r1, [r7, #0]
 80087b4:	4827      	ldr	r0, [pc, #156]	; (8008854 <_svfiprintf_r+0x1e4>)
 80087b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ba:	2206      	movs	r2, #6
 80087bc:	1c7e      	adds	r6, r7, #1
 80087be:	f7f7 fd0f 	bl	80001e0 <memchr>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d038      	beq.n	8008838 <_svfiprintf_r+0x1c8>
 80087c6:	4b24      	ldr	r3, [pc, #144]	; (8008858 <_svfiprintf_r+0x1e8>)
 80087c8:	bb13      	cbnz	r3, 8008810 <_svfiprintf_r+0x1a0>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	3307      	adds	r3, #7
 80087ce:	f023 0307 	bic.w	r3, r3, #7
 80087d2:	3308      	adds	r3, #8
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	444b      	add	r3, r9
 80087da:	9309      	str	r3, [sp, #36]	; 0x24
 80087dc:	e76d      	b.n	80086ba <_svfiprintf_r+0x4a>
 80087de:	fb05 3202 	mla	r2, r5, r2, r3
 80087e2:	2001      	movs	r0, #1
 80087e4:	460f      	mov	r7, r1
 80087e6:	e7a6      	b.n	8008736 <_svfiprintf_r+0xc6>
 80087e8:	2300      	movs	r3, #0
 80087ea:	3701      	adds	r7, #1
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	4619      	mov	r1, r3
 80087f0:	250a      	movs	r5, #10
 80087f2:	4638      	mov	r0, r7
 80087f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f8:	3a30      	subs	r2, #48	; 0x30
 80087fa:	2a09      	cmp	r2, #9
 80087fc:	d903      	bls.n	8008806 <_svfiprintf_r+0x196>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0c8      	beq.n	8008794 <_svfiprintf_r+0x124>
 8008802:	9105      	str	r1, [sp, #20]
 8008804:	e7c6      	b.n	8008794 <_svfiprintf_r+0x124>
 8008806:	fb05 2101 	mla	r1, r5, r1, r2
 800880a:	2301      	movs	r3, #1
 800880c:	4607      	mov	r7, r0
 800880e:	e7f0      	b.n	80087f2 <_svfiprintf_r+0x182>
 8008810:	ab03      	add	r3, sp, #12
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4622      	mov	r2, r4
 8008816:	4b11      	ldr	r3, [pc, #68]	; (800885c <_svfiprintf_r+0x1ec>)
 8008818:	a904      	add	r1, sp, #16
 800881a:	4640      	mov	r0, r8
 800881c:	f3af 8000 	nop.w
 8008820:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008824:	4681      	mov	r9, r0
 8008826:	d1d6      	bne.n	80087d6 <_svfiprintf_r+0x166>
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	065b      	lsls	r3, r3, #25
 800882c:	f53f af35 	bmi.w	800869a <_svfiprintf_r+0x2a>
 8008830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008832:	b01d      	add	sp, #116	; 0x74
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	ab03      	add	r3, sp, #12
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4622      	mov	r2, r4
 800883e:	4b07      	ldr	r3, [pc, #28]	; (800885c <_svfiprintf_r+0x1ec>)
 8008840:	a904      	add	r1, sp, #16
 8008842:	4640      	mov	r0, r8
 8008844:	f000 f882 	bl	800894c <_printf_i>
 8008848:	e7ea      	b.n	8008820 <_svfiprintf_r+0x1b0>
 800884a:	bf00      	nop
 800884c:	08008e04 	.word	0x08008e04
 8008850:	08008e0a 	.word	0x08008e0a
 8008854:	08008e0e 	.word	0x08008e0e
 8008858:	00000000 	.word	0x00000000
 800885c:	080085bd 	.word	0x080085bd

08008860 <_printf_common>:
 8008860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	4691      	mov	r9, r2
 8008866:	461f      	mov	r7, r3
 8008868:	688a      	ldr	r2, [r1, #8]
 800886a:	690b      	ldr	r3, [r1, #16]
 800886c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008870:	4293      	cmp	r3, r2
 8008872:	bfb8      	it	lt
 8008874:	4613      	movlt	r3, r2
 8008876:	f8c9 3000 	str.w	r3, [r9]
 800887a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800887e:	4606      	mov	r6, r0
 8008880:	460c      	mov	r4, r1
 8008882:	b112      	cbz	r2, 800888a <_printf_common+0x2a>
 8008884:	3301      	adds	r3, #1
 8008886:	f8c9 3000 	str.w	r3, [r9]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	0699      	lsls	r1, r3, #26
 800888e:	bf42      	ittt	mi
 8008890:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008894:	3302      	addmi	r3, #2
 8008896:	f8c9 3000 	strmi.w	r3, [r9]
 800889a:	6825      	ldr	r5, [r4, #0]
 800889c:	f015 0506 	ands.w	r5, r5, #6
 80088a0:	d107      	bne.n	80088b2 <_printf_common+0x52>
 80088a2:	f104 0a19 	add.w	sl, r4, #25
 80088a6:	68e3      	ldr	r3, [r4, #12]
 80088a8:	f8d9 2000 	ldr.w	r2, [r9]
 80088ac:	1a9b      	subs	r3, r3, r2
 80088ae:	42ab      	cmp	r3, r5
 80088b0:	dc28      	bgt.n	8008904 <_printf_common+0xa4>
 80088b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	3300      	adds	r3, #0
 80088ba:	bf18      	it	ne
 80088bc:	2301      	movne	r3, #1
 80088be:	0692      	lsls	r2, r2, #26
 80088c0:	d42d      	bmi.n	800891e <_printf_common+0xbe>
 80088c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088c6:	4639      	mov	r1, r7
 80088c8:	4630      	mov	r0, r6
 80088ca:	47c0      	blx	r8
 80088cc:	3001      	adds	r0, #1
 80088ce:	d020      	beq.n	8008912 <_printf_common+0xb2>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	68e5      	ldr	r5, [r4, #12]
 80088d4:	f8d9 2000 	ldr.w	r2, [r9]
 80088d8:	f003 0306 	and.w	r3, r3, #6
 80088dc:	2b04      	cmp	r3, #4
 80088de:	bf08      	it	eq
 80088e0:	1aad      	subeq	r5, r5, r2
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	6922      	ldr	r2, [r4, #16]
 80088e6:	bf0c      	ite	eq
 80088e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088ec:	2500      	movne	r5, #0
 80088ee:	4293      	cmp	r3, r2
 80088f0:	bfc4      	itt	gt
 80088f2:	1a9b      	subgt	r3, r3, r2
 80088f4:	18ed      	addgt	r5, r5, r3
 80088f6:	f04f 0900 	mov.w	r9, #0
 80088fa:	341a      	adds	r4, #26
 80088fc:	454d      	cmp	r5, r9
 80088fe:	d11a      	bne.n	8008936 <_printf_common+0xd6>
 8008900:	2000      	movs	r0, #0
 8008902:	e008      	b.n	8008916 <_printf_common+0xb6>
 8008904:	2301      	movs	r3, #1
 8008906:	4652      	mov	r2, sl
 8008908:	4639      	mov	r1, r7
 800890a:	4630      	mov	r0, r6
 800890c:	47c0      	blx	r8
 800890e:	3001      	adds	r0, #1
 8008910:	d103      	bne.n	800891a <_printf_common+0xba>
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891a:	3501      	adds	r5, #1
 800891c:	e7c3      	b.n	80088a6 <_printf_common+0x46>
 800891e:	18e1      	adds	r1, r4, r3
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	2030      	movs	r0, #48	; 0x30
 8008924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008928:	4422      	add	r2, r4
 800892a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800892e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008932:	3302      	adds	r3, #2
 8008934:	e7c5      	b.n	80088c2 <_printf_common+0x62>
 8008936:	2301      	movs	r3, #1
 8008938:	4622      	mov	r2, r4
 800893a:	4639      	mov	r1, r7
 800893c:	4630      	mov	r0, r6
 800893e:	47c0      	blx	r8
 8008940:	3001      	adds	r0, #1
 8008942:	d0e6      	beq.n	8008912 <_printf_common+0xb2>
 8008944:	f109 0901 	add.w	r9, r9, #1
 8008948:	e7d8      	b.n	80088fc <_printf_common+0x9c>
	...

0800894c <_printf_i>:
 800894c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008950:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008954:	460c      	mov	r4, r1
 8008956:	7e09      	ldrb	r1, [r1, #24]
 8008958:	b085      	sub	sp, #20
 800895a:	296e      	cmp	r1, #110	; 0x6e
 800895c:	4617      	mov	r7, r2
 800895e:	4606      	mov	r6, r0
 8008960:	4698      	mov	r8, r3
 8008962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008964:	f000 80b3 	beq.w	8008ace <_printf_i+0x182>
 8008968:	d822      	bhi.n	80089b0 <_printf_i+0x64>
 800896a:	2963      	cmp	r1, #99	; 0x63
 800896c:	d036      	beq.n	80089dc <_printf_i+0x90>
 800896e:	d80a      	bhi.n	8008986 <_printf_i+0x3a>
 8008970:	2900      	cmp	r1, #0
 8008972:	f000 80b9 	beq.w	8008ae8 <_printf_i+0x19c>
 8008976:	2958      	cmp	r1, #88	; 0x58
 8008978:	f000 8083 	beq.w	8008a82 <_printf_i+0x136>
 800897c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008980:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008984:	e032      	b.n	80089ec <_printf_i+0xa0>
 8008986:	2964      	cmp	r1, #100	; 0x64
 8008988:	d001      	beq.n	800898e <_printf_i+0x42>
 800898a:	2969      	cmp	r1, #105	; 0x69
 800898c:	d1f6      	bne.n	800897c <_printf_i+0x30>
 800898e:	6820      	ldr	r0, [r4, #0]
 8008990:	6813      	ldr	r3, [r2, #0]
 8008992:	0605      	lsls	r5, r0, #24
 8008994:	f103 0104 	add.w	r1, r3, #4
 8008998:	d52a      	bpl.n	80089f0 <_printf_i+0xa4>
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6011      	str	r1, [r2, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	da03      	bge.n	80089aa <_printf_i+0x5e>
 80089a2:	222d      	movs	r2, #45	; 0x2d
 80089a4:	425b      	negs	r3, r3
 80089a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80089aa:	486f      	ldr	r0, [pc, #444]	; (8008b68 <_printf_i+0x21c>)
 80089ac:	220a      	movs	r2, #10
 80089ae:	e039      	b.n	8008a24 <_printf_i+0xd8>
 80089b0:	2973      	cmp	r1, #115	; 0x73
 80089b2:	f000 809d 	beq.w	8008af0 <_printf_i+0x1a4>
 80089b6:	d808      	bhi.n	80089ca <_printf_i+0x7e>
 80089b8:	296f      	cmp	r1, #111	; 0x6f
 80089ba:	d020      	beq.n	80089fe <_printf_i+0xb2>
 80089bc:	2970      	cmp	r1, #112	; 0x70
 80089be:	d1dd      	bne.n	800897c <_printf_i+0x30>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	f043 0320 	orr.w	r3, r3, #32
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	e003      	b.n	80089d2 <_printf_i+0x86>
 80089ca:	2975      	cmp	r1, #117	; 0x75
 80089cc:	d017      	beq.n	80089fe <_printf_i+0xb2>
 80089ce:	2978      	cmp	r1, #120	; 0x78
 80089d0:	d1d4      	bne.n	800897c <_printf_i+0x30>
 80089d2:	2378      	movs	r3, #120	; 0x78
 80089d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089d8:	4864      	ldr	r0, [pc, #400]	; (8008b6c <_printf_i+0x220>)
 80089da:	e055      	b.n	8008a88 <_printf_i+0x13c>
 80089dc:	6813      	ldr	r3, [r2, #0]
 80089de:	1d19      	adds	r1, r3, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6011      	str	r1, [r2, #0]
 80089e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089ec:	2301      	movs	r3, #1
 80089ee:	e08c      	b.n	8008b0a <_printf_i+0x1be>
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6011      	str	r1, [r2, #0]
 80089f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089f8:	bf18      	it	ne
 80089fa:	b21b      	sxthne	r3, r3
 80089fc:	e7cf      	b.n	800899e <_printf_i+0x52>
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	6825      	ldr	r5, [r4, #0]
 8008a02:	1d18      	adds	r0, r3, #4
 8008a04:	6010      	str	r0, [r2, #0]
 8008a06:	0628      	lsls	r0, r5, #24
 8008a08:	d501      	bpl.n	8008a0e <_printf_i+0xc2>
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	e002      	b.n	8008a14 <_printf_i+0xc8>
 8008a0e:	0668      	lsls	r0, r5, #25
 8008a10:	d5fb      	bpl.n	8008a0a <_printf_i+0xbe>
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	4854      	ldr	r0, [pc, #336]	; (8008b68 <_printf_i+0x21c>)
 8008a16:	296f      	cmp	r1, #111	; 0x6f
 8008a18:	bf14      	ite	ne
 8008a1a:	220a      	movne	r2, #10
 8008a1c:	2208      	moveq	r2, #8
 8008a1e:	2100      	movs	r1, #0
 8008a20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a24:	6865      	ldr	r5, [r4, #4]
 8008a26:	60a5      	str	r5, [r4, #8]
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	f2c0 8095 	blt.w	8008b58 <_printf_i+0x20c>
 8008a2e:	6821      	ldr	r1, [r4, #0]
 8008a30:	f021 0104 	bic.w	r1, r1, #4
 8008a34:	6021      	str	r1, [r4, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d13d      	bne.n	8008ab6 <_printf_i+0x16a>
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	f040 808e 	bne.w	8008b5c <_printf_i+0x210>
 8008a40:	4665      	mov	r5, ip
 8008a42:	2a08      	cmp	r2, #8
 8008a44:	d10b      	bne.n	8008a5e <_printf_i+0x112>
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	07db      	lsls	r3, r3, #31
 8008a4a:	d508      	bpl.n	8008a5e <_printf_i+0x112>
 8008a4c:	6923      	ldr	r3, [r4, #16]
 8008a4e:	6862      	ldr	r2, [r4, #4]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	bfde      	ittt	le
 8008a54:	2330      	movle	r3, #48	; 0x30
 8008a56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a5e:	ebac 0305 	sub.w	r3, ip, r5
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	f8cd 8000 	str.w	r8, [sp]
 8008a68:	463b      	mov	r3, r7
 8008a6a:	aa03      	add	r2, sp, #12
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff fef6 	bl	8008860 <_printf_common>
 8008a74:	3001      	adds	r0, #1
 8008a76:	d14d      	bne.n	8008b14 <_printf_i+0x1c8>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	b005      	add	sp, #20
 8008a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a82:	4839      	ldr	r0, [pc, #228]	; (8008b68 <_printf_i+0x21c>)
 8008a84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a88:	6813      	ldr	r3, [r2, #0]
 8008a8a:	6821      	ldr	r1, [r4, #0]
 8008a8c:	1d1d      	adds	r5, r3, #4
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6015      	str	r5, [r2, #0]
 8008a92:	060a      	lsls	r2, r1, #24
 8008a94:	d50b      	bpl.n	8008aae <_printf_i+0x162>
 8008a96:	07ca      	lsls	r2, r1, #31
 8008a98:	bf44      	itt	mi
 8008a9a:	f041 0120 	orrmi.w	r1, r1, #32
 8008a9e:	6021      	strmi	r1, [r4, #0]
 8008aa0:	b91b      	cbnz	r3, 8008aaa <_printf_i+0x15e>
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	f022 0220 	bic.w	r2, r2, #32
 8008aa8:	6022      	str	r2, [r4, #0]
 8008aaa:	2210      	movs	r2, #16
 8008aac:	e7b7      	b.n	8008a1e <_printf_i+0xd2>
 8008aae:	064d      	lsls	r5, r1, #25
 8008ab0:	bf48      	it	mi
 8008ab2:	b29b      	uxthmi	r3, r3
 8008ab4:	e7ef      	b.n	8008a96 <_printf_i+0x14a>
 8008ab6:	4665      	mov	r5, ip
 8008ab8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008abc:	fb02 3311 	mls	r3, r2, r1, r3
 8008ac0:	5cc3      	ldrb	r3, [r0, r3]
 8008ac2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	d1f5      	bne.n	8008ab8 <_printf_i+0x16c>
 8008acc:	e7b9      	b.n	8008a42 <_printf_i+0xf6>
 8008ace:	6813      	ldr	r3, [r2, #0]
 8008ad0:	6825      	ldr	r5, [r4, #0]
 8008ad2:	6961      	ldr	r1, [r4, #20]
 8008ad4:	1d18      	adds	r0, r3, #4
 8008ad6:	6010      	str	r0, [r2, #0]
 8008ad8:	0628      	lsls	r0, r5, #24
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	d501      	bpl.n	8008ae2 <_printf_i+0x196>
 8008ade:	6019      	str	r1, [r3, #0]
 8008ae0:	e002      	b.n	8008ae8 <_printf_i+0x19c>
 8008ae2:	066a      	lsls	r2, r5, #25
 8008ae4:	d5fb      	bpl.n	8008ade <_printf_i+0x192>
 8008ae6:	8019      	strh	r1, [r3, #0]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	4665      	mov	r5, ip
 8008aee:	e7b9      	b.n	8008a64 <_printf_i+0x118>
 8008af0:	6813      	ldr	r3, [r2, #0]
 8008af2:	1d19      	adds	r1, r3, #4
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	681d      	ldr	r5, [r3, #0]
 8008af8:	6862      	ldr	r2, [r4, #4]
 8008afa:	2100      	movs	r1, #0
 8008afc:	4628      	mov	r0, r5
 8008afe:	f7f7 fb6f 	bl	80001e0 <memchr>
 8008b02:	b108      	cbz	r0, 8008b08 <_printf_i+0x1bc>
 8008b04:	1b40      	subs	r0, r0, r5
 8008b06:	6060      	str	r0, [r4, #4]
 8008b08:	6863      	ldr	r3, [r4, #4]
 8008b0a:	6123      	str	r3, [r4, #16]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b12:	e7a7      	b.n	8008a64 <_printf_i+0x118>
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	462a      	mov	r2, r5
 8008b18:	4639      	mov	r1, r7
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	47c0      	blx	r8
 8008b1e:	3001      	adds	r0, #1
 8008b20:	d0aa      	beq.n	8008a78 <_printf_i+0x12c>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	079b      	lsls	r3, r3, #30
 8008b26:	d413      	bmi.n	8008b50 <_printf_i+0x204>
 8008b28:	68e0      	ldr	r0, [r4, #12]
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	4298      	cmp	r0, r3
 8008b2e:	bfb8      	it	lt
 8008b30:	4618      	movlt	r0, r3
 8008b32:	e7a3      	b.n	8008a7c <_printf_i+0x130>
 8008b34:	2301      	movs	r3, #1
 8008b36:	464a      	mov	r2, r9
 8008b38:	4639      	mov	r1, r7
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	47c0      	blx	r8
 8008b3e:	3001      	adds	r0, #1
 8008b40:	d09a      	beq.n	8008a78 <_printf_i+0x12c>
 8008b42:	3501      	adds	r5, #1
 8008b44:	68e3      	ldr	r3, [r4, #12]
 8008b46:	9a03      	ldr	r2, [sp, #12]
 8008b48:	1a9b      	subs	r3, r3, r2
 8008b4a:	42ab      	cmp	r3, r5
 8008b4c:	dcf2      	bgt.n	8008b34 <_printf_i+0x1e8>
 8008b4e:	e7eb      	b.n	8008b28 <_printf_i+0x1dc>
 8008b50:	2500      	movs	r5, #0
 8008b52:	f104 0919 	add.w	r9, r4, #25
 8008b56:	e7f5      	b.n	8008b44 <_printf_i+0x1f8>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1ac      	bne.n	8008ab6 <_printf_i+0x16a>
 8008b5c:	7803      	ldrb	r3, [r0, #0]
 8008b5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b66:	e76c      	b.n	8008a42 <_printf_i+0xf6>
 8008b68:	08008e15 	.word	0x08008e15
 8008b6c:	08008e26 	.word	0x08008e26

08008b70 <memmove>:
 8008b70:	4288      	cmp	r0, r1
 8008b72:	b510      	push	{r4, lr}
 8008b74:	eb01 0302 	add.w	r3, r1, r2
 8008b78:	d807      	bhi.n	8008b8a <memmove+0x1a>
 8008b7a:	1e42      	subs	r2, r0, #1
 8008b7c:	4299      	cmp	r1, r3
 8008b7e:	d00a      	beq.n	8008b96 <memmove+0x26>
 8008b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b88:	e7f8      	b.n	8008b7c <memmove+0xc>
 8008b8a:	4283      	cmp	r3, r0
 8008b8c:	d9f5      	bls.n	8008b7a <memmove+0xa>
 8008b8e:	1881      	adds	r1, r0, r2
 8008b90:	1ad2      	subs	r2, r2, r3
 8008b92:	42d3      	cmn	r3, r2
 8008b94:	d100      	bne.n	8008b98 <memmove+0x28>
 8008b96:	bd10      	pop	{r4, pc}
 8008b98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ba0:	e7f7      	b.n	8008b92 <memmove+0x22>

08008ba2 <_realloc_r>:
 8008ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	460e      	mov	r6, r1
 8008baa:	b921      	cbnz	r1, 8008bb6 <_realloc_r+0x14>
 8008bac:	4611      	mov	r1, r2
 8008bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bb2:	f7ff bc77 	b.w	80084a4 <_malloc_r>
 8008bb6:	b922      	cbnz	r2, 8008bc2 <_realloc_r+0x20>
 8008bb8:	f7ff fc26 	bl	8008408 <_free_r>
 8008bbc:	4625      	mov	r5, r4
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc2:	f000 f814 	bl	8008bee <_malloc_usable_size_r>
 8008bc6:	42a0      	cmp	r0, r4
 8008bc8:	d20f      	bcs.n	8008bea <_realloc_r+0x48>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f7ff fc69 	bl	80084a4 <_malloc_r>
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d0f2      	beq.n	8008bbe <_realloc_r+0x1c>
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4622      	mov	r2, r4
 8008bdc:	f7ff fc00 	bl	80083e0 <memcpy>
 8008be0:	4631      	mov	r1, r6
 8008be2:	4638      	mov	r0, r7
 8008be4:	f7ff fc10 	bl	8008408 <_free_r>
 8008be8:	e7e9      	b.n	8008bbe <_realloc_r+0x1c>
 8008bea:	4635      	mov	r5, r6
 8008bec:	e7e7      	b.n	8008bbe <_realloc_r+0x1c>

08008bee <_malloc_usable_size_r>:
 8008bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf2:	1f18      	subs	r0, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbc      	itt	lt
 8008bf8:	580b      	ldrlt	r3, [r1, r0]
 8008bfa:	18c0      	addlt	r0, r0, r3
 8008bfc:	4770      	bx	lr
	...

08008c00 <_init>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	bf00      	nop
 8008c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c06:	bc08      	pop	{r3}
 8008c08:	469e      	mov	lr, r3
 8008c0a:	4770      	bx	lr

08008c0c <_fini>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr
