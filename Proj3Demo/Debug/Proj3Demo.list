
Proj3Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008758  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad8  08008ad8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008ad8  08008ad8  00018ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae0  08008ae0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ae4  08008ae4  00018ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003238  20000074  08008b5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032ac  08008b5c  000232ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020645  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d6c  00000000  00000000  000406e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001838  00000000  00000000  00044458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001658  00000000  00000000  00045c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002908d  00000000  00000000  000472e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000148ec  00000000  00000000  00070375  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fecb2  00000000  00000000  00084c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006758  00000000  00000000  00183990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088d0 	.word	0x080088d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080088d0 	.word	0x080088d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Generate_Customer>:
 * Allocates memory for customer and generates random interactino time for them
 * Inputs: None
 * Returns: Pointer to new customer
 * */
CustomerS* Generate_Customer(unsigned int random_time)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    CustomerS* new_customer = (CustomerS*) malloc(sizeof(CustomerS));
 8000588:	2008      	movs	r0, #8
 800058a:	f007 fd89 	bl	80080a0 <malloc>
 800058e:	4603      	mov	r3, r0
 8000590:	60fb      	str	r3, [r7, #12]
    new_customer->interaction_time = generate_interaction_time(random_time);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f808 	bl	80005a8 <generate_interaction_time>
 8000598:	4602      	mov	r2, r0
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	605a      	str	r2, [r3, #4]
    return new_customer;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <generate_interaction_time>:
 * Randomly generates an interaction time for customers (between 30 seconds and 4 minutes)
 * Inputs: None
 * Returns: Random time
 * */
static unsigned int generate_interaction_time(unsigned int random_time)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_INTERACTION_TIME;
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <generate_interaction_time+0x2c>)
 80005b4:	fba3 1302 	umull	r1, r3, r3, r2
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80005be:	fb01 f303 	mul.w	r3, r1, r3
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	331e      	adds	r3, #30
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	91a2b3c5 	.word	0x91a2b3c5

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 feda 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f860 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f994 	bl	8000910 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f962 	bl	80008b0 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80005ec:	f000 f8f6 	bl	80007dc <MX_RNG_Init>
  MX_TIM2_Init();
 80005f0:	f000 f908 	bl	8000804 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005f4:	481a      	ldr	r0, [pc, #104]	; (8000660 <main+0x88>)
 80005f6:	f002 fe09 	bl	800320c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 80005fa:	f004 f97b 	bl	80048f4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of queue_mutex */
  queue_mutexHandle = osMutexNew(&queue_mutex_attributes);
 80005fe:	4819      	ldr	r0, [pc, #100]	; (8000664 <main+0x8c>)
 8000600:	f004 fab6 	bl	8004b70 <osMutexNew>
 8000604:	4602      	mov	r2, r0
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <main+0x90>)
 8000608:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <main+0x94>)
 800060c:	2101      	movs	r1, #1
 800060e:	2001      	movs	r0, #1
 8000610:	f004 fb48 	bl	8004ca4 <osSemaphoreNew>
 8000614:	4602      	mov	r2, r0
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <main+0x98>)
 8000618:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <main+0x9c>)
 800061c:	2100      	movs	r1, #0
 800061e:	4816      	ldr	r0, [pc, #88]	; (8000678 <main+0xa0>)
 8000620:	f004 f9d2 	bl	80049c8 <osThreadNew>
 8000624:	4602      	mov	r2, r0
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <main+0xa4>)
 8000628:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread1 */
  TellerThread1Handle = osThreadNew(StartTask02, NULL, &TellerThread1_attributes);
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <main+0xa8>)
 800062c:	2100      	movs	r1, #0
 800062e:	4815      	ldr	r0, [pc, #84]	; (8000684 <main+0xac>)
 8000630:	f004 f9ca 	bl	80049c8 <osThreadNew>
 8000634:	4602      	mov	r2, r0
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <main+0xb0>)
 8000638:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread2 */
  TellerThread2Handle = osThreadNew(StartTask03, NULL, &TellerThread2_attributes);
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <main+0xb4>)
 800063c:	2100      	movs	r1, #0
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0xb8>)
 8000640:	f004 f9c2 	bl	80049c8 <osThreadNew>
 8000644:	4602      	mov	r2, r0
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <main+0xbc>)
 8000648:	601a      	str	r2, [r3, #0]

  /* creation of TellerThread3 */
  TellerThread3Handle = osThreadNew(StartTask04, NULL, &TellerThread3_attributes);
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <main+0xc0>)
 800064c:	2100      	movs	r1, #0
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <main+0xc4>)
 8000650:	f004 f9ba 	bl	80049c8 <osThreadNew>
 8000654:	4602      	mov	r2, r0
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <main+0xc8>)
 8000658:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f004 f97f 	bl	800495c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x86>
 8000660:	20003158 	.word	0x20003158
 8000664:	08008a3c 	.word	0x08008a3c
 8000668:	20003198 	.word	0x20003198
 800066c:	08008a4c 	.word	0x08008a4c
 8000670:	20003154 	.word	0x20003154
 8000674:	080089ac 	.word	0x080089ac
 8000678:	08000d11 	.word	0x08000d11
 800067c:	2000313c 	.word	0x2000313c
 8000680:	080089d0 	.word	0x080089d0
 8000684:	08000e59 	.word	0x08000e59
 8000688:	20003220 	.word	0x20003220
 800068c:	080089f4 	.word	0x080089f4
 8000690:	08000e6b 	.word	0x08000e6b
 8000694:	2000321c 	.word	0x2000321c
 8000698:	08008a18 	.word	0x08008a18
 800069c:	08000e7b 	.word	0x08000e7b
 80006a0:	20003140 	.word	0x20003140

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0b8      	sub	sp, #224	; 0xe0
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ae:	2244      	movs	r2, #68	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 fd07 	bl	80080c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2288      	movs	r2, #136	; 0x88
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 fcf9 	bl	80080c6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006d4:	f001 f980 	bl	80019d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006d8:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <SystemClock_Config+0x130>)
 80006da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006de:	4a3d      	ldr	r2, [pc, #244]	; (80007d4 <SystemClock_Config+0x130>)
 80006e0:	f023 0318 	bic.w	r3, r3, #24
 80006e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006e8:	2314      	movs	r3, #20
 80006ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000700:	2360      	movs	r3, #96	; 0x60
 8000702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800070c:	2301      	movs	r3, #1
 800070e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000718:	2328      	movs	r3, #40	; 0x28
 800071a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800071e:	2307      	movs	r3, #7
 8000720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f9c3 	bl	8001ac0 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000740:	f000 fbb6 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2303      	movs	r3, #3
 800074c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000762:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000766:	2104      	movs	r1, #4
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fd8f 	bl	800228c <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000774:	f000 fb9c 	bl	8000eb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <SystemClock_Config+0x134>)
 800077a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000784:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800078e:	2310      	movs	r3, #16
 8000790:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000792:	2307      	movs	r3, #7
 8000794:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800079e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 ffa6 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80007b2:	f000 fb7d 	bl	8000eb0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ba:	f001 f92b 	bl	8001a14 <HAL_PWREx_ControlVoltageScaling>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80007c4:	f000 fb74 	bl	8000eb0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c8:	f002 fa7c 	bl	8002cc4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007cc:	bf00      	nop
 80007ce:	37e0      	adds	r7, #224	; 0xe0
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	00040002 	.word	0x00040002

080007dc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_RNG_Init+0x20>)
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <MX_RNG_Init+0x24>)
 80007e4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_RNG_Init+0x20>)
 80007e8:	f002 fc46 	bl	8003078 <HAL_RNG_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007f2:	f000 fb5d 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20003144 	.word	0x20003144
 8000800:	50060800 	.word	0x50060800

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <MX_TIM2_Init+0xa8>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 13332;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_TIM2_Init+0xa8>)
 800082c:	f243 4214 	movw	r2, #13332	; 0x3414
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_TIM2_Init+0xa8>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM2_Init+0xa8>)
 800083a:	220a      	movs	r2, #10
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_TIM2_Init+0xa8>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM2_Init+0xa8>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084a:	4818      	ldr	r0, [pc, #96]	; (80008ac <MX_TIM2_Init+0xa8>)
 800084c:	f002 fcb3 	bl	80031b6 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000856:	f000 fb2b 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_TIM2_Init+0xa8>)
 8000868:	f002 fe19 	bl	800349e <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000872:	f000 fb1d 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <MX_TIM2_Init+0xa8>)
 8000884:	f003 f820 	bl	80038c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800088e:	f000 fb0f 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	201c      	movs	r0, #28
 8000898:	f000 fe72 	bl	8001580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800089c:	201c      	movs	r0, #28
 800089e:	f000 fe8b 	bl	80015b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20003158 	.word	0x20003158

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_USART2_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008f4:	f003 f88e 	bl	8003a14 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 fad7 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000319c 	.word	0x2000319c
 800090c:	40004400 	.word	0x40004400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	4bb7      	ldr	r3, [pc, #732]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4ab6      	ldr	r2, [pc, #728]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4bb4      	ldr	r3, [pc, #720]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4bb1      	ldr	r3, [pc, #708]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4ab0      	ldr	r2, [pc, #704]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4bae      	ldr	r3, [pc, #696]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4bab      	ldr	r3, [pc, #684]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4aaa      	ldr	r2, [pc, #680]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4ba8      	ldr	r3, [pc, #672]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4ba5      	ldr	r3, [pc, #660]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4aa4      	ldr	r2, [pc, #656]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4ba2      	ldr	r3, [pc, #648]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a9e      	ldr	r2, [pc, #632]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b9c      	ldr	r3, [pc, #624]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	4b99      	ldr	r3, [pc, #612]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a98      	ldr	r2, [pc, #608]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b96      	ldr	r3, [pc, #600]	; (8000c04 <MX_GPIO_Init+0x2f4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f240 1109 	movw	r1, #265	; 0x109
 80009bc:	4892      	ldr	r0, [pc, #584]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 80009be:	f000 fff3 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	210c      	movs	r1, #12
 80009c6:	4891      	ldr	r0, [pc, #580]	; (8000c0c <MX_GPIO_Init+0x2fc>)
 80009c8:	f000 ffee 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d2:	488f      	ldr	r0, [pc, #572]	; (8000c10 <MX_GPIO_Init+0x300>)
 80009d4:	f000 ffe8 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009de:	488c      	ldr	r0, [pc, #560]	; (8000c10 <MX_GPIO_Init+0x300>)
 80009e0:	f000 ffe2 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	488a      	ldr	r0, [pc, #552]	; (8000c14 <MX_GPIO_Init+0x304>)
 80009ea:	f000 ffdd 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 80009ee:	23f4      	movs	r3, #244	; 0xf4
 80009f0:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009fe:	230d      	movs	r3, #13
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	487f      	ldr	r0, [pc, #508]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 8000a0a:	f000 fe25 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4878      	ldr	r0, [pc, #480]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 8000a26:	f000 fe17 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000a2a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a30:	4b79      	ldr	r3, [pc, #484]	; (8000c18 <MX_GPIO_Init+0x308>)
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4874      	ldr	r0, [pc, #464]	; (8000c10 <MX_GPIO_Init+0x300>)
 8000a40:	f000 fe0a 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000a44:	2307      	movs	r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	486e      	ldr	r0, [pc, #440]	; (8000c10 <MX_GPIO_Init+0x300>)
 8000a58:	f000 fdfe 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8000a5c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000a60:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000a6e:	230b      	movs	r3, #11
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4865      	ldr	r0, [pc, #404]	; (8000c10 <MX_GPIO_Init+0x300>)
 8000a7a:	f000 fded 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8000a7e:	232f      	movs	r3, #47	; 0x2f
 8000a80:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a86:	2302      	movs	r3, #2
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fde0 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a9c:	4b5e      	ldr	r3, [pc, #376]	; (8000c18 <MX_GPIO_Init+0x308>)
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 fdd3 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8000ab2:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000ab6:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ac4:	230b      	movs	r3, #11
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fdc1 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8000ad6:	f24f 2333 	movw	r3, #62003	; 0xf233
 8000ada:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ae8:	230b      	movs	r3, #11
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4846      	ldr	r0, [pc, #280]	; (8000c0c <MX_GPIO_Init+0x2fc>)
 8000af4:	f000 fdb0 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000af8:	2304      	movs	r3, #4
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	483f      	ldr	r0, [pc, #252]	; (8000c0c <MX_GPIO_Init+0x2fc>)
 8000b10:	f000 fda2 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4836      	ldr	r0, [pc, #216]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 8000b2e:	f000 fd93 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8000b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000b44:	230d      	movs	r3, #13
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482e      	ldr	r0, [pc, #184]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 8000b50:	f000 fd82 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8000b54:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000b58:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b66:	230a      	movs	r3, #10
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4825      	ldr	r0, [pc, #148]	; (8000c08 <MX_GPIO_Init+0x2f8>)
 8000b72:	f000 fd71 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_I2C_SLC_Pin MFX_I2C_SDA_Pin */
  GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000b76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	481e      	ldr	r0, [pc, #120]	; (8000c0c <MX_GPIO_Init+0x2fc>)
 8000b94:	f000 fd60 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8000b98:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000b9c:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000baa:	230b      	movs	r3, #11
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4817      	ldr	r0, [pc, #92]	; (8000c14 <MX_GPIO_Init+0x304>)
 8000bb6:	f000 fd4f 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000bba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480f      	ldr	r0, [pc, #60]	; (8000c10 <MX_GPIO_Init+0x300>)
 8000bd4:	f000 fd40 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000bd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bea:	230a      	movs	r3, #10
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 fd2e 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	e00c      	b.n	8000c1c <MX_GPIO_Init+0x30c>
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000
 8000c08:	48001000 	.word	0x48001000
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	48000800 	.word	0x48000800
 8000c14:	48000c00 	.word	0x48000c00
 8000c18:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c1c:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <MX_GPIO_Init+0x3f0>)
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4836      	ldr	r0, [pc, #216]	; (8000d04 <MX_GPIO_Init+0x3f4>)
 8000c2c:	f000 fd14 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_SCK_Pin MEMS_MISO_Pin MEMS_MOSI_Pin */
  GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000c30:	231a      	movs	r3, #26
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c40:	2305      	movs	r3, #5
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482e      	ldr	r0, [pc, #184]	; (8000d04 <MX_GPIO_Init+0x3f4>)
 8000c4c:	f000 fd04 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4827      	ldr	r0, [pc, #156]	; (8000d04 <MX_GPIO_Init+0x3f4>)
 8000c68:	f000 fcf6 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4821      	ldr	r0, [pc, #132]	; (8000d08 <MX_GPIO_Init+0x3f8>)
 8000c84:	f000 fce8 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c88:	23c0      	movs	r3, #192	; 0xc0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4819      	ldr	r0, [pc, #100]	; (8000d08 <MX_GPIO_Init+0x3f8>)
 8000ca4:	f000 fcd8 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_GPIO_Init+0x3f0>)
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4812      	ldr	r0, [pc, #72]	; (8000d08 <MX_GPIO_Init+0x3f8>)
 8000cbe:	f000 fccb 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_GPIO_Init+0x3fc>)
 8000cda:	f000 fcbd 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_GPIO_Init+0x3f0>)
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_GPIO_Init+0x3fc>)
 8000cf2:	f000 fcb1 	bl	8001658 <HAL_GPIO_Init>

}
 8000cf6:	bf00      	nop
 8000cf8:	3730      	adds	r7, #48	; 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	10120000 	.word	0x10120000
 8000d04:	48000c00 	.word	0x48000c00
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	48001000 	.word	0x48001000

08000d10 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b094      	sub	sp, #80	; 0x50
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
uint8_t buffer[64];
unsigned int random_time;
HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4846      	ldr	r0, [pc, #280]	; (8000e38 <StartDefaultTask+0x128>)
 8000d20:	f002 f9fa 	bl	8003118 <HAL_RNG_GenerateRandomNumber>
InitQueue(&customer_queue,random_time);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4844      	ldr	r0, [pc, #272]	; (8000e3c <StartDefaultTask+0x12c>)
 8000d2a:	f000 f8c8 	bl	8000ebe <InitQueue>
	  //HAL_UART_Receive(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	  sprintf(buffer,"%u\r\n",rand);
	  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
	  */

	if(master_timer > MAX_TIME)
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <StartDefaultTask+0x130>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f246 2270 	movw	r2, #25200	; 0x6270
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d919      	bls.n	8000d6e <StartDefaultTask+0x5e>
	{
		sprintf(buffer,"Time exceeded 4:00 pm\r\n");
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4a41      	ldr	r2, [pc, #260]	; (8000e44 <StartDefaultTask+0x134>)
 8000d40:	461c      	mov	r4, r3
 8000d42:	4615      	mov	r5, r2
 8000d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d4c:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fa3b 	bl	80001d0 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f107 010c 	add.w	r1, r7, #12
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	4838      	ldr	r0, [pc, #224]	; (8000e48 <StartDefaultTask+0x138>)
 8000d68:	f002 fea2 	bl	8003ab0 <HAL_UART_Transmit>
		break;
 8000d6c:	e04a      	b.n	8000e04 <StartDefaultTask+0xf4>
	}
	if(master_timer >= customer_queue.time_for_new_customer)
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <StartDefaultTask+0x12c>)
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <StartDefaultTask+0x130>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d8d9      	bhi.n	8000d2e <StartDefaultTask+0x1e>
	{
		sprintf(buffer,"Current size of queue: %u\r\n", customer_queue.size);
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <StartDefaultTask+0x12c>)
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4932      	ldr	r1, [pc, #200]	; (8000e4c <StartDefaultTask+0x13c>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f007 fa5f 	bl	8008248 <siprintf>
		HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa1e 	bl	80001d0 <strlen>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f107 010c 	add.w	r1, r7, #12
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	4829      	ldr	r0, [pc, #164]	; (8000e48 <StartDefaultTask+0x138>)
 8000da2:	f002 fe85 	bl	8003ab0 <HAL_UART_Transmit>
		if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK)
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <StartDefaultTask+0x140>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0bf      	beq.n	8000d2e <StartDefaultTask+0x1e>
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <StartDefaultTask+0x140>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 f813 	bl	8004de0 <osSemaphoreAcquire>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1b6      	bne.n	8000d2e <StartDefaultTask+0x1e>
		{

			// Lock queue

			HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481c      	ldr	r0, [pc, #112]	; (8000e38 <StartDefaultTask+0x128>)
 8000dc8:	f002 f9a6 	bl	8003118 <HAL_RNG_GenerateRandomNumber>
			unsigned int time_for_new_cust = generate_time_for_new_cust(random_time);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f8f0 	bl	8000fb4 <generate_time_for_new_cust>
 8000dd4:	64f8      	str	r0, [r7, #76]	; 0x4c
			customer_queue.time_for_new_customer = time_for_new_cust + master_timer;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <StartDefaultTask+0x130>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <StartDefaultTask+0x12c>)
 8000de0:	60d3      	str	r3, [r2, #12]


			HAL_RNG_GenerateRandomNumber(&hrng, &random_time);
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	4813      	ldr	r0, [pc, #76]	; (8000e38 <StartDefaultTask+0x128>)
 8000dea:	f002 f995 	bl	8003118 <HAL_RNG_GenerateRandomNumber>
			Add_Customer(&customer_queue,random_time);
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4812      	ldr	r0, [pc, #72]	; (8000e3c <StartDefaultTask+0x12c>)
 8000df4:	f000 f8a9 	bl	8000f4a <Add_Customer>
			// Unlock queue
			osSemaphoreRelease (myBinarySem01Handle);
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <StartDefaultTask+0x140>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 f855 	bl	8004eac <osSemaphoreRelease>
	if(master_timer > MAX_TIME)
 8000e02:	e794      	b.n	8000d2e <StartDefaultTask+0x1e>
	}
  }
  //customer_queue.max_depth;


  sprintf(buffer,"Maximum depth of queue: %u\r\n", customer_queue.max_depth);
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <StartDefaultTask+0x12c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4911      	ldr	r1, [pc, #68]	; (8000e54 <StartDefaultTask+0x144>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 fa1a 	bl	8008248 <siprintf>
  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f9d9 	bl	80001d0 <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f107 010c 	add.w	r1, r7, #12
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <StartDefaultTask+0x138>)
 8000e2c:	f002 fe40 	bl	8003ab0 <HAL_UART_Transmit>
  /* USER CODE END 5 */ 
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}
 8000e38:	20003144 	.word	0x20003144
 8000e3c:	20000090 	.word	0x20000090
 8000e40:	200030e8 	.word	0x200030e8
 8000e44:	08008940 	.word	0x08008940
 8000e48:	2000319c 	.word	0x2000319c
 8000e4c:	08008958 	.word	0x08008958
 8000e50:	20003154 	.word	0x20003154
 8000e54:	08008974 	.word	0x08008974

08000e58 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e64:	f003 fe56 	bl	8004b14 <osDelay>
 8000e68:	e7fa      	b.n	8000e60 <StartTask02+0x8>

08000e6a <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f003 fe4e 	bl	8004b14 <osDelay>
 8000e78:	e7fb      	b.n	8000e72 <StartTask03+0x8>

08000e7a <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f003 fe46 	bl	8004b14 <osDelay>
 8000e88:	e7fb      	b.n	8000e82 <StartTask04+0x8>
	...

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9e:	f000 fa99 	bl	80013d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40012c00 	.word	0x40012c00

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <InitQueue>:
 * Sets values to 0 or NULL
 * [QueueS*] QueuePtr - Pointer to a queue to initialize
 * Returns: NULL
 * */
void InitQueue(QueueS* QueuePtr,unsigned int random_time)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
    //Metric information init
    QueuePtr->max_depth = 0;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
    QueuePtr->max_wait_time = 0;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]

    //Active information init
    QueuePtr->size = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    QueuePtr->current_wait_time = generate_time_for_new_cust(random_time);
 8000eda:	6838      	ldr	r0, [r7, #0]
 8000edc:	f000 f86a 	bl	8000fb4 <generate_time_for_new_cust>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	611a      	str	r2, [r3, #16]
    QueuePtr->front_node = NULL;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
    QueuePtr->back_node = NULL;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <Enqueue>:
 * [QueueS*] QueuePtr - Pointer to a queue to add item to
 * [QueueS*] NodePtr  - Pointer to a node to add the back of the queue (back of the line)
 *  Returns: NULL
 * */
void Enqueue(QueueS* QueuePtr, Queue_NodeS* NodePtr)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	6039      	str	r1, [r7, #0]
    if (QueuePtr->size == 0)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d109      	bne.n	8000f20 <Enqueue+0x26>
    {
        NodePtr->next_node = NULL;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	619a      	str	r2, [r3, #24]
        QueuePtr->front_node = NodePtr;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	615a      	str	r2, [r3, #20]
 8000f1e:	e009      	b.n	8000f34 <Enqueue+0x3a>
    }
    else
    {
        NodePtr->next_node = NULL;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node->next_node = NodePtr;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
        QueuePtr->back_node = NodePtr;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	619a      	str	r2, [r3, #24]
    }
    QueuePtr->size++;   
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <Add_Customer>:
 * Adds a customer to the static Queue object
 * Inputs: None
 * Returns: None
 * */
void Add_Customer(QueueS* queue_ptr,unsigned int random_time)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
    // Allocate Node
    Queue_NodeS* new_node = malloc(sizeof(Queue_NodeS));
 8000f54:	2008      	movs	r0, #8
 8000f56:	f007 f8a3 	bl	80080a0 <malloc>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60fb      	str	r3, [r7, #12]

    // Create new customer to be added
    CustomerS* new_customer = Generate_Customer(random_time);
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff fb0e 	bl	8000580 <Generate_Customer>
 8000f64:	60b8      	str	r0, [r7, #8]
    new_node->customer = new_customer;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	601a      	str	r2, [r3, #0]
    Enqueue(queue_ptr, new_node);
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffc3 	bl	8000efa <Enqueue>

   queue_ptr->current_wait_time += new_customer->interaction_time;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	611a      	str	r2, [r3, #16]
    if (queue_ptr->size > queue_ptr->max_depth)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d903      	bls.n	8000f96 <Add_Customer+0x4c>
    {
        queue_ptr->max_depth = queue_ptr->size;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
    }

    if (queue_ptr->current_wait_time > queue_ptr->max_wait_time)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d903      	bls.n	8000faa <Add_Customer+0x60>
    {
        queue_ptr->max_wait_time = queue_ptr->current_wait_time;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]
    }

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <generate_time_for_new_cust>:
 * Generates a time between 1 minute and 4 minutes
 * Inputs: None
 * Outputs: The time generated
 * */
unsigned int generate_time_for_new_cust(unsigned int random_time)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    return (random_time % DIFF_INTERACTION_TIME) + MIN_ENTER_QUEUE_TIME;
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <generate_time_for_new_cust+0x2c>)
 8000fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	333c      	adds	r3, #60	; 0x3c
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	91a2b3c5 	.word	0x91a2b3c5

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_MspInit+0x4c>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_MspInit+0x4c>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_MspInit+0x4c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	210f      	movs	r1, #15
 800101e:	f06f 0001 	mvn.w	r0, #1
 8001022:	f000 faad 	bl	8001580 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_RNG_MspInit+0x38>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10b      	bne.n	800105e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_RNG_MspInit+0x3c>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_RNG_MspInit+0x3c>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_RNG_MspInit+0x3c>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	50060800 	.word	0x50060800
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001084:	d113      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_TIM_Base_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_TIM_Base_MspInit+0x44>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_TIM_Base_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2105      	movs	r1, #5
 80010a2:	201c      	movs	r0, #28
 80010a4:	f000 fa6c 	bl	8001580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a8:	201c      	movs	r0, #28
 80010aa:	f000 fa85 	bl	80015b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_UART_MspInit+0x8c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12f      	bne.n	800113e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_UART_MspInit+0x90>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a1a      	ldr	r2, [pc, #104]	; (800114c <HAL_UART_MspInit+0x90>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_UART_MspInit+0x90>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_UART_MspInit+0x90>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <HAL_UART_MspInit+0x90>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_UART_MspInit+0x90>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <HAL_UART_MspInit+0x94>)
 800112a:	f000 fa95 	bl	8001658 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2105      	movs	r1, #5
 8001132:	2026      	movs	r0, #38	; 0x26
 8001134:	f000 fa24 	bl	8001580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001138:	2026      	movs	r0, #38	; 0x26
 800113a:	f000 fa3d 	bl	80015b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000
 8001150:	48000c00 	.word	0x48000c00

08001154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2019      	movs	r0, #25
 800116a:	f000 fa09 	bl	8001580 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800116e:	2019      	movs	r0, #25
 8001170:	f000 fa22 	bl	80015b8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <HAL_InitTick+0x9c>)
 8001176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_InitTick+0x9c>)
 800117a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800117e:	6613      	str	r3, [r2, #96]	; 0x60
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_InitTick+0x9c>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800118c:	f107 0210 	add.w	r2, r7, #16
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fa1c 	bl	80025d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800119c:	f001 fa04 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 80011a0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <HAL_InitTick+0xa0>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	0c9b      	lsrs	r3, r3, #18
 80011ac:	3b01      	subs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_InitTick+0xa4>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_InitTick+0xa8>)
 80011b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_InitTick+0xa4>)
 80011b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_InitTick+0xa4>)
 80011c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_InitTick+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_InitTick+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_InitTick+0xa4>)
 80011d2:	f001 fff0 	bl	80031b6 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d104      	bne.n	80011e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <HAL_InitTick+0xa4>)
 80011de:	f002 f815 	bl	800320c <HAL_TIM_Base_Start_IT>
 80011e2:	4603      	mov	r3, r0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3730      	adds	r7, #48	; 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	431bde83 	.word	0x431bde83
 80011f8:	20003224 	.word	0x20003224
 80011fc:	40012c00 	.word	0x40012c00

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800123a:	f002 f811 	bl	8003260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20003224 	.word	0x20003224

08001248 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	master_timer++;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <TIM2_IRQHandler+0x18>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a03      	ldr	r2, [pc, #12]	; (8001260 <TIM2_IRQHandler+0x18>)
 8001254:	6013      	str	r3, [r2, #0]
	//uint8_t buffer[16];
	//sprintf(buffer, "Count: %u\r\n", master_timer);
	//HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <TIM2_IRQHandler+0x1c>)
 8001258:	f002 f802 	bl	8003260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200030e8 	.word	0x200030e8
 8001264:	20003158 	.word	0x20003158

08001268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART2_IRQHandler+0x10>)
 800126e:	f002 fcb3 	bl	8003bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000319c 	.word	0x2000319c

0800127c <_sbrk>:
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x50>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x16>
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <_sbrk+0x50>)
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <_sbrk+0x54>)
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <_sbrk+0x50>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <_sbrk+0x50>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	466a      	mov	r2, sp
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d907      	bls.n	80012b6 <_sbrk+0x3a>
 80012a6:	f006 fed1 	bl	800804c <__errno>
 80012aa:	4602      	mov	r2, r0
 80012ac:	230c      	movs	r3, #12
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	e006      	b.n	80012c4 <_sbrk+0x48>
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <_sbrk+0x50>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a03      	ldr	r2, [pc, #12]	; (80012cc <_sbrk+0x50>)
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000ac 	.word	0x200000ac
 80012d0:	200032b0 	.word	0x200032b0

080012d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <SystemInit+0x64>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a16      	ldr	r2, [pc, #88]	; (8001338 <SystemInit+0x64>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <SystemInit+0x68>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <SystemInit+0x68>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <SystemInit+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <SystemInit+0x68>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <SystemInit+0x68>)
 8001300:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001304:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001308:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <SystemInit+0x68>)
 800130c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001310:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <SystemInit+0x68>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <SystemInit+0x68>)
 8001318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <SystemInit+0x68>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SystemInit+0x64>)
 8001326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132a:	609a      	str	r2, [r3, #8]
#endif
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	40021000 	.word	0x40021000

08001340 <Reset_Handler>:
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>
 8001344:	2100      	movs	r1, #0
 8001346:	e003      	b.n	8001350 <LoopCopyDataInit>

08001348 <CopyDataInit>:
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LoopForever+0x6>)
 800134a:	585b      	ldr	r3, [r3, r1]
 800134c:	5043      	str	r3, [r0, r1]
 800134e:	3104      	adds	r1, #4

08001350 <LoopCopyDataInit>:
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LoopForever+0xa>)
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <LoopForever+0xe>)
 8001354:	1842      	adds	r2, r0, r1
 8001356:	429a      	cmp	r2, r3
 8001358:	d3f6      	bcc.n	8001348 <CopyDataInit>
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopForever+0x12>)
 800135c:	e002      	b.n	8001364 <LoopFillZerobss>

0800135e <FillZerobss>:
 800135e:	2300      	movs	r3, #0
 8001360:	f842 3b04 	str.w	r3, [r2], #4

08001364 <LoopFillZerobss>:
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <LoopForever+0x16>)
 8001366:	429a      	cmp	r2, r3
 8001368:	d3f9      	bcc.n	800135e <FillZerobss>
 800136a:	f7ff ffb3 	bl	80012d4 <SystemInit>
 800136e:	f006 fe73 	bl	8008058 <__libc_init_array>
 8001372:	f7ff f931 	bl	80005d8 <main>

08001376 <LoopForever>:
 8001376:	e7fe      	b.n	8001376 <LoopForever>
 8001378:	20018000 	.word	0x20018000
 800137c:	08008ae8 	.word	0x08008ae8
 8001380:	20000000 	.word	0x20000000
 8001384:	20000074 	.word	0x20000074
 8001388:	20000074 	.word	0x20000074
 800138c:	200032ac 	.word	0x200032ac

08001390 <ADC1_2_IRQHandler>:
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_Init+0x3c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x3c>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f8dd 	bl	800156a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fecf 	bl	8001154 <HAL_InitTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	e001      	b.n	80013c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c2:	f7ff fe0f 	bl	8000fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40022000 	.word	0x40022000

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_IncTick+0x1c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x20>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_IncTick+0x1c>)
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20003264 	.word	0x20003264
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20003264 	.word	0x20003264

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <__NVIC_EnableIRQ+0x38>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff4c 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001592:	f7ff ff61 	bl	8001458 <__NVIC_GetPriorityGrouping>
 8001596:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	6978      	ldr	r0, [r7, #20]
 800159e:	f7ff ffb1 	bl	8001504 <NVIC_EncodePriority>
 80015a2:	4602      	mov	r2, r0
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff80 	bl	80014b0 <__NVIC_SetPriority>
}
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff54 	bl	8001474 <__NVIC_EnableIRQ>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d005      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e029      	b.n	800164c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 020e 	bic.w	r2, r2, #14
 8001606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	f003 021c 	and.w	r2, r3, #28
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
    }
  }
  return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e17f      	b.n	8001968 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8171 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d00b      	beq.n	80016a0 <HAL_GPIO_Init+0x48>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d007      	beq.n	80016a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001694:	2b11      	cmp	r3, #17
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b12      	cmp	r3, #18
 800169e:	d130      	bne.n	8001702 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 0201 	and.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b03      	cmp	r3, #3
 800170c:	d118      	bne.n	8001740 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x128>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b12      	cmp	r3, #18
 800177e:	d123      	bne.n	80017c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	08da      	lsrs	r2, r3, #3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3208      	adds	r2, #8
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	6939      	ldr	r1, [r7, #16]
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80ac 	beq.w	8001962 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_GPIO_Init+0x32c>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	4a5d      	ldr	r2, [pc, #372]	; (8001984 <HAL_GPIO_Init+0x32c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6613      	str	r3, [r2, #96]	; 0x60
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_GPIO_Init+0x32c>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001822:	4a59      	ldr	r2, [pc, #356]	; (8001988 <HAL_GPIO_Init+0x330>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800184c:	d025      	beq.n	800189a <HAL_GPIO_Init+0x242>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4e      	ldr	r2, [pc, #312]	; (800198c <HAL_GPIO_Init+0x334>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01f      	beq.n	8001896 <HAL_GPIO_Init+0x23e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4d      	ldr	r2, [pc, #308]	; (8001990 <HAL_GPIO_Init+0x338>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d019      	beq.n	8001892 <HAL_GPIO_Init+0x23a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4c      	ldr	r2, [pc, #304]	; (8001994 <HAL_GPIO_Init+0x33c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d013      	beq.n	800188e <HAL_GPIO_Init+0x236>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4b      	ldr	r2, [pc, #300]	; (8001998 <HAL_GPIO_Init+0x340>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x232>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_GPIO_Init+0x344>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x22e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x348>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x22a>
 800187e:	2306      	movs	r3, #6
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001882:	2307      	movs	r3, #7
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x244>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x244>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x244>
 800189a:	2300      	movs	r3, #0
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ac:	4936      	ldr	r1, [pc, #216]	; (8001988 <HAL_GPIO_Init+0x330>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_GPIO_Init+0x34c>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae78 	bne.w	8001668 <HAL_GPIO_Init+0x10>
  }
}
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	48000400 	.word	0x48000400
 8001990:	48000800 	.word	0x48000800
 8001994:	48000c00 	.word	0x48000c00
 8001998:	48001000 	.word	0x48001000
 800199c:	48001400 	.word	0x48001400
 80019a0:	48001800 	.word	0x48001800
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000

080019f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40007000 	.word	0x40007000

08001a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a22:	d130      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a30:	d038      	beq.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2232      	movs	r2, #50	; 0x32
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0c9b      	lsrs	r3, r3, #18
 8001a54:	3301      	adds	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	e002      	b.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6c:	d102      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f2      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a80:	d110      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e00f      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d007      	beq.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	431bde83 	.word	0x431bde83

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e3d4      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	4ba1      	ldr	r3, [pc, #644]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001adc:	4b9e      	ldr	r3, [pc, #632]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80e4 	beq.w	8001cbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4a>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	f040 808b 	bne.w	8001c18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	f040 8087 	bne.w	8001c18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0a:	4b93      	ldr	r3, [pc, #588]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e3ac      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	4b8c      	ldr	r3, [pc, #560]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_RCC_OscConfig+0x7c>
 8001b32:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_OscConfig+0x88>
 8001b3c:	4b86      	ldr	r3, [pc, #536]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d223      	bcs.n	8001b94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fd71 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e38d      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b60:	4b7d      	ldr	r3, [pc, #500]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a7c      	ldr	r2, [pc, #496]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b7a      	ldr	r3, [pc, #488]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4977      	ldr	r1, [pc, #476]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7e:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	4972      	ldr	r1, [pc, #456]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
 8001b92:	e025      	b.n	8001be0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b94:	4b70      	ldr	r3, [pc, #448]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6f      	ldr	r2, [pc, #444]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	496a      	ldr	r1, [pc, #424]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb2:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	4965      	ldr	r1, [pc, #404]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fd31 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e34d      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be0:	f000 fc36 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8001be4:	4601      	mov	r1, r0
 8001be6:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	4a5a      	ldr	r2, [pc, #360]	; (8001d5c <HAL_RCC_OscConfig+0x29c>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x2a0>)
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c00:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <HAL_RCC_OscConfig+0x2a4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff faa5 	bl	8001154 <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d052      	beq.n	8001cba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	e331      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d032      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c20:	4b4d      	ldr	r3, [pc, #308]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fbe4 	bl	80013f8 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c34:	f7ff fbe0 	bl	80013f8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e31a      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c46:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b3e      	ldr	r3, [pc, #248]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	493b      	ldr	r1, [pc, #236]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c70:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	4936      	ldr	r1, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	e01a      	b.n	8001cbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a33      	ldr	r2, [pc, #204]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fbb1 	bl	80013f8 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fbad 	bl	80013f8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e2e7      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x1da>
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d074      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x21a>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	d10e      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d064      	beq.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d160      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e2c4      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x24a>
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e01d      	b.n	8001d46 <HAL_RCC_OscConfig+0x286>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d12:	d10c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x26e>
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e00b      	b.n	8001d46 <HAL_RCC_OscConfig+0x286>
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_RCC_OscConfig+0x298>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01c      	beq.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fb53 	bl	80013f8 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d54:	e011      	b.n	8001d7a <HAL_RCC_OscConfig+0x2ba>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08008a5c 	.word	0x08008a5c
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fb46 	bl	80013f8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e280      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7a:	4baf      	ldr	r3, [pc, #700]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2a8>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fb36 	bl	80013f8 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fb32 	bl	80013f8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e26c      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da2:	4ba5      	ldr	r3, [pc, #660]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2d0>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d060      	beq.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x310>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d119      	bne.n	8001dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d116      	bne.n	8001dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd0:	4b99      	ldr	r3, [pc, #612]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x328>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e249      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b93      	ldr	r3, [pc, #588]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	4990      	ldr	r1, [pc, #576]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	e040      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d023      	beq.n	8001e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e06:	4b8c      	ldr	r3, [pc, #560]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a8b      	ldr	r2, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff faf1 	bl	80013f8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff faed 	bl	80013f8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e227      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2c:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	497c      	ldr	r1, [pc, #496]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	e018      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b7a      	ldr	r3, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a79      	ldr	r2, [pc, #484]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7ff facd 	bl	80013f8 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff fac9 	bl	80013f8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e203      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e74:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d03c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01c      	beq.n	8001ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	4a67      	ldr	r2, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff faa8 	bl	80013f8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff faa4 	bl	80013f8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1de      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ebe:	4b5e      	ldr	r3, [pc, #376]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ef      	beq.n	8001eac <HAL_RCC_OscConfig+0x3ec>
 8001ecc:	e01b      	b.n	8001f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b5a      	ldr	r3, [pc, #360]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff fa8b 	bl	80013f8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fa87 	bl	80013f8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1c1      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a6 	beq.w	8002060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f18:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a43      	ldr	r2, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f40:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_RCC_OscConfig+0x57c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d118      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x57c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x57c>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f58:	f7ff fa4e 	bl	80013f8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f60:	f7ff fa4a 	bl	80013f8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e184      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f72:	4b32      	ldr	r3, [pc, #200]	; (800203c <HAL_RCC_OscConfig+0x57c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d8>
 8001f86:	4b2c      	ldr	r3, [pc, #176]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f96:	e024      	b.n	8001fe2 <HAL_RCC_OscConfig+0x522>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d110      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x502>
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	4a24      	ldr	r2, [pc, #144]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb0:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc0:	e00f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x522>
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 8001fda:	f023 0304 	bic.w	r3, r3, #4
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff fa05 	bl	80013f8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fa01 	bl	80013f8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e139      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x578>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ed      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x532>
 8002016:	e01a      	b.n	800204e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff f9ee 	bl	80013f8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201e:	e00f      	b.n	8002040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7ff f9ea 	bl	80013f8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d906      	bls.n	8002040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e122      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002040:	4b90      	ldr	r3, [pc, #576]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1e8      	bne.n	8002020 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4a8a      	ldr	r2, [pc, #552]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8108 	beq.w	800227a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	2b02      	cmp	r3, #2
 8002070:	f040 80d0 	bne.w	8002214 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	429a      	cmp	r2, r3
 8002086:	d130      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	3b01      	subs	r3, #1
 8002094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d127      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d11f      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b4:	2a07      	cmp	r2, #7
 80020b6:	bf14      	ite	ne
 80020b8:	2201      	movne	r2, #1
 80020ba:	2200      	moveq	r2, #0
 80020bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020be:	4293      	cmp	r3, r2
 80020c0:	d113      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	3b01      	subs	r3, #1
 80020e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d06e      	beq.n	80021c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d069      	beq.n	80021c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020f0:	4b64      	ldr	r3, [pc, #400]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0b7      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800210c:	4b5d      	ldr	r3, [pc, #372]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5c      	ldr	r2, [pc, #368]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002116:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002118:	f7ff f96e 	bl	80013f8 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f96a 	bl	80013f8 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0a4      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213e:	4b51      	ldr	r3, [pc, #324]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b51      	ldr	r3, [pc, #324]	; (8002288 <HAL_RCC_OscConfig+0x7c8>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800214e:	3a01      	subs	r2, #1
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002158:	0212      	lsls	r2, r2, #8
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002160:	0852      	lsrs	r2, r2, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	0552      	lsls	r2, r2, #21
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800216c:	0852      	lsrs	r2, r2, #1
 800216e:	3a01      	subs	r2, #1
 8002170:	0652      	lsls	r2, r2, #25
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002178:	0912      	lsrs	r2, r2, #4
 800217a:	0452      	lsls	r2, r2, #17
 800217c:	430a      	orrs	r2, r1
 800217e:	4941      	ldr	r1, [pc, #260]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3e      	ldr	r2, [pc, #248]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002190:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800219c:	f7ff f92c 	bl	80013f8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f928 	bl	80013f8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e062      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c2:	e05a      	b.n	800227a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e059      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d152      	bne.n	800227a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021ec:	f7ff f904 	bl	80013f8 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f900 	bl	80013f8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e03a      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x734>
 8002212:	e032      	b.n	800227a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d02d      	beq.n	8002276 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a19      	ldr	r2, [pc, #100]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002224:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002238:	f023 0303 	bic.w	r3, r3, #3
 800223c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 8002244:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7ff f8d3 	bl	80013f8 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7ff f8cf 	bl	80013f8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e009      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_OscConfig+0x7c4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x796>
 8002274:	e001      	b.n	800227a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	f99d808c 	.word	0xf99d808c

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0c8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b66      	ldr	r3, [pc, #408]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4961      	ldr	r1, [pc, #388]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b5f      	ldr	r3, [pc, #380]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b0      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d04c      	beq.n	8002376 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d121      	bne.n	8002334 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e09e      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d107      	bne.n	800230c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d115      	bne.n	8002334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e092      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e086      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e07e      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002334:	4b42      	ldr	r3, [pc, #264]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 0203 	bic.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	493f      	ldr	r1, [pc, #252]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002346:	f7ff f857 	bl	80013f8 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234c:	e00a      	b.n	8002364 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234e:	f7ff f853 	bl	80013f8 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e066      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 020c 	and.w	r2, r3, #12
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	429a      	cmp	r2, r3
 8002374:	d1eb      	bne.n	800234e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	492c      	ldr	r1, [pc, #176]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b29      	ldr	r3, [pc, #164]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d210      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0207 	bic.w	r2, r3, #7
 80023aa:	4924      	ldr	r1, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1b0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e036      	b.n	8002432 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4918      	ldr	r1, [pc, #96]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4910      	ldr	r1, [pc, #64]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002402:	f000 f825 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8002406:	4601      	mov	r1, r0
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCC_ClockConfig+0x1b4>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	fa21 f303 	lsr.w	r3, r1, r3
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fe94 	bl	8001154 <HAL_InitTick>
 800242c:	4603      	mov	r3, r0
 800242e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002430:	7afb      	ldrb	r3, [r7, #11]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000
 8002440:	40021000 	.word	0x40021000
 8002444:	08008a5c 	.word	0x08008a5c
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002468:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x34>
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d121      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d11e      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e005      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024ac:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	e004      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCC_GetSysClockFreq+0x110>)
 80024d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d133      	bne.n	8002546 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0xaa>
 80024f2:	e005      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e005      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_GetSysClockFreq+0x110>)
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	617b      	str	r3, [r7, #20]
      break;
 8002504:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	3301      	adds	r3, #1
 8002512:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	fb02 f203 	mul.w	r2, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_GetSysClockFreq+0x104>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002546:	69bb      	ldr	r3, [r7, #24]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3724      	adds	r7, #36	; 0x24
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000
 8002558:	08008a74 	.word	0x08008a74
 800255c:	00f42400 	.word	0x00f42400
 8002560:	007a1200 	.word	0x007a1200

08002564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_RCC_GetHCLKFreq+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002580:	f7ff fff0 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8002584:	4601      	mov	r1, r0
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08008a6c 	.word	0x08008a6c

080025a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025ac:	f7ff ffda 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 80025b0:	4601      	mov	r1, r0
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	0adb      	lsrs	r3, r3, #11
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	08008a6c 	.word	0x08008a6c

080025d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	220f      	movs	r2, #15
 80025e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_GetClockConfig+0x5c>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_RCC_GetClockConfig+0x5c>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <HAL_RCC_GetClockConfig+0x5c>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_GetClockConfig+0x5c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_RCC_GetClockConfig+0x60>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0207 	and.w	r2, r3, #7
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40022000 	.word	0x40022000

08002638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff f9d2 	bl	80019f8 <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
 8002656:	e014      	b.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002670:	f7ff f9c2 	bl	80019f8 <HAL_PWREx_GetVoltageRange>
 8002674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002688:	d10b      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d919      	bls.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2ba0      	cmp	r3, #160	; 0xa0
 8002694:	d902      	bls.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e013      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e010      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d902      	bls.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	e00a      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d102      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b4:	2302      	movs	r3, #2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e004      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d101      	bne.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0207 	bic.w	r2, r3, #7
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40022000 	.word	0x40022000

080026f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002700:	2300      	movs	r3, #0
 8002702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002704:	2300      	movs	r3, #0
 8002706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03f      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271c:	d01c      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800271e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002722:	d802      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00e      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002728:	e01f      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800272a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800272e:	d003      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002730:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002734:	d01c      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002736:	e018      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002738:	4b85      	ldr	r3, [pc, #532]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a84      	ldr	r2, [pc, #528]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002744:	e015      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fac9 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002756:	e00c      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3320      	adds	r3, #32
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fbb0 	bl	8002ec4 <RCCEx_PLLSAI2_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002768:	e003      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	74fb      	strb	r3, [r7, #19]
      break;
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002778:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002786:	4972      	ldr	r1, [pc, #456]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800278e:	e001      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d03f      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d01c      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80027aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ae:	d802      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80027b4:	e01f      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ba:	d003      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80027bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027c0:	d01c      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80027c2:	e018      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027c4:	4b62      	ldr	r3, [pc, #392]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a61      	ldr	r2, [pc, #388]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d0:	e015      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fa83 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e2:	e00c      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3320      	adds	r3, #32
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fb6a 	bl	8002ec4 <RCCEx_PLLSAI2_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027f4:	e003      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	74fb      	strb	r3, [r7, #19]
      break;
 80027fa:	e000      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002804:	4b52      	ldr	r3, [pc, #328]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002812:	494f      	ldr	r1, [pc, #316]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800281a:	e001      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a0 	beq.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00d      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	4a40      	ldr	r2, [pc, #256]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6593      	str	r3, [r2, #88]	; 0x58
 8002854:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002860:	2301      	movs	r3, #1
 8002862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002864:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3a      	ldr	r2, [pc, #232]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002870:	f7fe fdc2 	bl	80013f8 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002876:	e009      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe fdbe 	bl	80013f8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d902      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	74fb      	strb	r3, [r7, #19]
        break;
 800288a:	e005      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d15c      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01f      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d019      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028e8:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d016      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe fd7d 	bl	80013f8 <HAL_GetTick>
 80028fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002900:	e00b      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fd79 	bl	80013f8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d902      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	74fb      	strb	r3, [r7, #19]
            break;
 8002918:	e006      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ec      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293e:	4904      	ldr	r1, [pc, #16]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002946:	e009      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
 800294c:	e006      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295c:	7c7b      	ldrb	r3, [r7, #17]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d105      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4b9e      	ldr	r3, [pc, #632]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a9d      	ldr	r2, [pc, #628]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800297a:	4b98      	ldr	r3, [pc, #608]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f023 0203 	bic.w	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	4994      	ldr	r1, [pc, #592]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800299c:	4b8f      	ldr	r3, [pc, #572]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f023 020c 	bic.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	498c      	ldr	r1, [pc, #560]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029be:	4b87      	ldr	r3, [pc, #540]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4983      	ldr	r1, [pc, #524]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029e0:	4b7e      	ldr	r3, [pc, #504]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	497b      	ldr	r1, [pc, #492]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a10:	4972      	ldr	r1, [pc, #456]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a24:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	496a      	ldr	r1, [pc, #424]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a46:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	4961      	ldr	r1, [pc, #388]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a68:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a76:	4959      	ldr	r1, [pc, #356]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8a:	4b54      	ldr	r3, [pc, #336]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	4950      	ldr	r1, [pc, #320]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	4948      	ldr	r1, [pc, #288]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ace:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	493f      	ldr	r1, [pc, #252]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d028      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af0:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	4937      	ldr	r1, [pc, #220]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b10:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1a:	60d3      	str	r3, [r2, #12]
 8002b1c:	e011      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f8d8 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b4e:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	491f      	ldr	r1, [pc, #124]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4a1a      	ldr	r2, [pc, #104]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b78:	60d3      	str	r3, [r2, #12]
 8002b7a:	e011      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f8a9 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02b      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bca:	d109      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a02      	ldr	r2, [pc, #8]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd6:	60d3      	str	r3, [r2, #12]
 8002bd8:	e014      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f877 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02f      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1e:	4928      	ldr	r1, [pc, #160]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c2e:	d10d      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	2102      	movs	r1, #2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f854 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d014      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	74bb      	strb	r3, [r7, #18]
 8002c4a:	e011      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3320      	adds	r3, #32
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f931 	bl	8002ec4 <RCCEx_PLLSAI2_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8a:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c9e:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cae:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cf2:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d018      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cfe:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d10d      	bne.n	8002d2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
       ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d16:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
       ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d044      	beq.n	8002db4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	e041      	b.n	8002db4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d00c      	beq.n	8002d52 <RCCEx_PLLSAI1_Config+0x6e>
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d013      	beq.n	8002d64 <RCCEx_PLLSAI1_Config+0x80>
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d120      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d40:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11d      	bne.n	8002d88 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d50:	e01a      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d52:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d62:	e013      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d64:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d80:	e006      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      break;
 8002d86:	e004      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d88:	bf00      	nop
 8002d8a:	e002      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d8c:	bf00      	nop
 8002d8e:	e000      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d90:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d98:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	430b      	orrs	r3, r1
 8002dae:	4944      	ldr	r1, [pc, #272]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d17d      	bne.n	8002eb6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc6:	f7fe fb17 	bl	80013f8 <HAL_GetTick>
 8002dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dcc:	e009      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dce:	f7fe fb13 	bl	80013f8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d902      	bls.n	8002de2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	73fb      	strb	r3, [r7, #15]
        break;
 8002de0:	e005      	b.n	8002dee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ef      	bne.n	8002dce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d160      	bne.n	8002eb6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d111      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6892      	ldr	r2, [r2, #8]
 8002e0a:	0211      	lsls	r1, r2, #8
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68d2      	ldr	r2, [r2, #12]
 8002e10:	0912      	lsrs	r2, r2, #4
 8002e12:	0452      	lsls	r2, r2, #17
 8002e14:	430a      	orrs	r2, r1
 8002e16:	492a      	ldr	r1, [pc, #168]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	610b      	str	r3, [r1, #16]
 8002e1c:	e027      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d112      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e24:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	0211      	lsls	r1, r2, #8
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6912      	ldr	r2, [r2, #16]
 8002e3a:	0852      	lsrs	r2, r2, #1
 8002e3c:	3a01      	subs	r2, #1
 8002e3e:	0552      	lsls	r2, r2, #21
 8002e40:	430a      	orrs	r2, r1
 8002e42:	491f      	ldr	r1, [pc, #124]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	610b      	str	r3, [r1, #16]
 8002e48:	e011      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	0211      	lsls	r1, r2, #8
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6952      	ldr	r2, [r2, #20]
 8002e60:	0852      	lsrs	r2, r2, #1
 8002e62:	3a01      	subs	r2, #1
 8002e64:	0652      	lsls	r2, r2, #25
 8002e66:	430a      	orrs	r2, r1
 8002e68:	4915      	ldr	r1, [pc, #84]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fabd 	bl	80013f8 <HAL_GetTick>
 8002e7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e80:	e009      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e82:	f7fe fab9 	bl	80013f8 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d902      	bls.n	8002e96 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	73fb      	strb	r3, [r7, #15]
          break;
 8002e94:	e005      	b.n	8002ea2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0ef      	beq.n	8002e82 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	4903      	ldr	r1, [pc, #12]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ed2:	4b68      	ldr	r3, [pc, #416]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d018      	beq.n	8002f10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0203 	and.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d10d      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
       ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d044      	beq.n	8002f94 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e041      	b.n	8002f94 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d00c      	beq.n	8002f32 <RCCEx_PLLSAI2_Config+0x6e>
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d013      	beq.n	8002f44 <RCCEx_PLLSAI2_Config+0x80>
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d120      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f20:	4b54      	ldr	r3, [pc, #336]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11d      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f30:	e01a      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f32:	4b50      	ldr	r3, [pc, #320]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f42:	e013      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10f      	bne.n	8002f70 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f60:	e006      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      break;
 8002f66:	e004      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f68:	bf00      	nop
 8002f6a:	e002      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f6c:	bf00      	nop
 8002f6e:	e000      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f70:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f78:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	4939      	ldr	r1, [pc, #228]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d167      	bne.n	800306a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f9a:	4b36      	ldr	r3, [pc, #216]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a35      	ldr	r2, [pc, #212]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa6:	f7fe fa27 	bl	80013f8 <HAL_GetTick>
 8002faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fac:	e009      	b.n	8002fc2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fae:	f7fe fa23 	bl	80013f8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d902      	bls.n	8002fc2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8002fc0:	e005      	b.n	8002fce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1ef      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d14a      	bne.n	800306a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d111      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6892      	ldr	r2, [r2, #8]
 8002fea:	0211      	lsls	r1, r2, #8
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68d2      	ldr	r2, [r2, #12]
 8002ff0:	0912      	lsrs	r2, r2, #4
 8002ff2:	0452      	lsls	r2, r2, #17
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	491f      	ldr	r1, [pc, #124]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	614b      	str	r3, [r1, #20]
 8002ffc:	e011      	b.n	8003022 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003006:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	0211      	lsls	r1, r2, #8
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6912      	ldr	r2, [r2, #16]
 8003014:	0852      	lsrs	r2, r2, #1
 8003016:	3a01      	subs	r2, #1
 8003018:	0652      	lsls	r2, r2, #25
 800301a:	430a      	orrs	r2, r1
 800301c:	4915      	ldr	r1, [pc, #84]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fe f9e3 	bl	80013f8 <HAL_GetTick>
 8003032:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003034:	e009      	b.n	800304a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003036:	f7fe f9df 	bl	80013f8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d902      	bls.n	800304a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	73fb      	strb	r3, [r7, #15]
          break;
 8003048:	e005      	b.n	8003056 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ef      	beq.n	8003036 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e042      	b.n	8003110 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	795b      	ldrb	r3, [r3, #5]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd ffca 	bl	8001034 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0204 	orr.w	r2, r2, #4
 80030b4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d104      	bne.n	80030ce <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2204      	movs	r2, #4
 80030c8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80030ce:	f7fe f993 	bl	80013f8 <HAL_GetTick>
 80030d2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80030d4:	e00e      	b.n	80030f4 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80030d6:	f7fe f98f 	bl	80013f8 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d907      	bls.n	80030f4 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2204      	movs	r2, #4
 80030e8:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e00d      	b.n	8003110 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d0e9      	beq.n	80030d6 <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	791b      	ldrb	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_RNG_GenerateRandomNumber+0x1a>
 800312e:	2302      	movs	r3, #2
 8003130:	e03d      	b.n	80031ae <HAL_RNG_GenerateRandomNumber+0x96>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	795b      	ldrb	r3, [r3, #5]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d12c      	bne.n	800319c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003148:	f7fe f956 	bl	80013f8 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800314e:	e011      	b.n	8003174 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003150:	f7fe f952 	bl	80013f8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d90a      	bls.n	8003174 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e01c      	b.n	80031ae <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d1e6      	bne.n	8003150 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	715a      	strb	r2, [r3, #5]
 800319a:	e004      	b.n	80031a6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2204      	movs	r2, #4
 80031a0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	711a      	strb	r2, [r3, #4]

  return status;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e01d      	b.n	8003204 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd ff49 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f000 fa33 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_TIM_Base_Start_IT+0x50>)
 800322c:	4013      	ands	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d00b      	beq.n	800324e <HAL_TIM_Base_Start_IT+0x42>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d007      	beq.n	800324e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	00010007 	.word	0x00010007

08003260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0202 	mvn.w	r2, #2
 800328c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f9be 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f9b0 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f9c1 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0204 	mvn.w	r2, #4
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f994 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f986 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f997 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0208 	mvn.w	r2, #8
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2204      	movs	r2, #4
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f96a 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f95c 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f96d 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b10      	cmp	r3, #16
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b10      	cmp	r3, #16
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0210 	mvn.w	r2, #16
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2208      	movs	r2, #8
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f940 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f932 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f943 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0201 	mvn.w	r2, #1
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fd54 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 faee 	bl	80039ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341e:	d10e      	bne.n	800343e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b80      	cmp	r3, #128	; 0x80
 800342c:	d107      	bne.n	800343e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fae1 	bl	8003a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d10e      	bne.n	800346a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d107      	bne.n	800346a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f8f1 	bl	800364c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b20      	cmp	r3, #32
 8003476:	d10e      	bne.n	8003496 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b20      	cmp	r3, #32
 8003484:	d107      	bne.n	8003496 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0220 	mvn.w	r2, #32
 800348e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 faa1 	bl	80039d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_ConfigClockSource+0x18>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0a8      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x16a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d067      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x124>
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d80b      	bhi.n	800350e <HAL_TIM_ConfigClockSource+0x70>
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d073      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x144>
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d802      	bhi.n	8003504 <HAL_TIM_ConfigClockSource+0x66>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d06f      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003502:	e078      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003504:	2b20      	cmp	r3, #32
 8003506:	d06c      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x144>
 8003508:	2b30      	cmp	r3, #48	; 0x30
 800350a:	d06a      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800350c:	e073      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800350e:	2b70      	cmp	r3, #112	; 0x70
 8003510:	d00d      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x90>
 8003512:	2b70      	cmp	r3, #112	; 0x70
 8003514:	d804      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x82>
 8003516:	2b50      	cmp	r3, #80	; 0x50
 8003518:	d033      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xe4>
 800351a:	2b60      	cmp	r3, #96	; 0x60
 800351c:	d041      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800351e:	e06a      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003524:	d066      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0x156>
 8003526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352a:	d017      	beq.n	800355c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800352c:	e063      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6899      	ldr	r1, [r3, #8]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f000 f9a3 	bl	8003888 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003550:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	609a      	str	r2, [r3, #8]
      break;
 800355a:	e04c      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f000 f98c 	bl	8003888 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800357e:	609a      	str	r2, [r3, #8]
      break;
 8003580:	e039      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	461a      	mov	r2, r3
 8003590:	f000 f900 	bl	8003794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2150      	movs	r1, #80	; 0x50
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f959 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80035a0:	e029      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f000 f91f 	bl	80037f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2160      	movs	r1, #96	; 0x60
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f949 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80035c0:	e019      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f000 f8e0 	bl	8003794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f939 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80035e0:	e009      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f000 f930 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80035f2:	e000      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80035f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3d      	ldr	r2, [pc, #244]	; (8003778 <TIM_Base_SetConfig+0x118>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3c      	ldr	r2, [pc, #240]	; (800377c <TIM_Base_SetConfig+0x11c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3b      	ldr	r2, [pc, #236]	; (8003780 <TIM_Base_SetConfig+0x120>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <TIM_Base_SetConfig+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <TIM_Base_SetConfig+0x114>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01f      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d01b      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <TIM_Base_SetConfig+0x118>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d017      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2b      	ldr	r2, [pc, #172]	; (800377c <TIM_Base_SetConfig+0x11c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <TIM_Base_SetConfig+0x120>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a29      	ldr	r2, [pc, #164]	; (8003784 <TIM_Base_SetConfig+0x124>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a28      	ldr	r2, [pc, #160]	; (8003788 <TIM_Base_SetConfig+0x128>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a27      	ldr	r2, [pc, #156]	; (800378c <TIM_Base_SetConfig+0x12c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0x9a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a26      	ldr	r2, [pc, #152]	; (8003790 <TIM_Base_SetConfig+0x130>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <TIM_Base_SetConfig+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00f      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <TIM_Base_SetConfig+0x124>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a11      	ldr	r2, [pc, #68]	; (8003788 <TIM_Base_SetConfig+0x128>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a10      	ldr	r2, [pc, #64]	; (800378c <TIM_Base_SetConfig+0x12c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0xf8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <TIM_Base_SetConfig+0x130>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	615a      	str	r2, [r3, #20]
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40013400 	.word	0x40013400
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800

08003794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0201 	bic.w	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f023 030a 	bic.w	r3, r3, #10
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f023 0210 	bic.w	r2, r3, #16
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800381c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800382e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	f043 0307 	orr.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	021a      	lsls	r2, r3, #8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038dc:	2302      	movs	r3, #2
 80038de:	e068      	b.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2d      	ldr	r2, [pc, #180]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800391a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01d      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d018      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10c      	bne.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800398c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000

080039d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e040      	b.n	8003aa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fb40 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	; 0x24
 8003a40:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa1a 	bl	8003e8c <UART_SetConfig>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e022      	b.n	8003aa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fd80 	bl	8004570 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fe07 	bl	80046b4 <UART_CheckIdleState>
 8003aa6:	4603      	mov	r3, r0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	f040 8081 	bne.w	8003bcc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_UART_Transmit+0x26>
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e079      	b.n	8003bce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UART_Transmit+0x38>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e072      	b.n	8003bce <HAL_UART_Transmit+0x11e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2221      	movs	r2, #33	; 0x21
 8003afa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003afc:	f7fd fc7c 	bl	80013f8 <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1a:	d108      	bne.n	8003b2e <HAL_UART_Transmit+0x7e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e003      	b.n	8003b36 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003b3e:	e02d      	b.n	8003b9c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fdf7 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e039      	b.n	8003bce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b6c:	b292      	uxth	r2, r2
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	3302      	adds	r3, #2
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	e008      	b.n	8003b8a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b292      	uxth	r2, r2
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1cb      	bne.n	8003b40 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2140      	movs	r1, #64	; 0x40
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fdc3 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e005      	b.n	8003bce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8114 	beq.w	8003e4e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
      }
      return;
 8003c2e:	e10e      	b.n	8003e4e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80d6 	beq.w	8003de4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80cb 	beq.w	8003de4 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <HAL_UART_IRQHandler+0x9e>
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2201      	movs	r2, #1
 8003c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <HAL_UART_IRQHandler+0xc6>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xee>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cbe:	f043 0202 	orr.w	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf0:	f043 0208 	orr.w	r2, r3, #8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00f      	beq.n	8003d22 <HAL_UART_IRQHandler+0x14a>
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8093 	beq.w	8003e52 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d54:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d004      	beq.n	8003d6e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d031      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fd60 	bl	8004834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d123      	bne.n	8003dca <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d90:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d013      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9e:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <HAL_UART_IRQHandler+0x288>)
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd fc14 	bl	80015d4 <HAL_DMA_Abort_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00e      	b.n	8003de0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f858 	bl	8003e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00a      	b.n	8003de0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f854 	bl	8003e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e006      	b.n	8003de0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f850 	bl	8003e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003dde:	e038      	b.n	8003e52 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	bf00      	nop
    return;
 8003de2:	e036      	b.n	8003e52 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <HAL_UART_IRQHandler+0x232>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fd65 	bl	80048d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e08:	e026      	b.n	8003e58 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d017      	beq.n	8003e56 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
    }
    return;
 8003e2e:	e012      	b.n	8003e56 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00e      	beq.n	8003e58 <HAL_UART_IRQHandler+0x280>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fd2b 	bl	80048a0 <UART_EndTransmit_IT>
    return;
 8003e4a:	bf00      	nop
 8003e4c:	e004      	b.n	8003e58 <HAL_UART_IRQHandler+0x280>
      return;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_UART_IRQHandler+0x280>
    return;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_UART_IRQHandler+0x280>
    return;
 8003e56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	08004875 	.word	0x08004875

08003e64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e90:	b08a      	sub	sp, #40	; 0x28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4bb8      	ldr	r3, [pc, #736]	; (80041a4 <UART_SetConfig+0x318>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4aae      	ldr	r2, [pc, #696]	; (80041a8 <UART_SetConfig+0x31c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d004      	beq.n	8003efe <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	4313      	orrs	r3, r2
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4aa5      	ldr	r2, [pc, #660]	; (80041ac <UART_SetConfig+0x320>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d126      	bne.n	8003f6a <UART_SetConfig+0xde>
 8003f1c:	4ba4      	ldr	r3, [pc, #656]	; (80041b0 <UART_SetConfig+0x324>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d81a      	bhi.n	8003f60 <UART_SetConfig+0xd4>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0xa4>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f51 	.word	0x08003f51
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f59 	.word	0x08003f59
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f46:	e105      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4e:	e101      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003f50:	2304      	movs	r3, #4
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e0fd      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5e:	e0f9      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003f60:	2310      	movs	r3, #16
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f66:	bf00      	nop
 8003f68:	e0f4      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a91      	ldr	r2, [pc, #580]	; (80041b4 <UART_SetConfig+0x328>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d138      	bne.n	8003fe6 <UART_SetConfig+0x15a>
 8003f74:	4b8e      	ldr	r3, [pc, #568]	; (80041b0 <UART_SetConfig+0x324>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d82c      	bhi.n	8003fdc <UART_SetConfig+0x150>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0xfc>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003fdd 	.word	0x08003fdd
 8003f94:	08003fdd 	.word	0x08003fdd
 8003f98:	08003fcd 	.word	0x08003fcd
 8003f9c:	08003fdd 	.word	0x08003fdd
 8003fa0:	08003fdd 	.word	0x08003fdd
 8003fa4:	08003fdd 	.word	0x08003fdd
 8003fa8:	08003fc5 	.word	0x08003fc5
 8003fac:	08003fdd 	.word	0x08003fdd
 8003fb0:	08003fdd 	.word	0x08003fdd
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fd5 	.word	0x08003fd5
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc2:	e0c7      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e0c3      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e0bf      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e0bb      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	bf00      	nop
 8003fe4:	e0b6      	b.n	8004154 <UART_SetConfig+0x2c8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	; (80041b8 <UART_SetConfig+0x32c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d125      	bne.n	800403c <UART_SetConfig+0x1b0>
 8003ff0:	4b6f      	ldr	r3, [pc, #444]	; (80041b0 <UART_SetConfig+0x324>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d011      	beq.n	8004022 <UART_SetConfig+0x196>
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d802      	bhi.n	8004008 <UART_SetConfig+0x17c>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <UART_SetConfig+0x186>
 8004006:	e014      	b.n	8004032 <UART_SetConfig+0x1a6>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d006      	beq.n	800401a <UART_SetConfig+0x18e>
 800400c:	2b30      	cmp	r3, #48	; 0x30
 800400e:	d00c      	beq.n	800402a <UART_SetConfig+0x19e>
 8004010:	e00f      	b.n	8004032 <UART_SetConfig+0x1a6>
 8004012:	2300      	movs	r3, #0
 8004014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004018:	e09c      	b.n	8004154 <UART_SetConfig+0x2c8>
 800401a:	2302      	movs	r3, #2
 800401c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004020:	e098      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004022:	2304      	movs	r3, #4
 8004024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004028:	e094      	b.n	8004154 <UART_SetConfig+0x2c8>
 800402a:	2308      	movs	r3, #8
 800402c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004030:	e090      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004032:	2310      	movs	r3, #16
 8004034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004038:	bf00      	nop
 800403a:	e08b      	b.n	8004154 <UART_SetConfig+0x2c8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5e      	ldr	r2, [pc, #376]	; (80041bc <UART_SetConfig+0x330>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d125      	bne.n	8004092 <UART_SetConfig+0x206>
 8004046:	4b5a      	ldr	r3, [pc, #360]	; (80041b0 <UART_SetConfig+0x324>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d011      	beq.n	8004078 <UART_SetConfig+0x1ec>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d802      	bhi.n	800405e <UART_SetConfig+0x1d2>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <UART_SetConfig+0x1dc>
 800405c:	e014      	b.n	8004088 <UART_SetConfig+0x1fc>
 800405e:	2b80      	cmp	r3, #128	; 0x80
 8004060:	d006      	beq.n	8004070 <UART_SetConfig+0x1e4>
 8004062:	2bc0      	cmp	r3, #192	; 0xc0
 8004064:	d00c      	beq.n	8004080 <UART_SetConfig+0x1f4>
 8004066:	e00f      	b.n	8004088 <UART_SetConfig+0x1fc>
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e071      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004070:	2302      	movs	r3, #2
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e06d      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004078:	2304      	movs	r3, #4
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407e:	e069      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004080:	2308      	movs	r3, #8
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e065      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004088:	2310      	movs	r3, #16
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408e:	bf00      	nop
 8004090:	e060      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a4a      	ldr	r2, [pc, #296]	; (80041c0 <UART_SetConfig+0x334>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d129      	bne.n	80040f0 <UART_SetConfig+0x264>
 800409c:	4b44      	ldr	r3, [pc, #272]	; (80041b0 <UART_SetConfig+0x324>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040aa:	d014      	beq.n	80040d6 <UART_SetConfig+0x24a>
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b0:	d802      	bhi.n	80040b8 <UART_SetConfig+0x22c>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <UART_SetConfig+0x23a>
 80040b6:	e016      	b.n	80040e6 <UART_SetConfig+0x25a>
 80040b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040bc:	d007      	beq.n	80040ce <UART_SetConfig+0x242>
 80040be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c2:	d00c      	beq.n	80040de <UART_SetConfig+0x252>
 80040c4:	e00f      	b.n	80040e6 <UART_SetConfig+0x25a>
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040cc:	e042      	b.n	8004154 <UART_SetConfig+0x2c8>
 80040ce:	2302      	movs	r3, #2
 80040d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d4:	e03e      	b.n	8004154 <UART_SetConfig+0x2c8>
 80040d6:	2304      	movs	r3, #4
 80040d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040dc:	e03a      	b.n	8004154 <UART_SetConfig+0x2c8>
 80040de:	2308      	movs	r3, #8
 80040e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e4:	e036      	b.n	8004154 <UART_SetConfig+0x2c8>
 80040e6:	2310      	movs	r3, #16
 80040e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ec:	bf00      	nop
 80040ee:	e031      	b.n	8004154 <UART_SetConfig+0x2c8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <UART_SetConfig+0x31c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d129      	bne.n	800414e <UART_SetConfig+0x2c2>
 80040fa:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <UART_SetConfig+0x324>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004108:	d014      	beq.n	8004134 <UART_SetConfig+0x2a8>
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d802      	bhi.n	8004116 <UART_SetConfig+0x28a>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <UART_SetConfig+0x298>
 8004114:	e016      	b.n	8004144 <UART_SetConfig+0x2b8>
 8004116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411a:	d007      	beq.n	800412c <UART_SetConfig+0x2a0>
 800411c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004120:	d00c      	beq.n	800413c <UART_SetConfig+0x2b0>
 8004122:	e00f      	b.n	8004144 <UART_SetConfig+0x2b8>
 8004124:	2300      	movs	r3, #0
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412a:	e013      	b.n	8004154 <UART_SetConfig+0x2c8>
 800412c:	2302      	movs	r3, #2
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004132:	e00f      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004134:	2304      	movs	r3, #4
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413a:	e00b      	b.n	8004154 <UART_SetConfig+0x2c8>
 800413c:	2308      	movs	r3, #8
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004142:	e007      	b.n	8004154 <UART_SetConfig+0x2c8>
 8004144:	2310      	movs	r3, #16
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <UART_SetConfig+0x2c8>
 800414e:	2310      	movs	r3, #16
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <UART_SetConfig+0x31c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	f040 80fe 	bne.w	800435c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004164:	2b08      	cmp	r3, #8
 8004166:	d837      	bhi.n	80041d8 <UART_SetConfig+0x34c>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0x2e4>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004195 	.word	0x08004195
 8004174:	080041d9 	.word	0x080041d9
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041d9 	.word	0x080041d9
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041d9 	.word	0x080041d9
 8004188:	080041d9 	.word	0x080041d9
 800418c:	080041d9 	.word	0x080041d9
 8004190:	080041d1 	.word	0x080041d1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004194:	f7fe f9f2 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8004198:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800419a:	e020      	b.n	80041de <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <UART_SetConfig+0x338>)
 800419e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041a0:	e01d      	b.n	80041de <UART_SetConfig+0x352>
 80041a2:	bf00      	nop
 80041a4:	efff69f3 	.word	0xefff69f3
 80041a8:	40008000 	.word	0x40008000
 80041ac:	40013800 	.word	0x40013800
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40004400 	.word	0x40004400
 80041b8:	40004800 	.word	0x40004800
 80041bc:	40004c00 	.word	0x40004c00
 80041c0:	40005000 	.word	0x40005000
 80041c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80041c8:	f7fe f942 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 80041cc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041ce:	e006      	b.n	80041de <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80041d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041d6:	e002      	b.n	80041de <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	76fb      	strb	r3, [r7, #27]
        break;
 80041dc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 81b9 	beq.w	8004558 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d305      	bcc.n	8004202 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d902      	bls.n	8004208 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e1a7      	b.n	8004558 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800420c:	2b08      	cmp	r3, #8
 800420e:	f200 8092 	bhi.w	8004336 <UART_SetConfig+0x4aa>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <UART_SetConfig+0x38c>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800423d 	.word	0x0800423d
 800421c:	08004337 	.word	0x08004337
 8004220:	0800428b 	.word	0x0800428b
 8004224:	08004337 	.word	0x08004337
 8004228:	080042bf 	.word	0x080042bf
 800422c:	08004337 	.word	0x08004337
 8004230:	08004337 	.word	0x08004337
 8004234:	08004337 	.word	0x08004337
 8004238:	0800430d 	.word	0x0800430d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fe f99e 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8004240:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4619      	mov	r1, r3
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f04f 0400 	mov.w	r4, #0
 8004252:	0214      	lsls	r4, r2, #8
 8004254:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004258:	020b      	lsls	r3, r1, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6852      	ldr	r2, [r2, #4]
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	4611      	mov	r1, r2
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	eb13 0b01 	adds.w	fp, r3, r1
 800426a:	eb44 0c02 	adc.w	ip, r4, r2
 800426e:	4658      	mov	r0, fp
 8004270:	4661      	mov	r1, ip
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f04f 0400 	mov.w	r4, #0
 800427a:	461a      	mov	r2, r3
 800427c:	4623      	mov	r3, r4
 800427e:	f7fb ffff 	bl	8000280 <__aeabi_uldivmod>
 8004282:	4603      	mov	r3, r0
 8004284:	460c      	mov	r4, r1
 8004286:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004288:	e058      	b.n	800433c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	f04f 0400 	mov.w	r4, #0
 8004294:	49ae      	ldr	r1, [pc, #696]	; (8004550 <UART_SetConfig+0x6c4>)
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	eb13 0b01 	adds.w	fp, r3, r1
 800429e:	eb44 0c02 	adc.w	ip, r4, r2
 80042a2:	4658      	mov	r0, fp
 80042a4:	4661      	mov	r1, ip
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f04f 0400 	mov.w	r4, #0
 80042ae:	461a      	mov	r2, r3
 80042b0:	4623      	mov	r3, r4
 80042b2:	f7fb ffe5 	bl	8000280 <__aeabi_uldivmod>
 80042b6:	4603      	mov	r3, r0
 80042b8:	460c      	mov	r4, r1
 80042ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80042bc:	e03e      	b.n	800433c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80042be:	f7fe f8c7 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 80042c2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4619      	mov	r1, r3
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	0214      	lsls	r4, r2, #8
 80042d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042da:	020b      	lsls	r3, r1, #8
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6852      	ldr	r2, [r2, #4]
 80042e0:	0852      	lsrs	r2, r2, #1
 80042e2:	4611      	mov	r1, r2
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	eb13 0b01 	adds.w	fp, r3, r1
 80042ec:	eb44 0c02 	adc.w	ip, r4, r2
 80042f0:	4658      	mov	r0, fp
 80042f2:	4661      	mov	r1, ip
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f04f 0400 	mov.w	r4, #0
 80042fc:	461a      	mov	r2, r3
 80042fe:	4623      	mov	r3, r4
 8004300:	f7fb ffbe 	bl	8000280 <__aeabi_uldivmod>
 8004304:	4603      	mov	r3, r0
 8004306:	460c      	mov	r4, r1
 8004308:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800430a:	e017      	b.n	800433c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800431a:	f144 0100 	adc.w	r1, r4, #0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f04f 0400 	mov.w	r4, #0
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	f7fb ffa9 	bl	8000280 <__aeabi_uldivmod>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004334:	e002      	b.n	800433c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	76fb      	strb	r3, [r7, #27]
            break;
 800433a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004342:	d308      	bcc.n	8004356 <UART_SetConfig+0x4ca>
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434a:	d204      	bcs.n	8004356 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	e100      	b.n	8004558 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	76fb      	strb	r3, [r7, #27]
 800435a:	e0fd      	b.n	8004558 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	f040 8084 	bne.w	8004470 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800436c:	2b08      	cmp	r3, #8
 800436e:	d85f      	bhi.n	8004430 <UART_SetConfig+0x5a4>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0x4ec>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043bd 	.word	0x080043bd
 8004380:	080043dd 	.word	0x080043dd
 8004384:	08004431 	.word	0x08004431
 8004388:	080043f9 	.word	0x080043f9
 800438c:	08004431 	.word	0x08004431
 8004390:	08004431 	.word	0x08004431
 8004394:	08004431 	.word	0x08004431
 8004398:	08004419 	.word	0x08004419
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe f8ee 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 80043a0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	005a      	lsls	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ba:	e03c      	b.n	8004436 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7fe f8f4 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 80043c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043da:	e02c      	b.n	8004436 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80043e6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6852      	ldr	r2, [r2, #4]
 80043ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043f6:	e01e      	b.n	8004436 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f8:	f7fe f82a 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 80043fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	005a      	lsls	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	b29b      	uxth	r3, r3
 8004414:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004416:	e00e      	b.n	8004436 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	b29b      	uxth	r3, r3
 800442c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800442e:	e002      	b.n	8004436 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	76fb      	strb	r3, [r7, #27]
        break;
 8004434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2b0f      	cmp	r3, #15
 800443a:	d916      	bls.n	800446a <UART_SetConfig+0x5de>
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004442:	d212      	bcs.n	800446a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f023 030f 	bic.w	r3, r3, #15
 800444c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	b29b      	uxth	r3, r3
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	b29a      	uxth	r2, r3
 800445a:	89fb      	ldrh	r3, [r7, #14]
 800445c:	4313      	orrs	r3, r2
 800445e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	89fa      	ldrh	r2, [r7, #14]
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	e076      	b.n	8004558 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e073      	b.n	8004558 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004474:	2b08      	cmp	r3, #8
 8004476:	d85c      	bhi.n	8004532 <UART_SetConfig+0x6a6>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0x5f4>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044c3 	.word	0x080044c3
 8004488:	080044e1 	.word	0x080044e1
 800448c:	08004533 	.word	0x08004533
 8004490:	080044fd 	.word	0x080044fd
 8004494:	08004533 	.word	0x08004533
 8004498:	08004533 	.word	0x08004533
 800449c:	08004533 	.word	0x08004533
 80044a0:	0800451b 	.word	0x0800451b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fe f86a 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 80044a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	085a      	lsrs	r2, r3, #1
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	441a      	add	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	b29b      	uxth	r3, r3
 80044be:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044c0:	e03a      	b.n	8004538 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c2:	f7fe f871 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 80044c6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	085a      	lsrs	r2, r3, #1
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	441a      	add	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	b29b      	uxth	r3, r3
 80044dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044de:	e02b      	b.n	8004538 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80044ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6852      	ldr	r2, [r2, #4]
 80044f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044fa:	e01d      	b.n	8004538 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fc:	f7fd ffa8 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8004500:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	085a      	lsrs	r2, r3, #1
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	441a      	add	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	b29b      	uxth	r3, r3
 8004516:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004518:	e00e      	b.n	8004538 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	b29b      	uxth	r3, r3
 800452e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004530:	e002      	b.n	8004538 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	76fb      	strb	r3, [r7, #27]
        break;
 8004536:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	d90a      	bls.n	8004554 <UART_SetConfig+0x6c8>
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004544:	d206      	bcs.n	8004554 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e003      	b.n	8004558 <UART_SetConfig+0x6cc>
 8004550:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004564:	7efb      	ldrb	r3, [r7, #27]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3728      	adds	r7, #40	; 0x28
 800456a:	46bd      	mov	sp, r7
 800456c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01a      	beq.n	8004686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d10a      	bne.n	8004686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046c2:	f7fc fe99 	bl	80013f8 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d10e      	bne.n	80046f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f82a 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e020      	b.n	8004736 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d10e      	bne.n	8004720 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004702:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f814 	bl	800473e <UART_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e00a      	b.n	8004736 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	e05d      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d059      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004758:	f7fc fe4e 	bl	80013f8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d302      	bcc.n	800476e <UART_WaitOnFlagUntilTimeout+0x30>
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d11b      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800477c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e042      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02b      	beq.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c2:	d123      	bne.n	800480c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047cc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047dc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00f      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	429a      	cmp	r2, r3
 8004828:	d092      	beq.n	8004750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800484a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff faf0 	bl	8003e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff facd 	bl	8003e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fa:	f3ef 8305 	mrs	r3, IPSR
 80048fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004900:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	607b      	str	r3, [r7, #4]
  return(result);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004912:	f3ef 8311 	mrs	r3, BASEPRI
 8004916:	603b      	str	r3, [r7, #0]
  return(result);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <osKernelInitialize+0x3a>
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <osKernelInitialize+0x64>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d103      	bne.n	800492e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004926:	f06f 0305 	mvn.w	r3, #5
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e00c      	b.n	8004948 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800492e:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <osKernelInitialize+0x64>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004936:	4b08      	ldr	r3, [pc, #32]	; (8004958 <osKernelInitialize+0x64>)
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e002      	b.n	8004948 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	200000b0 	.word	0x200000b0

0800495c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004962:	f3ef 8305 	mrs	r3, IPSR
 8004966:	60bb      	str	r3, [r7, #8]
  return(result);
 8004968:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10f      	bne.n	800498e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496e:	f3ef 8310 	mrs	r3, PRIMASK
 8004972:	607b      	str	r3, [r7, #4]
  return(result);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800497a:	f3ef 8311 	mrs	r3, BASEPRI
 800497e:	603b      	str	r3, [r7, #0]
  return(result);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <osKernelStart+0x3a>
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <osKernelStart+0x68>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d103      	bne.n	8004996 <osKernelStart+0x3a>
    stat = osErrorISR;
 800498e:	f06f 0305 	mvn.w	r3, #5
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e010      	b.n	80049b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <osKernelStart+0x68>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d109      	bne.n	80049b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800499e:	f7ff ffa2 	bl	80048e6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <osKernelStart+0x68>)
 80049a4:	2202      	movs	r2, #2
 80049a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049a8:	f001 fdd0 	bl	800654c <vTaskStartScheduler>
      stat = osOK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e002      	b.n	80049b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	200000b0 	.word	0x200000b0

080049c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b090      	sub	sp, #64	; 0x40
 80049cc:	af04      	add	r7, sp, #16
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d8:	f3ef 8305 	mrs	r3, IPSR
 80049dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80049de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 808f 	bne.w	8004b04 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d105      	bne.n	80049fe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049f2:	f3ef 8311 	mrs	r3, BASEPRI
 80049f6:	617b      	str	r3, [r7, #20]
  return(result);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <osThreadNew+0x3e>
 80049fe:	4b44      	ldr	r3, [pc, #272]	; (8004b10 <osThreadNew+0x148>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d07e      	beq.n	8004b04 <osThreadNew+0x13c>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d07b      	beq.n	8004b04 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a10:	2318      	movs	r3, #24
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d045      	beq.n	8004ab0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <osThreadNew+0x6a>
        name = attr->name;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <osThreadNew+0x90>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	2b38      	cmp	r3, #56	; 0x38
 8004a4a:	d805      	bhi.n	8004a58 <osThreadNew+0x90>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <osThreadNew+0x94>
        return (NULL);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e054      	b.n	8004b06 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	089b      	lsrs	r3, r3, #2
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00e      	beq.n	8004a92 <osThreadNew+0xca>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b5b      	cmp	r3, #91	; 0x5b
 8004a7a:	d90a      	bls.n	8004a92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <osThreadNew+0xca>
        mem = 1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	623b      	str	r3, [r7, #32]
 8004a90:	e010      	b.n	8004ab4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10c      	bne.n	8004ab4 <osThreadNew+0xec>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d108      	bne.n	8004ab4 <osThreadNew+0xec>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <osThreadNew+0xec>
          mem = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	e001      	b.n	8004ab4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d110      	bne.n	8004adc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ac2:	9202      	str	r2, [sp, #8]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f001 fb65 	bl	80061a0 <xTaskCreateStatic>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e013      	b.n	8004b04 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d110      	bne.n	8004b04 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f107 0310 	add.w	r3, r7, #16
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f001 fbad 	bl	8006254 <xTaskCreate>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d001      	beq.n	8004b04 <osThreadNew+0x13c>
          hTask = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b04:	693b      	ldr	r3, [r7, #16]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200000b0 	.word	0x200000b0

08004b14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1c:	f3ef 8305 	mrs	r3, IPSR
 8004b20:	613b      	str	r3, [r7, #16]
  return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b28:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b34:	f3ef 8311 	mrs	r3, BASEPRI
 8004b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <osDelay+0x3c>
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <osDelay+0x58>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d103      	bne.n	8004b50 <osDelay+0x3c>
    stat = osErrorISR;
 8004b48:	f06f 0305 	mvn.w	r3, #5
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e007      	b.n	8004b60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f001 fcc2 	bl	80064e4 <vTaskDelay>
    }
  }

  return (stat);
 8004b60:	697b      	ldr	r3, [r7, #20]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	200000b0 	.word	0x200000b0

08004b70 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b7c:	f3ef 8305 	mrs	r3, IPSR
 8004b80:	613b      	str	r3, [r7, #16]
  return(result);
 8004b82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 8085 	bne.w	8004c94 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b96:	f3ef 8311 	mrs	r3, BASEPRI
 8004b9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <osMutexNew+0x3a>
 8004ba2:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <osMutexNew+0x130>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d074      	beq.n	8004c94 <osMutexNew+0x124>
    if (attr != NULL) {
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	e001      	b.n	8004bbc <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <osMutexNew+0x5c>
      rmtx = 1U;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	e001      	b.n	8004bd0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d15c      	bne.n	8004c94 <osMutexNew+0x124>
      mem = -1;
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295
 8004bde:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d015      	beq.n	8004c12 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <osMutexNew+0x8c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b4f      	cmp	r3, #79	; 0x4f
 8004bf4:	d902      	bls.n	8004bfc <osMutexNew+0x8c>
          mem = 1;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e00c      	b.n	8004c16 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d108      	bne.n	8004c16 <osMutexNew+0xa6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <osMutexNew+0xa6>
            mem = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e001      	b.n	8004c16 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d112      	bne.n	8004c42 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4619      	mov	r1, r3
 8004c28:	2004      	movs	r0, #4
 8004c2a:	f000 fbee 	bl	800540a <xQueueCreateMutexStatic>
 8004c2e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c30:	e016      	b.n	8004c60 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4619      	mov	r1, r3
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f000 fbe6 	bl	800540a <xQueueCreateMutexStatic>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c40:	e00e      	b.n	8004c60 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004c4e:	2004      	movs	r0, #4
 8004c50:	f000 fbc3 	bl	80053da <xQueueCreateMutex>
 8004c54:	6278      	str	r0, [r7, #36]	; 0x24
 8004c56:	e003      	b.n	8004c60 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f000 fbbe 	bl	80053da <xQueueCreateMutex>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <osMutexNew+0x110>
        if (attr != NULL) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <osMutexNew+0x104>
          name = attr->name;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e001      	b.n	8004c78 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c7c:	f001 fa0a 	bl	8006094 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <osMutexNew+0x124>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3728      	adds	r7, #40	; 0x28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200000b0 	.word	0x200000b0

08004ca4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb4:	f3ef 8305 	mrs	r3, IPSR
 8004cb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 8087 	bne.w	8004dd0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc6:	617b      	str	r3, [r7, #20]
  return(result);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d105      	bne.n	8004cda <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cce:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd2:	613b      	str	r3, [r7, #16]
  return(result);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <osSemaphoreNew+0x3e>
 8004cda:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <osSemaphoreNew+0x138>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d076      	beq.n	8004dd0 <osSemaphoreNew+0x12c>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d073      	beq.n	8004dd0 <osSemaphoreNew+0x12c>
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d86f      	bhi.n	8004dd0 <osSemaphoreNew+0x12c>
    mem = -1;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <osSemaphoreNew+0x6e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b4f      	cmp	r3, #79	; 0x4f
 8004d0a:	d902      	bls.n	8004d12 <osSemaphoreNew+0x6e>
        mem = 1;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	623b      	str	r3, [r7, #32]
 8004d10:	e00c      	b.n	8004d2c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d108      	bne.n	8004d2c <osSemaphoreNew+0x88>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <osSemaphoreNew+0x88>
          mem = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	e001      	b.n	8004d2c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d04d      	beq.n	8004dd0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d129      	bne.n	8004d8e <osSemaphoreNew+0xea>
        if (mem == 1) {
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10b      	bne.n	8004d58 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	2303      	movs	r3, #3
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	2001      	movs	r0, #1
 8004d50:	f000 fa54 	bl	80051fc <xQueueGenericCreateStatic>
 8004d54:	6278      	str	r0, [r7, #36]	; 0x24
 8004d56:	e005      	b.n	8004d64 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004d58:	2203      	movs	r2, #3
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	f000 fac0 	bl	80052e2 <xQueueGenericCreate>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d022      	beq.n	8004db0 <osSemaphoreNew+0x10c>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01f      	beq.n	8004db0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d70:	2300      	movs	r3, #0
 8004d72:	2200      	movs	r2, #0
 8004d74:	2100      	movs	r1, #0
 8004d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d78:	f000 fbc8 	bl	800550c <xQueueGenericSend>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d016      	beq.n	8004db0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8004d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d84:	f001 f83b 	bl	8005dfe <vQueueDelete>
            hSemaphore = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8c:	e010      	b.n	8004db0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d108      	bne.n	8004da6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fb4f 	bl	8005440 <xQueueCreateCountingSemaphoreStatic>
 8004da2:	6278      	str	r0, [r7, #36]	; 0x24
 8004da4:	e004      	b.n	8004db0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fb7e 	bl	80054aa <xQueueCreateCountingSemaphore>
 8004dae:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00c      	beq.n	8004dd0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <osSemaphoreNew+0x120>
          name = attr->name;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e001      	b.n	8004dc8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004dc8:	69f9      	ldr	r1, [r7, #28]
 8004dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dcc:	f001 f962 	bl	8006094 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3728      	adds	r7, #40	; 0x28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200000b0 	.word	0x200000b0

08004de0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004df8:	f06f 0303 	mvn.w	r3, #3
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	e04b      	b.n	8004e98 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e00:	f3ef 8305 	mrs	r3, IPSR
 8004e04:	617b      	str	r3, [r7, #20]
  return(result);
 8004e06:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e10:	613b      	str	r3, [r7, #16]
  return(result);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e18:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d026      	beq.n	8004e72 <osSemaphoreAcquire+0x92>
 8004e24:	4b1f      	ldr	r3, [pc, #124]	; (8004ea4 <osSemaphoreAcquire+0xc4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d122      	bne.n	8004e72 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004e32:	f06f 0303 	mvn.w	r3, #3
 8004e36:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004e38:	e02d      	b.n	8004e96 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	461a      	mov	r2, r3
 8004e44:	2100      	movs	r1, #0
 8004e46:	69b8      	ldr	r0, [r7, #24]
 8004e48:	f000 ff5c 	bl	8005d04 <xQueueReceiveFromISR>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d003      	beq.n	8004e5a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004e52:	f06f 0302 	mvn.w	r3, #2
 8004e56:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004e58:	e01d      	b.n	8004e96 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <osSemaphoreAcquire+0xb6>
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <osSemaphoreAcquire+0xc8>)
 8004e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004e70:	e011      	b.n	8004e96 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	69b8      	ldr	r0, [r7, #24]
 8004e76:	f000 fe3d 	bl	8005af4 <xQueueSemaphoreTake>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d00b      	beq.n	8004e98 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004e86:	f06f 0301 	mvn.w	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e004      	b.n	8004e98 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004e8e:	f06f 0302 	mvn.w	r3, #2
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e000      	b.n	8004e98 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004e96:	bf00      	nop
      }
    }
  }

  return (stat);
 8004e98:	69fb      	ldr	r3, [r7, #28]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200000b0 	.word	0x200000b0
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004ec2:	f06f 0303 	mvn.w	r3, #3
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e03e      	b.n	8004f48 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eca:	f3ef 8305 	mrs	r3, IPSR
 8004ece:	617b      	str	r3, [r7, #20]
  return(result);
 8004ed0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eda:	613b      	str	r3, [r7, #16]
  return(result);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01e      	beq.n	8004f2c <osSemaphoreRelease+0x80>
 8004eee:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <osSemaphoreRelease+0xa8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d11a      	bne.n	8004f2c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004efa:	f107 0308 	add.w	r3, r7, #8
 8004efe:	4619      	mov	r1, r3
 8004f00:	69b8      	ldr	r0, [r7, #24]
 8004f02:	f000 fc91 	bl	8005828 <xQueueGiveFromISR>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d003      	beq.n	8004f14 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004f0c:	f06f 0302 	mvn.w	r3, #2
 8004f10:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f12:	e018      	b.n	8004f46 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d015      	beq.n	8004f46 <osSemaphoreRelease+0x9a>
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <osSemaphoreRelease+0xac>)
 8004f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f2a:	e00c      	b.n	8004f46 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2100      	movs	r1, #0
 8004f32:	69b8      	ldr	r0, [r7, #24]
 8004f34:	f000 faea 	bl	800550c <xQueueGenericSend>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d004      	beq.n	8004f48 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004f3e:	f06f 0302 	mvn.w	r3, #2
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	e000      	b.n	8004f48 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f46:	bf00      	nop
    }
  }

  return (stat);
 8004f48:	69fb      	ldr	r3, [r7, #28]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200000b0 	.word	0x200000b0
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <vApplicationGetIdleTaskMemory+0x30>)
 8004f72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	200000b4 	.word	0x200000b4
 8004f8c:	20000110 	.word	0x20000110

08004f90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a07      	ldr	r2, [pc, #28]	; (8004fbc <vApplicationGetTimerTaskMemory+0x2c>)
 8004fa0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <vApplicationGetTimerTaskMemory+0x30>)
 8004fa6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fae:	601a      	str	r2, [r3, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20000310 	.word	0x20000310
 8004fc0:	2000036c 	.word	0x2000036c

08004fc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f103 0208 	add.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f103 0208 	add.w	r2, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f103 0208 	add.w	r2, r3, #8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800501e:	b480      	push	{r7}
 8005020:	b085      	sub	sp, #20
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d103      	bne.n	8005086 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e00c      	b.n	80050a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3308      	adds	r3, #8
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e002      	b.n	8005094 <vListInsert+0x2e>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	429a      	cmp	r2, r3
 800509e:	d2f6      	bcs.n	800508e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	601a      	str	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6852      	ldr	r2, [r2, #4]
 80050f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d103      	bne.n	800510c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	e7fe      	b.n	8005152 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005154:	f002 fc8a 	bl	8007a6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	441a      	add	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	3b01      	subs	r3, #1
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800518a:	fb01 f303 	mul.w	r3, r1, r3
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	22ff      	movs	r2, #255	; 0xff
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	22ff      	movs	r2, #255	; 0xff
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d114      	bne.n	80051d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01a      	beq.n	80051e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3310      	adds	r3, #16
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fc48 	bl	8006a4c <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d012      	beq.n	80051e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <xQueueGenericReset+0xcc>)
 80051c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	e009      	b.n	80051e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3310      	adds	r3, #16
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fef3 	bl	8004fc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff feee 	bl	8004fc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051e8:	f002 fc6e 	bl	8007ac8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051ec:	2301      	movs	r3, #1
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08e      	sub	sp, #56	; 0x38
 8005200:	af02      	add	r7, sp, #8
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <xQueueGenericCreateStatic+0x28>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	e7fe      	b.n	8005222 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <xQueueGenericCreateStatic+0x42>
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
 800523c:	e7fe      	b.n	800523c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <xQueueGenericCreateStatic+0x4e>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <xQueueGenericCreateStatic+0x52>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericCreateStatic+0x54>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <xQueueGenericCreateStatic+0x6c>
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	623b      	str	r3, [r7, #32]
 8005266:	e7fe      	b.n	8005266 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <xQueueGenericCreateStatic+0x78>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <xQueueGenericCreateStatic+0x7c>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <xQueueGenericCreateStatic+0x7e>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <xQueueGenericCreateStatic+0x96>
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005292:	2350      	movs	r3, #80	; 0x50
 8005294:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b50      	cmp	r3, #80	; 0x50
 800529a:	d009      	beq.n	80052b0 <xQueueGenericCreateStatic+0xb4>
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e7fe      	b.n	80052ae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f844 	bl	8005360 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052da:	4618      	mov	r0, r3
 80052dc:	3730      	adds	r7, #48	; 0x30
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b08a      	sub	sp, #40	; 0x28
 80052e6:	af02      	add	r7, sp, #8
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <xQueueGenericCreate+0x28>
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	e7fe      	b.n	8005308 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d102      	bne.n	8005316 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	e004      	b.n	8005320 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3350      	adds	r3, #80	; 0x50
 8005324:	4618      	mov	r0, r3
 8005326:	f002 fcbb 	bl	8007ca0 <pvPortMalloc>
 800532a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d011      	beq.n	8005356 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	3350      	adds	r3, #80	; 0x50
 800533a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005344:	79fa      	ldrb	r2, [r7, #7]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f805 	bl	8005360 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005356:	69bb      	ldr	r3, [r7, #24]
	}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e002      	b.n	8005382 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800538e:	2101      	movs	r1, #1
 8005390:	69b8      	ldr	r0, [r7, #24]
 8005392:	f7ff fecb 	bl	800512c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00e      	beq.n	80053d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80053c6:	2300      	movs	r3, #0
 80053c8:	2200      	movs	r2, #0
 80053ca:	2100      	movs	r1, #0
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f89d 	bl	800550c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053e4:	2301      	movs	r3, #1
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	461a      	mov	r2, r3
 80053f0:	6939      	ldr	r1, [r7, #16]
 80053f2:	6978      	ldr	r0, [r7, #20]
 80053f4:	f7ff ff75 	bl	80052e2 <xQueueGenericCreate>
 80053f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff ffd3 	bl	80053a6 <prvInitialiseMutex>

		return xNewQueue;
 8005400:	68fb      	ldr	r3, [r7, #12]
	}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800540a:	b580      	push	{r7, lr}
 800540c:	b088      	sub	sp, #32
 800540e:	af02      	add	r7, sp, #8
 8005410:	4603      	mov	r3, r0
 8005412:	6039      	str	r1, [r7, #0]
 8005414:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005416:	2301      	movs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	2300      	movs	r3, #0
 800541c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2200      	movs	r2, #0
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	6978      	ldr	r0, [r7, #20]
 800542a:	f7ff fee7 	bl	80051fc <xQueueGenericCreateStatic>
 800542e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7ff ffb8 	bl	80053a6 <prvInitialiseMutex>

		return xNewQueue;
 8005436:	68fb      	ldr	r3, [r7, #12]
	}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <xQueueCreateCountingSemaphoreStatic+0x26>
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	e7fe      	b.n	8005464 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	429a      	cmp	r2, r3
 800546c:	d909      	bls.n	8005482 <xQueueCreateCountingSemaphoreStatic+0x42>
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e7fe      	b.n	8005480 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005482:	2302      	movs	r3, #2
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	2100      	movs	r1, #0
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff feb5 	bl	80051fc <xQueueGenericCreateStatic>
 8005492:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054a0:	69fb      	ldr	r3, [r7, #28]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b086      	sub	sp, #24
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <xQueueCreateCountingSemaphore+0x24>
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e7fe      	b.n	80054cc <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d909      	bls.n	80054ea <xQueueCreateCountingSemaphore+0x40>
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e7fe      	b.n	80054e8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054ea:	2202      	movs	r2, #2
 80054ec:	2100      	movs	r1, #0
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fef7 	bl	80052e2 <xQueueGenericCreate>
 80054f4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005502:	697b      	ldr	r3, [r7, #20]
	}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08e      	sub	sp, #56	; 0x38
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <xQueueGenericSend+0x30>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	62bb      	str	r3, [r7, #40]	; 0x28
 800553a:	e7fe      	b.n	800553a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d103      	bne.n	800554a <xQueueGenericSend+0x3e>
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <xQueueGenericSend+0x42>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <xQueueGenericSend+0x44>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <xQueueGenericSend+0x5c>
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	e7fe      	b.n	8005566 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d103      	bne.n	8005576 <xQueueGenericSend+0x6a>
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <xQueueGenericSend+0x6e>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <xQueueGenericSend+0x70>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <xQueueGenericSend+0x88>
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	e7fe      	b.n	8005592 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005594:	f001 fc20 	bl	8006dd8 <xTaskGetSchedulerState>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <xQueueGenericSend+0x98>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <xQueueGenericSend+0x9c>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <xQueueGenericSend+0x9e>
 80055a8:	2300      	movs	r3, #0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <xQueueGenericSend+0xb6>
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055c2:	f002 fa53 	bl	8007a6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <xQueueGenericSend+0xcc>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d129      	bne.n	800562c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055de:	f000 fc48 	bl	8005e72 <prvCopyDataToQueue>
 80055e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	3324      	adds	r3, #36	; 0x24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fa2b 	bl	8006a4c <xTaskRemoveFromEventList>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d013      	beq.n	8005624 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055fc:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <xQueueGenericSend+0x1f0>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	e00a      	b.n	8005624 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005614:	4b39      	ldr	r3, [pc, #228]	; (80056fc <xQueueGenericSend+0x1f0>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005624:	f002 fa50 	bl	8007ac8 <vPortExitCritical>
				return pdPASS;
 8005628:	2301      	movs	r3, #1
 800562a:	e063      	b.n	80056f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005632:	f002 fa49 	bl	8007ac8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005636:	2300      	movs	r3, #0
 8005638:	e05c      	b.n	80056f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	4618      	mov	r0, r3
 8005646:	f001 fa63 	bl	8006b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800564a:	2301      	movs	r3, #1
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800564e:	f002 fa3b 	bl	8007ac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005652:	f000 ffdf 	bl	8006614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005656:	f002 fa09 	bl	8007a6c <vPortEnterCritical>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005660:	b25b      	sxtb	r3, r3
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d103      	bne.n	8005670 <xQueueGenericSend+0x164>
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d103      	bne.n	8005686 <xQueueGenericSend+0x17a>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005686:	f002 fa1f 	bl	8007ac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800568a:	1d3a      	adds	r2, r7, #4
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f001 fa52 	bl	8006b3c <xTaskCheckForTimeOut>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d124      	bne.n	80056e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800569e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056a0:	f000 fcdf 	bl	8006062 <prvIsQueueFull>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	3310      	adds	r3, #16
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 f97c 	bl	80069b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ba:	f000 fc6a 	bl	8005f92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056be:	f000 ffb7 	bl	8006630 <xTaskResumeAll>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f47f af7c 	bne.w	80055c2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <xQueueGenericSend+0x1f0>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	e772      	b.n	80055c2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056de:	f000 fc58 	bl	8005f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056e2:	f000 ffa5 	bl	8006630 <xTaskResumeAll>
 80056e6:	e76c      	b.n	80055c2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ea:	f000 fc52 	bl	8005f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ee:	f000 ff9f 	bl	8006630 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3738      	adds	r7, #56	; 0x38
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08e      	sub	sp, #56	; 0x38
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <xQueueGenericSendFromISR+0x2c>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	e7fe      	b.n	800572a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d103      	bne.n	800573a <xQueueGenericSendFromISR+0x3a>
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <xQueueGenericSendFromISR+0x3e>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <xQueueGenericSendFromISR+0x40>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <xQueueGenericSendFromISR+0x58>
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	e7fe      	b.n	8005756 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d103      	bne.n	8005766 <xQueueGenericSendFromISR+0x66>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <xQueueGenericSendFromISR+0x6a>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <xQueueGenericSendFromISR+0x6c>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <xQueueGenericSendFromISR+0x84>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	e7fe      	b.n	8005782 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005784:	f002 fa4e 	bl	8007c24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005788:	f3ef 8211 	mrs	r2, BASEPRI
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	61ba      	str	r2, [r7, #24]
 800579e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <xQueueGenericSendFromISR+0xb6>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d12c      	bne.n	8005810 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c6:	f000 fb54 	bl	8005e72 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d112      	bne.n	80057fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d016      	beq.n	800580a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 f933 	bl	8006a4c <xTaskRemoveFromEventList>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e007      	b.n	800580a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057fe:	3301      	adds	r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	b25a      	sxtb	r2, r3
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800580a:	2301      	movs	r3, #1
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800580e:	e001      	b.n	8005814 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005810:	2300      	movs	r3, #0
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005820:	4618      	mov	r0, r3
 8005822:	3738      	adds	r7, #56	; 0x38
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08e      	sub	sp, #56	; 0x38
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <xQueueGiveFromISR+0x28>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	623b      	str	r3, [r7, #32]
 800584e:	e7fe      	b.n	800584e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <xQueueGiveFromISR+0x44>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e7fe      	b.n	800586a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <xQueueGiveFromISR+0x54>
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <xQueueGiveFromISR+0x58>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <xQueueGiveFromISR+0x5a>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <xQueueGiveFromISR+0x72>
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e7fe      	b.n	8005898 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800589a:	f002 f9c3 	bl	8007c24 <vPortValidateInterruptPriority>
	__asm volatile
 800589e:	f3ef 8211 	mrs	r2, BASEPRI
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	617a      	str	r2, [r7, #20]
 80058b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80058b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d22b      	bcs.n	8005922 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d112      	bne.n	800590c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d016      	beq.n	800591c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	3324      	adds	r3, #36	; 0x24
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 f8aa 	bl	8006a4c <xTaskRemoveFromEventList>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e007      	b.n	800591c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800590c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005910:	3301      	adds	r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	b25a      	sxtb	r2, r3
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800591c:	2301      	movs	r3, #1
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
 8005920:	e001      	b.n	8005926 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005932:	4618      	mov	r0, r3
 8005934:	3738      	adds	r7, #56	; 0x38
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <xQueueReceive+0x2e>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	623b      	str	r3, [r7, #32]
 8005968:	e7fe      	b.n	8005968 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <xQueueReceive+0x3c>
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <xQueueReceive+0x40>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <xQueueReceive+0x42>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <xQueueReceive+0x5a>
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e7fe      	b.n	8005994 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005996:	f001 fa1f 	bl	8006dd8 <xTaskGetSchedulerState>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xQueueReceive+0x6a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <xQueueReceive+0x6e>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueReceive+0x70>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <xQueueReceive+0x88>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e7fe      	b.n	80059c2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059c4:	f002 f852 	bl	8007a6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01f      	beq.n	8005a14 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d8:	f000 fab5 	bl	8005f46 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00f      	beq.n	8005a0c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	3310      	adds	r3, #16
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 f82b 	bl	8006a4c <xTaskRemoveFromEventList>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059fc:	4b3c      	ldr	r3, [pc, #240]	; (8005af0 <xQueueReceive+0x1b4>)
 80059fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a0c:	f002 f85c 	bl	8007ac8 <vPortExitCritical>
				return pdPASS;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e069      	b.n	8005ae8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d103      	bne.n	8005a22 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a1a:	f002 f855 	bl	8007ac8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e062      	b.n	8005ae8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a28:	f107 0310 	add.w	r3, r7, #16
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 f86f 	bl	8006b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a36:	f002 f847 	bl	8007ac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a3a:	f000 fdeb 	bl	8006614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a3e:	f002 f815 	bl	8007a6c <vPortEnterCritical>
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a48:	b25b      	sxtb	r3, r3
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d103      	bne.n	8005a58 <xQueueReceive+0x11c>
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d103      	bne.n	8005a6e <xQueueReceive+0x132>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6e:	f002 f82b 	bl	8007ac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a72:	1d3a      	adds	r2, r7, #4
 8005a74:	f107 0310 	add.w	r3, r7, #16
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 f85e 	bl	8006b3c <xTaskCheckForTimeOut>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d123      	bne.n	8005ace <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a88:	f000 fad5 	bl	8006036 <prvIsQueueEmpty>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d017      	beq.n	8005ac2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	3324      	adds	r3, #36	; 0x24
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 ff88 	bl	80069b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa2:	f000 fa76 	bl	8005f92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aa6:	f000 fdc3 	bl	8006630 <xTaskResumeAll>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d189      	bne.n	80059c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <xQueueReceive+0x1b4>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	e780      	b.n	80059c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac4:	f000 fa65 	bl	8005f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac8:	f000 fdb2 	bl	8006630 <xTaskResumeAll>
 8005acc:	e77a      	b.n	80059c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad0:	f000 fa5f 	bl	8005f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad4:	f000 fdac 	bl	8006630 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ada:	f000 faac 	bl	8006036 <prvIsQueueEmpty>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f43f af6f 	beq.w	80059c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ae6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3730      	adds	r7, #48	; 0x30
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <xQueueSemaphoreTake+0x30>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
 8005b22:	e7fe      	b.n	8005b22 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <xQueueSemaphoreTake+0x4c>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	e7fe      	b.n	8005b3e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b40:	f001 f94a 	bl	8006dd8 <xTaskGetSchedulerState>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <xQueueSemaphoreTake+0x5c>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <xQueueSemaphoreTake+0x60>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <xQueueSemaphoreTake+0x62>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <xQueueSemaphoreTake+0x7a>
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	61bb      	str	r3, [r7, #24]
 8005b6c:	e7fe      	b.n	8005b6c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b6e:	f001 ff7d 	bl	8007a6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d024      	beq.n	8005bc8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b8e:	f001 fa95 	bl	80070bc <pvTaskIncrementMutexHeldCount>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 ff51 	bl	8006a4c <xTaskRemoveFromEventList>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bb0:	4b53      	ldr	r3, [pc, #332]	; (8005d00 <xQueueSemaphoreTake+0x20c>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bc0:	f001 ff82 	bl	8007ac8 <vPortExitCritical>
				return pdPASS;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e096      	b.n	8005cf6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d110      	bne.n	8005bf0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <xQueueSemaphoreTake+0xf4>
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e7fe      	b.n	8005be6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005be8:	f001 ff6e 	bl	8007ac8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e082      	b.n	8005cf6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf6:	f107 030c 	add.w	r3, r7, #12
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 ff88 	bl	8006b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c04:	f001 ff60 	bl	8007ac8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c08:	f000 fd04 	bl	8006614 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c0c:	f001 ff2e 	bl	8007a6c <vPortEnterCritical>
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c16:	b25b      	sxtb	r3, r3
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d103      	bne.n	8005c26 <xQueueSemaphoreTake+0x132>
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d103      	bne.n	8005c3c <xQueueSemaphoreTake+0x148>
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c3c:	f001 ff44 	bl	8007ac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c40:	463a      	mov	r2, r7
 8005c42:	f107 030c 	add.w	r3, r7, #12
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 ff77 	bl	8006b3c <xTaskCheckForTimeOut>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d132      	bne.n	8005cba <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c56:	f000 f9ee 	bl	8006036 <prvIsQueueEmpty>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d026      	beq.n	8005cae <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005c68:	f001 ff00 	bl	8007a6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 f8cf 	bl	8006e14 <xTaskPriorityInherit>
 8005c76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005c78:	f001 ff26 	bl	8007ac8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	3324      	adds	r3, #36	; 0x24
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fe93 	bl	80069b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c8c:	f000 f981 	bl	8005f92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c90:	f000 fcce 	bl	8006630 <xTaskResumeAll>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f47f af69 	bne.w	8005b6e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005c9c:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <xQueueSemaphoreTake+0x20c>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	e75f      	b.n	8005b6e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cb0:	f000 f96f 	bl	8005f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cb4:	f000 fcbc 	bl	8006630 <xTaskResumeAll>
 8005cb8:	e759      	b.n	8005b6e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cbc:	f000 f969 	bl	8005f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cc0:	f000 fcb6 	bl	8006630 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cc6:	f000 f9b6 	bl	8006036 <prvIsQueueEmpty>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f43f af4e 	beq.w	8005b6e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00d      	beq.n	8005cf4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005cd8:	f001 fec8 	bl	8007a6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cde:	f000 f8b0 	bl	8005e42 <prvGetDisinheritPriorityAfterTimeout>
 8005ce2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 f966 	bl	8006fbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005cf0:	f001 feea 	bl	8007ac8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3738      	adds	r7, #56	; 0x38
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08e      	sub	sp, #56	; 0x38
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <xQueueReceiveFromISR+0x2a>
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	623b      	str	r3, [r7, #32]
 8005d2c:	e7fe      	b.n	8005d2c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <xQueueReceiveFromISR+0x38>
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <xQueueReceiveFromISR+0x3c>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <xQueueReceiveFromISR+0x3e>
 8005d40:	2300      	movs	r3, #0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <xQueueReceiveFromISR+0x56>
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e7fe      	b.n	8005d58 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d5a:	f001 ff63 	bl	8007c24 <vPortValidateInterruptPriority>
	__asm volatile
 8005d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	61ba      	str	r2, [r7, #24]
 8005d74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d02f      	beq.n	8005de6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d94:	f000 f8d7 	bl	8005f46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005da0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d112      	bne.n	8005dd0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	3310      	adds	r3, #16
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fe48 	bl	8006a4c <xTaskRemoveFromEventList>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00e      	beq.n	8005de0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e007      	b.n	8005de0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	b25a      	sxtb	r2, r3
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005de0:	2301      	movs	r3, #1
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
 8005de4:	e001      	b.n	8005dea <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3738      	adds	r7, #56	; 0x38
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <vQueueDelete+0x26>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	e7fe      	b.n	8005e22 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f95d 	bl	80060e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 fff5 	bl	8007e24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d006      	beq.n	8005e60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e001      	b.n	8005e64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e64:	68fb      	ldr	r3, [r7, #12]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b086      	sub	sp, #24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10d      	bne.n	8005eac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d14d      	bne.n	8005f34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 f821 	bl	8006ee4 <xTaskPriorityDisinherit>
 8005ea2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	e043      	b.n	8005f34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d119      	bne.n	8005ee6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6858      	ldr	r0, [r3, #4]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	f002 f8f7 	bl	80080b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	441a      	add	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d32b      	bcc.n	8005f34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	e026      	b.n	8005f34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68d8      	ldr	r0, [r3, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	f002 f8dd 	bl	80080b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	425b      	negs	r3, r3
 8005f00:	441a      	add	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d207      	bcs.n	8005f22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	425b      	negs	r3, r3
 8005f1c:	441a      	add	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d105      	bne.n	8005f34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f3c:	697b      	ldr	r3, [r7, #20]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d018      	beq.n	8005f8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	441a      	add	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d303      	bcc.n	8005f7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68d9      	ldr	r1, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	461a      	mov	r2, r3
 8005f84:	6838      	ldr	r0, [r7, #0]
 8005f86:	f002 f893 	bl	80080b0 <memcpy>
	}
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f9a:	f001 fd67 	bl	8007a6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fa4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fa6:	e011      	b.n	8005fcc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d012      	beq.n	8005fd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3324      	adds	r3, #36	; 0x24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fd49 	bl	8006a4c <xTaskRemoveFromEventList>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fc0:	f000 fe2c 	bl	8006c1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	dce9      	bgt.n	8005fa8 <prvUnlockQueue+0x16>
 8005fd4:	e000      	b.n	8005fd8 <prvUnlockQueue+0x46>
					break;
 8005fd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	22ff      	movs	r2, #255	; 0xff
 8005fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fe0:	f001 fd72 	bl	8007ac8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fe4:	f001 fd42 	bl	8007a6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ff0:	e011      	b.n	8006016 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3310      	adds	r3, #16
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fd24 	bl	8006a4c <xTaskRemoveFromEventList>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800600a:	f000 fe07 	bl	8006c1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	3b01      	subs	r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800601a:	2b00      	cmp	r3, #0
 800601c:	dce9      	bgt.n	8005ff2 <prvUnlockQueue+0x60>
 800601e:	e000      	b.n	8006022 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006020:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800602a:	f001 fd4d 	bl	8007ac8 <vPortExitCritical>
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800603e:	f001 fd15 	bl	8007a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	e001      	b.n	8006054 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006054:	f001 fd38 	bl	8007ac8 <vPortExitCritical>

	return xReturn;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800606a:	f001 fcff 	bl	8007a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	429a      	cmp	r2, r3
 8006078:	d102      	bne.n	8006080 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	e001      	b.n	8006084 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006084:	f001 fd20 	bl	8007ac8 <vPortExitCritical>

	return xReturn;
 8006088:	68fb      	ldr	r3, [r7, #12]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	e014      	b.n	80060ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060a4:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <vQueueAddToRegistry+0x4c>)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060b0:	490b      	ldr	r1, [pc, #44]	; (80060e0 <vQueueAddToRegistry+0x4c>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <vQueueAddToRegistry+0x4c>)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060c6:	e005      	b.n	80060d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	d9e7      	bls.n	80060a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060d4:	bf00      	nop
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	20003268 	.word	0x20003268

080060e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e016      	b.n	8006120 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80060f2:	4a10      	ldr	r2, [pc, #64]	; (8006134 <vQueueUnregisterQueue+0x50>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d10b      	bne.n	800611a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006102:	4a0c      	ldr	r2, [pc, #48]	; (8006134 <vQueueUnregisterQueue+0x50>)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2100      	movs	r1, #0
 8006108:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <vQueueUnregisterQueue+0x50>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4413      	add	r3, r2
 8006114:	2200      	movs	r2, #0
 8006116:	605a      	str	r2, [r3, #4]
				break;
 8006118:	e005      	b.n	8006126 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3301      	adds	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b07      	cmp	r3, #7
 8006124:	d9e5      	bls.n	80060f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20003268 	.word	0x20003268

08006138 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006148:	f001 fc90 	bl	8007a6c <vPortEnterCritical>
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006152:	b25b      	sxtb	r3, r3
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d103      	bne.n	8006162 <vQueueWaitForMessageRestricted+0x2a>
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006168:	b25b      	sxtb	r3, r3
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d103      	bne.n	8006178 <vQueueWaitForMessageRestricted+0x40>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006178:	f001 fca6 	bl	8007ac8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	3324      	adds	r3, #36	; 0x24
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fc33 	bl	80069f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006192:	6978      	ldr	r0, [r7, #20]
 8006194:	f7ff fefd 	bl	8005f92 <prvUnlockQueue>
	}
 8006198:	bf00      	nop
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08e      	sub	sp, #56	; 0x38
 80061a4:	af04      	add	r7, sp, #16
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <xTaskCreateStatic+0x28>
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	e7fe      	b.n	80061c6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <xTaskCreateStatic+0x42>
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e7fe      	b.n	80061e0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061e2:	235c      	movs	r3, #92	; 0x5c
 80061e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b5c      	cmp	r3, #92	; 0x5c
 80061ea:	d009      	beq.n	8006200 <xTaskCreateStatic+0x60>
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	e7fe      	b.n	80061fe <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006200:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01e      	beq.n	8006246 <xTaskCreateStatic+0xa6>
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01b      	beq.n	8006246 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006216:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006220:	2300      	movs	r3, #0
 8006222:	9303      	str	r3, [sp, #12]
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	9302      	str	r3, [sp, #8]
 8006228:	f107 0314 	add.w	r3, r7, #20
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f850 	bl	80062de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800623e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006240:	f000 f8e0 	bl	8006404 <prvAddNewTaskToReadyList>
 8006244:	e001      	b.n	800624a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800624a:	697b      	ldr	r3, [r7, #20]
	}
 800624c:	4618      	mov	r0, r3
 800624e:	3728      	adds	r7, #40	; 0x28
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08c      	sub	sp, #48	; 0x30
 8006258:	af04      	add	r7, sp, #16
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4618      	mov	r0, r3
 800626a:	f001 fd19 	bl	8007ca0 <pvPortMalloc>
 800626e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00e      	beq.n	8006294 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006276:	205c      	movs	r0, #92	; 0x5c
 8006278:	f001 fd12 	bl	8007ca0 <pvPortMalloc>
 800627c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
 800628a:	e005      	b.n	8006298 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800628c:	6978      	ldr	r0, [r7, #20]
 800628e:	f001 fdc9 	bl	8007e24 <vPortFree>
 8006292:	e001      	b.n	8006298 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d017      	beq.n	80062ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	2300      	movs	r3, #0
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	9302      	str	r3, [sp, #8]
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f80e 	bl	80062de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062c2:	69f8      	ldr	r0, [r7, #28]
 80062c4:	f000 f89e 	bl	8006404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062c8:	2301      	movs	r3, #1
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	e002      	b.n	80062d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062ce:	f04f 33ff 	mov.w	r3, #4294967295
 80062d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062d4:	69bb      	ldr	r3, [r7, #24]
	}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b088      	sub	sp, #32
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	461a      	mov	r2, r3
 80062f6:	21a5      	movs	r1, #165	; 0xa5
 80062f8:	f001 fee5 	bl	80080c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006306:	3b01      	subs	r3, #1
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f023 0307 	bic.w	r3, r3, #7
 8006314:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <prvInitialiseNewTask+0x56>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	e7fe      	b.n	8006332 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01f      	beq.n	800637a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	e012      	b.n	8006366 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	7819      	ldrb	r1, [r3, #0]
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	4413      	add	r3, r2
 800634e:	3334      	adds	r3, #52	; 0x34
 8006350:	460a      	mov	r2, r1
 8006352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	3301      	adds	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b0f      	cmp	r3, #15
 800636a:	d9e9      	bls.n	8006340 <prvInitialiseNewTask+0x62>
 800636c:	e000      	b.n	8006370 <prvInitialiseNewTask+0x92>
			{
				break;
 800636e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006378:	e003      	b.n	8006382 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	2b37      	cmp	r3, #55	; 0x37
 8006386:	d901      	bls.n	800638c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006388:	2337      	movs	r3, #55	; 0x37
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006396:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	2200      	movs	r2, #0
 800639c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fe2e 	bl	8005004 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	3318      	adds	r3, #24
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fe29 	bl	8005004 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2200      	movs	r2, #0
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68f9      	ldr	r1, [r7, #12]
 80063e2:	69b8      	ldr	r0, [r7, #24]
 80063e4:	f001 fa1e 	bl	8007824 <pxPortInitialiseStack>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063fa:	bf00      	nop
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800640c:	f001 fb2e 	bl	8007a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006410:	4b2d      	ldr	r3, [pc, #180]	; (80064c8 <prvAddNewTaskToReadyList+0xc4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a2c      	ldr	r2, [pc, #176]	; (80064c8 <prvAddNewTaskToReadyList+0xc4>)
 8006418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800641a:	4b2c      	ldr	r3, [pc, #176]	; (80064cc <prvAddNewTaskToReadyList+0xc8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006422:	4a2a      	ldr	r2, [pc, #168]	; (80064cc <prvAddNewTaskToReadyList+0xc8>)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006428:	4b27      	ldr	r3, [pc, #156]	; (80064c8 <prvAddNewTaskToReadyList+0xc4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d110      	bne.n	8006452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006430:	f000 fc18 	bl	8006c64 <prvInitialiseTaskLists>
 8006434:	e00d      	b.n	8006452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006436:	4b26      	ldr	r3, [pc, #152]	; (80064d0 <prvAddNewTaskToReadyList+0xcc>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800643e:	4b23      	ldr	r3, [pc, #140]	; (80064cc <prvAddNewTaskToReadyList+0xc8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	429a      	cmp	r2, r3
 800644a:	d802      	bhi.n	8006452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800644c:	4a1f      	ldr	r2, [pc, #124]	; (80064cc <prvAddNewTaskToReadyList+0xc8>)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006452:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <prvAddNewTaskToReadyList+0xd0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3301      	adds	r3, #1
 8006458:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <prvAddNewTaskToReadyList+0xd0>)
 800645a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800645c:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <prvAddNewTaskToReadyList+0xd0>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <prvAddNewTaskToReadyList+0xd4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d903      	bls.n	8006478 <prvAddNewTaskToReadyList+0x74>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <prvAddNewTaskToReadyList+0xd4>)
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <prvAddNewTaskToReadyList+0xd8>)
 8006486:	441a      	add	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	4619      	mov	r1, r3
 800648e:	4610      	mov	r0, r2
 8006490:	f7fe fdc5 	bl	800501e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006494:	f001 fb18 	bl	8007ac8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <prvAddNewTaskToReadyList+0xcc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064a0:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <prvAddNewTaskToReadyList+0xc8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d207      	bcs.n	80064be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064ae:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <prvAddNewTaskToReadyList+0xdc>)
 80064b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000c40 	.word	0x20000c40
 80064cc:	2000076c 	.word	0x2000076c
 80064d0:	20000c4c 	.word	0x20000c4c
 80064d4:	20000c5c 	.word	0x20000c5c
 80064d8:	20000c48 	.word	0x20000c48
 80064dc:	20000770 	.word	0x20000770
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d016      	beq.n	8006524 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064f6:	4b13      	ldr	r3, [pc, #76]	; (8006544 <vTaskDelay+0x60>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <vTaskDelay+0x2e>
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60bb      	str	r3, [r7, #8]
 8006510:	e7fe      	b.n	8006510 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006512:	f000 f87f 	bl	8006614 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006516:	2100      	movs	r1, #0
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fde3 	bl	80070e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800651e:	f000 f887 	bl	8006630 <xTaskResumeAll>
 8006522:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d107      	bne.n	800653a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800652a:	4b07      	ldr	r3, [pc, #28]	; (8006548 <vTaskDelay+0x64>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000c68 	.word	0x20000c68
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800655a:	463a      	mov	r2, r7
 800655c:	1d39      	adds	r1, r7, #4
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe fcfa 	bl	8004f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	9202      	str	r2, [sp, #8]
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	2300      	movs	r3, #0
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	2300      	movs	r3, #0
 8006578:	460a      	mov	r2, r1
 800657a:	4920      	ldr	r1, [pc, #128]	; (80065fc <vTaskStartScheduler+0xb0>)
 800657c:	4820      	ldr	r0, [pc, #128]	; (8006600 <vTaskStartScheduler+0xb4>)
 800657e:	f7ff fe0f 	bl	80061a0 <xTaskCreateStatic>
 8006582:	4602      	mov	r2, r0
 8006584:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <vTaskStartScheduler+0xb8>)
 8006586:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006588:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <vTaskStartScheduler+0xb8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006590:	2301      	movs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e001      	b.n	800659a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d102      	bne.n	80065a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065a0:	f000 fdfa 	bl	8007198 <xTimerCreateTimerTask>
 80065a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d115      	bne.n	80065d8 <vTaskStartScheduler+0x8c>
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <vTaskStartScheduler+0xbc>)
 80065c0:	f04f 32ff 	mov.w	r2, #4294967295
 80065c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <vTaskStartScheduler+0xc0>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065cc:	4b10      	ldr	r3, [pc, #64]	; (8006610 <vTaskStartScheduler+0xc4>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065d2:	f001 f9ad 	bl	8007930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065d6:	e00d      	b.n	80065f4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d109      	bne.n	80065f4 <vTaskStartScheduler+0xa8>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e7fe      	b.n	80065f2 <vTaskStartScheduler+0xa6>
}
 80065f4:	bf00      	nop
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	08008994 	.word	0x08008994
 8006600:	08006c35 	.word	0x08006c35
 8006604:	20000c64 	.word	0x20000c64
 8006608:	20000c60 	.word	0x20000c60
 800660c:	20000c4c 	.word	0x20000c4c
 8006610:	20000c44 	.word	0x20000c44

08006614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <vTaskSuspendAll+0x18>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	4a03      	ldr	r2, [pc, #12]	; (800662c <vTaskSuspendAll+0x18>)
 8006620:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006622:	bf00      	nop
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	20000c68 	.word	0x20000c68

08006630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800663e:	4b41      	ldr	r3, [pc, #260]	; (8006744 <xTaskResumeAll+0x114>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <xTaskResumeAll+0x2a>
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	e7fe      	b.n	8006658 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800665a:	f001 fa07 	bl	8007a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800665e:	4b39      	ldr	r3, [pc, #228]	; (8006744 <xTaskResumeAll+0x114>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3b01      	subs	r3, #1
 8006664:	4a37      	ldr	r2, [pc, #220]	; (8006744 <xTaskResumeAll+0x114>)
 8006666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006668:	4b36      	ldr	r3, [pc, #216]	; (8006744 <xTaskResumeAll+0x114>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d162      	bne.n	8006736 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006670:	4b35      	ldr	r3, [pc, #212]	; (8006748 <xTaskResumeAll+0x118>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d05e      	beq.n	8006736 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006678:	e02f      	b.n	80066da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800667a:	4b34      	ldr	r3, [pc, #208]	; (800674c <xTaskResumeAll+0x11c>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3318      	adds	r3, #24
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fd26 	bl	80050d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3304      	adds	r3, #4
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fd21 	bl	80050d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669a:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <xTaskResumeAll+0x120>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d903      	bls.n	80066aa <xTaskResumeAll+0x7a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <xTaskResumeAll+0x120>)
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4a27      	ldr	r2, [pc, #156]	; (8006754 <xTaskResumeAll+0x124>)
 80066b8:	441a      	add	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fe fcac 	bl	800501e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <xTaskResumeAll+0x128>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d302      	bcc.n	80066da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066d4:	4b21      	ldr	r3, [pc, #132]	; (800675c <xTaskResumeAll+0x12c>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066da:	4b1c      	ldr	r3, [pc, #112]	; (800674c <xTaskResumeAll+0x11c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1cb      	bne.n	800667a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066e8:	f000 fb56 	bl	8006d98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066ec:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <xTaskResumeAll+0x130>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066f8:	f000 f846 	bl	8006788 <xTaskIncrementTick>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006702:	4b16      	ldr	r3, [pc, #88]	; (800675c <xTaskResumeAll+0x12c>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3b01      	subs	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f1      	bne.n	80066f8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006714:	4b12      	ldr	r3, [pc, #72]	; (8006760 <xTaskResumeAll+0x130>)
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <xTaskResumeAll+0x12c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006722:	2301      	movs	r3, #1
 8006724:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006726:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <xTaskResumeAll+0x134>)
 8006728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006736:	f001 f9c7 	bl	8007ac8 <vPortExitCritical>

	return xAlreadyYielded;
 800673a:	68bb      	ldr	r3, [r7, #8]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000c68 	.word	0x20000c68
 8006748:	20000c40 	.word	0x20000c40
 800674c:	20000c00 	.word	0x20000c00
 8006750:	20000c48 	.word	0x20000c48
 8006754:	20000770 	.word	0x20000770
 8006758:	2000076c 	.word	0x2000076c
 800675c:	20000c54 	.word	0x20000c54
 8006760:	20000c50 	.word	0x20000c50
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <xTaskGetTickCount+0x1c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006774:	687b      	ldr	r3, [r7, #4]
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000c44 	.word	0x20000c44

08006788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006792:	4b4e      	ldr	r3, [pc, #312]	; (80068cc <xTaskIncrementTick+0x144>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 8088 	bne.w	80068ac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800679c:	4b4c      	ldr	r3, [pc, #304]	; (80068d0 <xTaskIncrementTick+0x148>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067a4:	4a4a      	ldr	r2, [pc, #296]	; (80068d0 <xTaskIncrementTick+0x148>)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d11f      	bne.n	80067f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80067b0:	4b48      	ldr	r3, [pc, #288]	; (80068d4 <xTaskIncrementTick+0x14c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <xTaskIncrementTick+0x46>
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	e7fe      	b.n	80067cc <xTaskIncrementTick+0x44>
 80067ce:	4b41      	ldr	r3, [pc, #260]	; (80068d4 <xTaskIncrementTick+0x14c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	4b40      	ldr	r3, [pc, #256]	; (80068d8 <xTaskIncrementTick+0x150>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a3e      	ldr	r2, [pc, #248]	; (80068d4 <xTaskIncrementTick+0x14c>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4a3e      	ldr	r2, [pc, #248]	; (80068d8 <xTaskIncrementTick+0x150>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b3e      	ldr	r3, [pc, #248]	; (80068dc <xTaskIncrementTick+0x154>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a3c      	ldr	r2, [pc, #240]	; (80068dc <xTaskIncrementTick+0x154>)
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	f000 fad4 	bl	8006d98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067f0:	4b3b      	ldr	r3, [pc, #236]	; (80068e0 <xTaskIncrementTick+0x158>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d349      	bcc.n	800688e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <xTaskIncrementTick+0x14c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006804:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <xTaskIncrementTick+0x158>)
 8006806:	f04f 32ff 	mov.w	r2, #4294967295
 800680a:	601a      	str	r2, [r3, #0]
					break;
 800680c:	e03f      	b.n	800688e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680e:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <xTaskIncrementTick+0x14c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d203      	bcs.n	800682e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006826:	4a2e      	ldr	r2, [pc, #184]	; (80068e0 <xTaskIncrementTick+0x158>)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800682c:	e02f      	b.n	800688e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	3304      	adds	r3, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fc50 	bl	80050d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	3318      	adds	r3, #24
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fc47 	bl	80050d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	4b25      	ldr	r3, [pc, #148]	; (80068e4 <xTaskIncrementTick+0x15c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d903      	bls.n	800685e <xTaskIncrementTick+0xd6>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	4a22      	ldr	r2, [pc, #136]	; (80068e4 <xTaskIncrementTick+0x15c>)
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <xTaskIncrementTick+0x160>)
 800686c:	441a      	add	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7fe fbd2 	bl	800501e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	4b1b      	ldr	r3, [pc, #108]	; (80068ec <xTaskIncrementTick+0x164>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d3b8      	bcc.n	80067fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688c:	e7b5      	b.n	80067fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800688e:	4b17      	ldr	r3, [pc, #92]	; (80068ec <xTaskIncrementTick+0x164>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4914      	ldr	r1, [pc, #80]	; (80068e8 <xTaskIncrementTick+0x160>)
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d907      	bls.n	80068b6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e004      	b.n	80068b6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <xTaskIncrementTick+0x168>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3301      	adds	r3, #1
 80068b2:	4a0f      	ldr	r2, [pc, #60]	; (80068f0 <xTaskIncrementTick+0x168>)
 80068b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068b6:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <xTaskIncrementTick+0x16c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80068be:	2301      	movs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068c2:	697b      	ldr	r3, [r7, #20]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000c68 	.word	0x20000c68
 80068d0:	20000c44 	.word	0x20000c44
 80068d4:	20000bf8 	.word	0x20000bf8
 80068d8:	20000bfc 	.word	0x20000bfc
 80068dc:	20000c58 	.word	0x20000c58
 80068e0:	20000c60 	.word	0x20000c60
 80068e4:	20000c48 	.word	0x20000c48
 80068e8:	20000770 	.word	0x20000770
 80068ec:	2000076c 	.word	0x2000076c
 80068f0:	20000c50 	.word	0x20000c50
 80068f4:	20000c54 	.word	0x20000c54

080068f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068fe:	4b27      	ldr	r3, [pc, #156]	; (800699c <vTaskSwitchContext+0xa4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006906:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <vTaskSwitchContext+0xa8>)
 8006908:	2201      	movs	r2, #1
 800690a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800690c:	e040      	b.n	8006990 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <vTaskSwitchContext+0xa8>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006914:	4b23      	ldr	r3, [pc, #140]	; (80069a4 <vTaskSwitchContext+0xac>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e00f      	b.n	800693c <vTaskSwitchContext+0x44>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <vTaskSwitchContext+0x3e>
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	e7fe      	b.n	8006934 <vTaskSwitchContext+0x3c>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3b01      	subs	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	491a      	ldr	r1, [pc, #104]	; (80069a8 <vTaskSwitchContext+0xb0>)
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0e5      	beq.n	800691c <vTaskSwitchContext+0x24>
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <vTaskSwitchContext+0xb0>)
 800695c:	4413      	add	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	3308      	adds	r3, #8
 8006972:	429a      	cmp	r2, r3
 8006974:	d104      	bne.n	8006980 <vTaskSwitchContext+0x88>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	605a      	str	r2, [r3, #4]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	4a09      	ldr	r2, [pc, #36]	; (80069ac <vTaskSwitchContext+0xb4>)
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	4a06      	ldr	r2, [pc, #24]	; (80069a4 <vTaskSwitchContext+0xac>)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6013      	str	r3, [r2, #0]
}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000c68 	.word	0x20000c68
 80069a0:	20000c54 	.word	0x20000c54
 80069a4:	20000c48 	.word	0x20000c48
 80069a8:	20000770 	.word	0x20000770
 80069ac:	2000076c 	.word	0x2000076c

080069b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <vTaskPlaceOnEventList+0x24>
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e7fe      	b.n	80069d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <vTaskPlaceOnEventList+0x44>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3318      	adds	r3, #24
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fe fb42 	bl	8005066 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069e2:	2101      	movs	r1, #1
 80069e4:	6838      	ldr	r0, [r7, #0]
 80069e6:	f000 fb7d 	bl	80070e4 <prvAddCurrentTaskToDelayedList>
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000076c 	.word	0x2000076c

080069f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <vTaskPlaceOnEventListRestricted+0x26>
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e7fe      	b.n	8006a1c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <vTaskPlaceOnEventListRestricted+0x50>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3318      	adds	r3, #24
 8006a24:	4619      	mov	r1, r3
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7fe faf9 	bl	800501e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
 8006a36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	68b8      	ldr	r0, [r7, #8]
 8006a3c:	f000 fb52 	bl	80070e4 <prvAddCurrentTaskToDelayedList>
	}
 8006a40:	bf00      	nop
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	2000076c 	.word	0x2000076c

08006a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <xTaskRemoveFromEventList+0x2a>
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e7fe      	b.n	8006a74 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3318      	adds	r3, #24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fb2c 	bl	80050d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a80:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <xTaskRemoveFromEventList+0xac>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d11d      	bne.n	8006ac4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fb23 	bl	80050d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	4b19      	ldr	r3, [pc, #100]	; (8006afc <xTaskRemoveFromEventList+0xb0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d903      	bls.n	8006aa6 <xTaskRemoveFromEventList+0x5a>
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	4a16      	ldr	r2, [pc, #88]	; (8006afc <xTaskRemoveFromEventList+0xb0>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <xTaskRemoveFromEventList+0xb4>)
 8006ab4:	441a      	add	r2, r3
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f7fe faae 	bl	800501e <vListInsertEnd>
 8006ac2:	e005      	b.n	8006ad0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3318      	adds	r3, #24
 8006ac8:	4619      	mov	r1, r3
 8006aca:	480e      	ldr	r0, [pc, #56]	; (8006b04 <xTaskRemoveFromEventList+0xb8>)
 8006acc:	f7fe faa7 	bl	800501e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <xTaskRemoveFromEventList+0xbc>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d905      	bls.n	8006aea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <xTaskRemoveFromEventList+0xc0>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e001      	b.n	8006aee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006aee:	697b      	ldr	r3, [r7, #20]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000c68 	.word	0x20000c68
 8006afc:	20000c48 	.word	0x20000c48
 8006b00:	20000770 	.word	0x20000770
 8006b04:	20000c00 	.word	0x20000c00
 8006b08:	2000076c 	.word	0x2000076c
 8006b0c:	20000c54 	.word	0x20000c54

08006b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <vTaskInternalSetTimeOutState+0x24>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b20:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <vTaskInternalSetTimeOutState+0x28>)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	605a      	str	r2, [r3, #4]
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000c58 	.word	0x20000c58
 8006b38:	20000c44 	.word	0x20000c44

08006b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <xTaskCheckForTimeOut+0x24>
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	e7fe      	b.n	8006b5e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <xTaskCheckForTimeOut+0x3e>
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e7fe      	b.n	8006b78 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006b7a:	f000 ff77 	bl	8007a6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b7e:	4b24      	ldr	r3, [pc, #144]	; (8006c10 <xTaskCheckForTimeOut+0xd4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8006b8e:	4b21      	ldr	r3, [pc, #132]	; (8006c14 <xTaskCheckForTimeOut+0xd8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <xTaskCheckForTimeOut+0xd8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e02b      	b.n	8006c02 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d102      	bne.n	8006bba <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	e023      	b.n	8006c02 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b16      	ldr	r3, [pc, #88]	; (8006c18 <xTaskCheckForTimeOut+0xdc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d007      	beq.n	8006bd6 <xTaskCheckForTimeOut+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e015      	b.n	8006c02 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d20b      	bcs.n	8006bf8 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ff8f 	bl	8006b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	e004      	b.n	8006c02 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c02:	f000 ff61 	bl	8007ac8 <vPortExitCritical>

	return xReturn;
 8006c06:	69fb      	ldr	r3, [r7, #28]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000c44 	.word	0x20000c44
 8006c14:	2000076c 	.word	0x2000076c
 8006c18:	20000c58 	.word	0x20000c58

08006c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c20:	4b03      	ldr	r3, [pc, #12]	; (8006c30 <vTaskMissedYield+0x14>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
}
 8006c26:	bf00      	nop
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	20000c54 	.word	0x20000c54

08006c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c3c:	f000 f852 	bl	8006ce4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c40:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <prvIdleTask+0x28>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d9f9      	bls.n	8006c3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <prvIdleTask+0x2c>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c58:	e7f0      	b.n	8006c3c <prvIdleTask+0x8>
 8006c5a:	bf00      	nop
 8006c5c:	20000770 	.word	0x20000770
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	607b      	str	r3, [r7, #4]
 8006c6e:	e00c      	b.n	8006c8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4a12      	ldr	r2, [pc, #72]	; (8006cc4 <prvInitialiseTaskLists+0x60>)
 8006c7c:	4413      	add	r3, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe f9a0 	bl	8004fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3301      	adds	r3, #1
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b37      	cmp	r3, #55	; 0x37
 8006c8e:	d9ef      	bls.n	8006c70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c90:	480d      	ldr	r0, [pc, #52]	; (8006cc8 <prvInitialiseTaskLists+0x64>)
 8006c92:	f7fe f997 	bl	8004fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c96:	480d      	ldr	r0, [pc, #52]	; (8006ccc <prvInitialiseTaskLists+0x68>)
 8006c98:	f7fe f994 	bl	8004fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c9c:	480c      	ldr	r0, [pc, #48]	; (8006cd0 <prvInitialiseTaskLists+0x6c>)
 8006c9e:	f7fe f991 	bl	8004fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ca2:	480c      	ldr	r0, [pc, #48]	; (8006cd4 <prvInitialiseTaskLists+0x70>)
 8006ca4:	f7fe f98e 	bl	8004fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ca8:	480b      	ldr	r0, [pc, #44]	; (8006cd8 <prvInitialiseTaskLists+0x74>)
 8006caa:	f7fe f98b 	bl	8004fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <prvInitialiseTaskLists+0x78>)
 8006cb0:	4a05      	ldr	r2, [pc, #20]	; (8006cc8 <prvInitialiseTaskLists+0x64>)
 8006cb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <prvInitialiseTaskLists+0x7c>)
 8006cb6:	4a05      	ldr	r2, [pc, #20]	; (8006ccc <prvInitialiseTaskLists+0x68>)
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000770 	.word	0x20000770
 8006cc8:	20000bd0 	.word	0x20000bd0
 8006ccc:	20000be4 	.word	0x20000be4
 8006cd0:	20000c00 	.word	0x20000c00
 8006cd4:	20000c14 	.word	0x20000c14
 8006cd8:	20000c2c 	.word	0x20000c2c
 8006cdc:	20000bf8 	.word	0x20000bf8
 8006ce0:	20000bfc 	.word	0x20000bfc

08006ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cea:	e019      	b.n	8006d20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cec:	f000 febe 	bl	8007a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <prvCheckTasksWaitingTermination+0x4c>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe f9eb 	bl	80050d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d02:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <prvCheckTasksWaitingTermination+0x50>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <prvCheckTasksWaitingTermination+0x50>)
 8006d0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <prvCheckTasksWaitingTermination+0x54>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <prvCheckTasksWaitingTermination+0x54>)
 8006d14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d16:	f000 fed7 	bl	8007ac8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f80e 	bl	8006d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <prvCheckTasksWaitingTermination+0x54>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e1      	bne.n	8006cec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000c14 	.word	0x20000c14
 8006d34:	20000c40 	.word	0x20000c40
 8006d38:	20000c28 	.word	0x20000c28

08006d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d108      	bne.n	8006d60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f866 	bl	8007e24 <vPortFree>
				vPortFree( pxTCB );
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 f863 	bl	8007e24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d5e:	e017      	b.n	8006d90 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d103      	bne.n	8006d72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 f85a 	bl	8007e24 <vPortFree>
	}
 8006d70:	e00e      	b.n	8006d90 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d009      	beq.n	8006d90 <prvDeleteTCB+0x54>
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e7fe      	b.n	8006d8e <prvDeleteTCB+0x52>
	}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <prvResetNextTaskUnblockTime+0x38>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <prvResetNextTaskUnblockTime+0x3c>)
 8006daa:	f04f 32ff 	mov.w	r2, #4294967295
 8006dae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006db0:	e008      	b.n	8006dc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <prvResetNextTaskUnblockTime+0x38>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4a04      	ldr	r2, [pc, #16]	; (8006dd4 <prvResetNextTaskUnblockTime+0x3c>)
 8006dc2:	6013      	str	r3, [r2, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20000bf8 	.word	0x20000bf8
 8006dd4:	20000c60 	.word	0x20000c60

08006dd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <xTaskGetSchedulerState+0x34>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006de6:	2301      	movs	r3, #1
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	e008      	b.n	8006dfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dec:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <xTaskGetSchedulerState+0x38>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006df4:	2302      	movs	r3, #2
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	e001      	b.n	8006dfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dfe:	687b      	ldr	r3, [r7, #4]
	}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000c4c 	.word	0x20000c4c
 8006e10:	20000c68 	.word	0x20000c68

08006e14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d051      	beq.n	8006ece <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	4b2a      	ldr	r3, [pc, #168]	; (8006ed8 <xTaskPriorityInherit+0xc4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d241      	bcs.n	8006ebc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	db06      	blt.n	8006e4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e40:	4b25      	ldr	r3, [pc, #148]	; (8006ed8 <xTaskPriorityInherit+0xc4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6959      	ldr	r1, [r3, #20]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <xTaskPriorityInherit+0xc8>)
 8006e60:	4413      	add	r3, r2
 8006e62:	4299      	cmp	r1, r3
 8006e64:	d122      	bne.n	8006eac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe f934 	bl	80050d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e70:	4b19      	ldr	r3, [pc, #100]	; (8006ed8 <xTaskPriorityInherit+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <xTaskPriorityInherit+0xcc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d903      	bls.n	8006e8e <xTaskPriorityInherit+0x7a>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <xTaskPriorityInherit+0xcc>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a10      	ldr	r2, [pc, #64]	; (8006edc <xTaskPriorityInherit+0xc8>)
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f7fe f8ba 	bl	800501e <vListInsertEnd>
 8006eaa:	e004      	b.n	8006eb6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <xTaskPriorityInherit+0xc4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	e008      	b.n	8006ece <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <xTaskPriorityInherit+0xc4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d201      	bcs.n	8006ece <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ece:	68fb      	ldr	r3, [r7, #12]
	}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	2000076c 	.word	0x2000076c
 8006edc:	20000770 	.word	0x20000770
 8006ee0:	20000c48 	.word	0x20000c48

08006ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d054      	beq.n	8006fa4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006efa:	4b2d      	ldr	r3, [pc, #180]	; (8006fb0 <xTaskPriorityDisinherit+0xcc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d009      	beq.n	8006f18 <xTaskPriorityDisinherit+0x34>
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	e7fe      	b.n	8006f16 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <xTaskPriorityDisinherit+0x50>
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	e7fe      	b.n	8006f32 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	1e5a      	subs	r2, r3, #1
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d02c      	beq.n	8006fa4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d128      	bne.n	8006fa4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe f8be 	bl	80050d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <xTaskPriorityDisinherit+0xd0>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d903      	bls.n	8006f84 <xTaskPriorityDisinherit+0xa0>
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <xTaskPriorityDisinherit+0xd0>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <xTaskPriorityDisinherit+0xd4>)
 8006f92:	441a      	add	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7fe f83f 	bl	800501e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fa4:	697b      	ldr	r3, [r7, #20]
	}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	2000076c 	.word	0x2000076c
 8006fb4:	20000c48 	.word	0x20000c48
 8006fb8:	20000770 	.word	0x20000770

08006fbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d068      	beq.n	80070a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e7fe      	b.n	8006fee <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d902      	bls.n	8007000 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	e002      	b.n	8007006 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007004:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	429a      	cmp	r2, r3
 800700e:	d04a      	beq.n	80070a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	429a      	cmp	r2, r3
 8007018:	d145      	bne.n	80070a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800701a:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	429a      	cmp	r2, r3
 8007022:	d109      	bne.n	8007038 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	60bb      	str	r3, [r7, #8]
 8007036:	e7fe      	b.n	8007036 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	db04      	blt.n	8007056 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	6959      	ldr	r1, [r3, #20]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4a13      	ldr	r2, [pc, #76]	; (80070b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007066:	4413      	add	r3, r2
 8007068:	4299      	cmp	r1, r3
 800706a:	d11c      	bne.n	80070a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe f831 	bl	80050d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d903      	bls.n	800708a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4a07      	ldr	r2, [pc, #28]	; (80070b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007098:	441a      	add	r2, r3
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7fd ffbc 	bl	800501e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070a6:	bf00      	nop
 80070a8:	3720      	adds	r7, #32
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2000076c 	.word	0x2000076c
 80070b4:	20000770 	.word	0x20000770
 80070b8:	20000c48 	.word	0x20000c48

080070bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070ce:	3201      	adds	r2, #1
 80070d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80070d2:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80070d4:	681b      	ldr	r3, [r3, #0]
	}
 80070d6:	4618      	mov	r0, r3
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	2000076c 	.word	0x2000076c

080070e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80070f4:	4b23      	ldr	r3, [pc, #140]	; (8007184 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070fe:	4b21      	ldr	r3, [pc, #132]	; (8007184 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3304      	adds	r3, #4
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd ffe7 	bl	80050d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d10a      	bne.n	8007128 <prvAddCurrentTaskToDelayedList+0x44>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <prvAddCurrentTaskToDelayedList+0xa0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3304      	adds	r3, #4
 800711e:	4619      	mov	r1, r3
 8007120:	4819      	ldr	r0, [pc, #100]	; (8007188 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007122:	f7fd ff7c 	bl	800501e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007126:	e026      	b.n	8007176 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007130:	4b14      	ldr	r3, [pc, #80]	; (8007184 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d209      	bcs.n	8007154 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <prvAddCurrentTaskToDelayedList+0xa8>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3304      	adds	r3, #4
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7fd ff8a 	bl	8005066 <vListInsert>
}
 8007152:	e010      	b.n	8007176 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007154:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <prvAddCurrentTaskToDelayedList+0xac>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <prvAddCurrentTaskToDelayedList+0xa0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3304      	adds	r3, #4
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7fd ff80 	bl	8005066 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d202      	bcs.n	8007176 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8007170:	4a08      	ldr	r2, [pc, #32]	; (8007194 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6013      	str	r3, [r2, #0]
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000c44 	.word	0x20000c44
 8007184:	2000076c 	.word	0x2000076c
 8007188:	20000c2c 	.word	0x20000c2c
 800718c:	20000bfc 	.word	0x20000bfc
 8007190:	20000bf8 	.word	0x20000bf8
 8007194:	20000c60 	.word	0x20000c60

08007198 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071a2:	f000 faff 	bl	80077a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071a6:	4b1c      	ldr	r3, [pc, #112]	; (8007218 <xTimerCreateTimerTask+0x80>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d021      	beq.n	80071f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071b6:	1d3a      	adds	r2, r7, #4
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	f107 030c 	add.w	r3, r7, #12
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fd fee5 	bl	8004f90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	9202      	str	r2, [sp, #8]
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	2302      	movs	r3, #2
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	460a      	mov	r2, r1
 80071d8:	4910      	ldr	r1, [pc, #64]	; (800721c <xTimerCreateTimerTask+0x84>)
 80071da:	4811      	ldr	r0, [pc, #68]	; (8007220 <xTimerCreateTimerTask+0x88>)
 80071dc:	f7fe ffe0 	bl	80061a0 <xTaskCreateStatic>
 80071e0:	4602      	mov	r2, r0
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <xTimerCreateTimerTask+0x8c>)
 80071e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <xTimerCreateTimerTask+0x8c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <xTimerCreateTimerTask+0x74>
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	e7fe      	b.n	800720a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800720c:	697b      	ldr	r3, [r7, #20]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000c9c 	.word	0x20000c9c
 800721c:	0800899c 	.word	0x0800899c
 8007220:	08007359 	.word	0x08007359
 8007224:	20000ca0 	.word	0x20000ca0

08007228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d109      	bne.n	8007254 <xTimerGenericCommand+0x2c>
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	623b      	str	r3, [r7, #32]
 8007252:	e7fe      	b.n	8007252 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007254:	4b19      	ldr	r3, [pc, #100]	; (80072bc <xTimerGenericCommand+0x94>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d02a      	beq.n	80072b2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b05      	cmp	r3, #5
 800726c:	dc18      	bgt.n	80072a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800726e:	f7ff fdb3 	bl	8006dd8 <xTaskGetSchedulerState>
 8007272:	4603      	mov	r3, r0
 8007274:	2b02      	cmp	r3, #2
 8007276:	d109      	bne.n	800728c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007278:	4b10      	ldr	r3, [pc, #64]	; (80072bc <xTimerGenericCommand+0x94>)
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	f107 0110 	add.w	r1, r7, #16
 8007280:	2300      	movs	r3, #0
 8007282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007284:	f7fe f942 	bl	800550c <xQueueGenericSend>
 8007288:	6278      	str	r0, [r7, #36]	; 0x24
 800728a:	e012      	b.n	80072b2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800728c:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <xTimerGenericCommand+0x94>)
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	f107 0110 	add.w	r1, r7, #16
 8007294:	2300      	movs	r3, #0
 8007296:	2200      	movs	r2, #0
 8007298:	f7fe f938 	bl	800550c <xQueueGenericSend>
 800729c:	6278      	str	r0, [r7, #36]	; 0x24
 800729e:	e008      	b.n	80072b2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <xTimerGenericCommand+0x94>)
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	f107 0110 	add.w	r1, r7, #16
 80072a8:	2300      	movs	r3, #0
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	f7fe fa28 	bl	8005700 <xQueueGenericSendFromISR>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3728      	adds	r7, #40	; 0x28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20000c9c 	.word	0x20000c9c

080072c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ca:	4b22      	ldr	r3, [pc, #136]	; (8007354 <prvProcessExpiredTimer+0x94>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fd fefd 	bl	80050d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d021      	beq.n	8007330 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	18d1      	adds	r1, r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	6978      	ldr	r0, [r7, #20]
 80072fa:	f000 f8d1 	bl	80074a0 <prvInsertTimerInActiveList>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01e      	beq.n	8007342 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007304:	2300      	movs	r3, #0
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	2100      	movs	r1, #0
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f7ff ff8a 	bl	8007228 <xTimerGenericCommand>
 8007314:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d112      	bne.n	8007342 <prvProcessExpiredTimer+0x82>
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e7fe      	b.n	800732e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007336:	f023 0301 	bic.w	r3, r3, #1
 800733a:	b2da      	uxtb	r2, r3
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	6978      	ldr	r0, [r7, #20]
 8007348:	4798      	blx	r3
}
 800734a:	bf00      	nop
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000c94 	.word	0x20000c94

08007358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f857 	bl	8007418 <prvGetNextExpireTime>
 800736a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4619      	mov	r1, r3
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f803 	bl	800737c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007376:	f000 f8d5 	bl	8007524 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800737a:	e7f1      	b.n	8007360 <prvTimerTask+0x8>

0800737c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007386:	f7ff f945 	bl	8006614 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800738a:	f107 0308 	add.w	r3, r7, #8
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f866 	bl	8007460 <prvSampleTimeNow>
 8007394:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d130      	bne.n	80073fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <prvProcessTimerOrBlockTask+0x3c>
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d806      	bhi.n	80073b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073aa:	f7ff f941 	bl	8006630 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff85 	bl	80072c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073b6:	e024      	b.n	8007402 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073be:	4b13      	ldr	r3, [pc, #76]	; (800740c <prvProcessTimerOrBlockTask+0x90>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <prvProcessTimerOrBlockTask+0x50>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <prvProcessTimerOrBlockTask+0x52>
 80073cc:	2300      	movs	r3, #0
 80073ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073d0:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <prvProcessTimerOrBlockTask+0x94>)
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	4619      	mov	r1, r3
 80073de:	f7fe feab 	bl	8006138 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073e2:	f7ff f925 	bl	8006630 <xTaskResumeAll>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <prvProcessTimerOrBlockTask+0x98>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
}
 80073fc:	e001      	b.n	8007402 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073fe:	f7ff f917 	bl	8006630 <xTaskResumeAll>
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20000c98 	.word	0x20000c98
 8007410:	20000c9c 	.word	0x20000c9c
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007420:	4b0e      	ldr	r3, [pc, #56]	; (800745c <prvGetNextExpireTime+0x44>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <prvGetNextExpireTime+0x16>
 800742a:	2201      	movs	r2, #1
 800742c:	e000      	b.n	8007430 <prvGetNextExpireTime+0x18>
 800742e:	2200      	movs	r2, #0
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d105      	bne.n	8007448 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <prvGetNextExpireTime+0x44>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e001      	b.n	800744c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800744c:	68fb      	ldr	r3, [r7, #12]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20000c94 	.word	0x20000c94

08007460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007468:	f7ff f97e 	bl	8006768 <xTaskGetTickCount>
 800746c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <prvSampleTimeNow+0x3c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	429a      	cmp	r2, r3
 8007476:	d205      	bcs.n	8007484 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007478:	f000 f930 	bl	80076dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e002      	b.n	800748a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800748a:	4a04      	ldr	r2, [pc, #16]	; (800749c <prvSampleTimeNow+0x3c>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007490:	68fb      	ldr	r3, [r7, #12]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000ca4 	.word	0x20000ca4

080074a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d812      	bhi.n	80074ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d302      	bcc.n	80074da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074d4:	2301      	movs	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e01b      	b.n	8007512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <prvInsertTimerInActiveList+0x7c>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f7fd fdbe 	bl	8005066 <vListInsert>
 80074ea:	e012      	b.n	8007512 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d206      	bcs.n	8007502 <prvInsertTimerInActiveList+0x62>
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d302      	bcc.n	8007502 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074fc:	2301      	movs	r3, #1
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	e007      	b.n	8007512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <prvInsertTimerInActiveList+0x80>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f7fd fdaa 	bl	8005066 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007512:	697b      	ldr	r3, [r7, #20]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20000c98 	.word	0x20000c98
 8007520:	20000c94 	.word	0x20000c94

08007524 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08e      	sub	sp, #56	; 0x38
 8007528:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800752a:	e0c6      	b.n	80076ba <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da17      	bge.n	8007562 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007532:	1d3b      	adds	r3, r7, #4
 8007534:	3304      	adds	r3, #4
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <prvProcessReceivedCommands+0x2e>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e7fe      	b.n	8007550 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007558:	6850      	ldr	r0, [r2, #4]
 800755a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800755c:	6892      	ldr	r2, [r2, #8]
 800755e:	4611      	mov	r1, r2
 8007560:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f2c0 80a7 	blt.w	80076b8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	3304      	adds	r3, #4
 800757a:	4618      	mov	r0, r3
 800757c:	f7fd fdac 	bl	80050d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007580:	463b      	mov	r3, r7
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff ff6c 	bl	8007460 <prvSampleTimeNow>
 8007588:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b09      	cmp	r3, #9
 800758e:	f200 8094 	bhi.w	80076ba <prvProcessReceivedCommands+0x196>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <prvProcessReceivedCommands+0x74>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075c1 	.word	0x080075c1
 80075a4:	08007633 	.word	0x08007633
 80075a8:	08007647 	.word	0x08007647
 80075ac:	0800768f 	.word	0x0800768f
 80075b0:	080075c1 	.word	0x080075c1
 80075b4:	080075c1 	.word	0x080075c1
 80075b8:	08007633 	.word	0x08007633
 80075bc:	08007647 	.word	0x08007647
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	18d1      	adds	r1, r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e0:	f7ff ff5e 	bl	80074a0 <prvInsertTimerInActiveList>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d067      	beq.n	80076ba <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d05c      	beq.n	80076ba <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	441a      	add	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2300      	movs	r3, #0
 800760e:	2100      	movs	r1, #0
 8007610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007612:	f7ff fe09 	bl	8007228 <xTimerGenericCommand>
 8007616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d14d      	bne.n	80076ba <prvProcessReceivedCommands+0x196>
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	e7fe      	b.n	8007630 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	b2da      	uxtb	r2, r3
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007644:	e039      	b.n	80076ba <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764c:	f043 0301 	orr.w	r3, r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <prvProcessReceivedCommands+0x156>
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e7fe      	b.n	8007678 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	18d1      	adds	r1, r2, r3
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007688:	f7ff ff0a 	bl	80074a0 <prvInsertTimerInActiveList>
					break;
 800768c:	e015      	b.n	80076ba <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800769c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769e:	f000 fbc1 	bl	8007e24 <vPortFree>
 80076a2:	e00a      	b.n	80076ba <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076aa:	f023 0301 	bic.w	r3, r3, #1
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076b6:	e000      	b.n	80076ba <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80076b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076ba:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <prvProcessReceivedCommands+0x1b4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	1d39      	adds	r1, r7, #4
 80076c0:	2200      	movs	r2, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe f93a 	bl	800593c <xQueueReceive>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f47f af2e 	bne.w	800752c <prvProcessReceivedCommands+0x8>
	}
}
 80076d0:	bf00      	nop
 80076d2:	3730      	adds	r7, #48	; 0x30
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000c9c 	.word	0x20000c9c

080076dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e2:	e047      	b.n	8007774 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076e4:	4b2d      	ldr	r3, [pc, #180]	; (800779c <prvSwitchTimerLists+0xc0>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ee:	4b2b      	ldr	r3, [pc, #172]	; (800779c <prvSwitchTimerLists+0xc0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fd fceb 	bl	80050d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02d      	beq.n	8007774 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4413      	add	r3, r2
 8007720:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	429a      	cmp	r2, r3
 8007728:	d90e      	bls.n	8007748 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007736:	4b19      	ldr	r3, [pc, #100]	; (800779c <prvSwitchTimerLists+0xc0>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3304      	adds	r3, #4
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7fd fc90 	bl	8005066 <vListInsert>
 8007746:	e015      	b.n	8007774 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007748:	2300      	movs	r3, #0
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	2300      	movs	r3, #0
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	2100      	movs	r1, #0
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7ff fd68 	bl	8007228 <xTimerGenericCommand>
 8007758:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <prvSwitchTimerLists+0x98>
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	e7fe      	b.n	8007772 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007774:	4b09      	ldr	r3, [pc, #36]	; (800779c <prvSwitchTimerLists+0xc0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1b2      	bne.n	80076e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800777e:	4b07      	ldr	r3, [pc, #28]	; (800779c <prvSwitchTimerLists+0xc0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007784:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <prvSwitchTimerLists+0xc4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a04      	ldr	r2, [pc, #16]	; (800779c <prvSwitchTimerLists+0xc0>)
 800778a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800778c:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <prvSwitchTimerLists+0xc4>)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	6013      	str	r3, [r2, #0]
}
 8007792:	bf00      	nop
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000c94 	.word	0x20000c94
 80077a0:	20000c98 	.word	0x20000c98

080077a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077aa:	f000 f95f 	bl	8007a6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077ae:	4b15      	ldr	r3, [pc, #84]	; (8007804 <prvCheckForValidListAndQueue+0x60>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d120      	bne.n	80077f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077b6:	4814      	ldr	r0, [pc, #80]	; (8007808 <prvCheckForValidListAndQueue+0x64>)
 80077b8:	f7fd fc04 	bl	8004fc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077bc:	4813      	ldr	r0, [pc, #76]	; (800780c <prvCheckForValidListAndQueue+0x68>)
 80077be:	f7fd fc01 	bl	8004fc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <prvCheckForValidListAndQueue+0x6c>)
 80077c4:	4a10      	ldr	r2, [pc, #64]	; (8007808 <prvCheckForValidListAndQueue+0x64>)
 80077c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077c8:	4b12      	ldr	r3, [pc, #72]	; (8007814 <prvCheckForValidListAndQueue+0x70>)
 80077ca:	4a10      	ldr	r2, [pc, #64]	; (800780c <prvCheckForValidListAndQueue+0x68>)
 80077cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077ce:	2300      	movs	r3, #0
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <prvCheckForValidListAndQueue+0x74>)
 80077d4:	4a11      	ldr	r2, [pc, #68]	; (800781c <prvCheckForValidListAndQueue+0x78>)
 80077d6:	2110      	movs	r1, #16
 80077d8:	200a      	movs	r0, #10
 80077da:	f7fd fd0f 	bl	80051fc <xQueueGenericCreateStatic>
 80077de:	4602      	mov	r2, r0
 80077e0:	4b08      	ldr	r3, [pc, #32]	; (8007804 <prvCheckForValidListAndQueue+0x60>)
 80077e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <prvCheckForValidListAndQueue+0x60>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <prvCheckForValidListAndQueue+0x60>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	490b      	ldr	r1, [pc, #44]	; (8007820 <prvCheckForValidListAndQueue+0x7c>)
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe fc4e 	bl	8006094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077f8:	f000 f966 	bl	8007ac8 <vPortExitCritical>
}
 80077fc:	bf00      	nop
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000c9c 	.word	0x20000c9c
 8007808:	20000c6c 	.word	0x20000c6c
 800780c:	20000c80 	.word	0x20000c80
 8007810:	20000c94 	.word	0x20000c94
 8007814:	20000c98 	.word	0x20000c98
 8007818:	20000d48 	.word	0x20000d48
 800781c:	20000ca8 	.word	0x20000ca8
 8007820:	080089a4 	.word	0x080089a4

08007824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3b04      	subs	r3, #4
 8007834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800783c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b04      	subs	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f023 0201 	bic.w	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3b04      	subs	r3, #4
 8007852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007854:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <pxPortInitialiseStack+0x64>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3b14      	subs	r3, #20
 800785e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b04      	subs	r3, #4
 800786a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f06f 0202 	mvn.w	r2, #2
 8007872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3b20      	subs	r3, #32
 8007878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800787a:	68fb      	ldr	r3, [r7, #12]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	0800788d 	.word	0x0800788d

0800788c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007896:	4b11      	ldr	r3, [pc, #68]	; (80078dc <prvTaskExitError+0x50>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789e:	d009      	beq.n	80078b4 <prvTaskExitError+0x28>
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
 80078b2:	e7fe      	b.n	80078b2 <prvTaskExitError+0x26>
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078c6:	bf00      	nop
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0fc      	beq.n	80078c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	2000000c 	.word	0x2000000c

080078e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <pxCurrentTCBConst2>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f380 8809 	msr	PSP, r0
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	4770      	bx	lr
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst2>:
 8007900:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007908:	4808      	ldr	r0, [pc, #32]	; (800792c <prvPortStartFirstTask+0x24>)
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	f380 8808 	msr	MSP, r0
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8814 	msr	CONTROL, r0
 800791a:	b662      	cpsie	i
 800791c:	b661      	cpsie	f
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	df00      	svc	0
 8007928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800792a:	bf00      	nop
 800792c:	e000ed08 	.word	0xe000ed08

08007930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007936:	4b44      	ldr	r3, [pc, #272]	; (8007a48 <xPortStartScheduler+0x118>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a44      	ldr	r2, [pc, #272]	; (8007a4c <xPortStartScheduler+0x11c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d109      	bne.n	8007954 <xPortStartScheduler+0x24>
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	e7fe      	b.n	8007952 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007954:	4b3c      	ldr	r3, [pc, #240]	; (8007a48 <xPortStartScheduler+0x118>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a3d      	ldr	r2, [pc, #244]	; (8007a50 <xPortStartScheduler+0x120>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d109      	bne.n	8007972 <xPortStartScheduler+0x42>
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	e7fe      	b.n	8007970 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007972:	4b38      	ldr	r3, [pc, #224]	; (8007a54 <xPortStartScheduler+0x124>)
 8007974:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	22ff      	movs	r2, #255	; 0xff
 8007982:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007994:	b2da      	uxtb	r2, r3
 8007996:	4b30      	ldr	r3, [pc, #192]	; (8007a58 <xPortStartScheduler+0x128>)
 8007998:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800799a:	4b30      	ldr	r3, [pc, #192]	; (8007a5c <xPortStartScheduler+0x12c>)
 800799c:	2207      	movs	r2, #7
 800799e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079a0:	e009      	b.n	80079b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80079a2:	4b2e      	ldr	r3, [pc, #184]	; (8007a5c <xPortStartScheduler+0x12c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4a2c      	ldr	r2, [pc, #176]	; (8007a5c <xPortStartScheduler+0x12c>)
 80079aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d0ef      	beq.n	80079a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079c2:	4b26      	ldr	r3, [pc, #152]	; (8007a5c <xPortStartScheduler+0x12c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f1c3 0307 	rsb	r3, r3, #7
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d009      	beq.n	80079e2 <xPortStartScheduler+0xb2>
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60bb      	str	r3, [r7, #8]
 80079e0:	e7fe      	b.n	80079e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079e2:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <xPortStartScheduler+0x12c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <xPortStartScheduler+0x12c>)
 80079ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <xPortStartScheduler+0x12c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079f4:	4a19      	ldr	r2, [pc, #100]	; (8007a5c <xPortStartScheduler+0x12c>)
 80079f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <xPortStartScheduler+0x130>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <xPortStartScheduler+0x130>)
 8007a06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a0c:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <xPortStartScheduler+0x130>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <xPortStartScheduler+0x130>)
 8007a12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a18:	f000 f8d6 	bl	8007bc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a1c:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <xPortStartScheduler+0x134>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a22:	f000 f8f5 	bl	8007c10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a26:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a0f      	ldr	r2, [pc, #60]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a32:	f7ff ff69 	bl	8007908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a36:	f7fe ff5f 	bl	80068f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007a3a:	f7ff ff27 	bl	800788c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	e000ed00 	.word	0xe000ed00
 8007a4c:	410fc271 	.word	0x410fc271
 8007a50:	410fc270 	.word	0x410fc270
 8007a54:	e000e400 	.word	0xe000e400
 8007a58:	20000d98 	.word	0x20000d98
 8007a5c:	20000d9c 	.word	0x20000d9c
 8007a60:	e000ed20 	.word	0xe000ed20
 8007a64:	2000000c 	.word	0x2000000c
 8007a68:	e000ef34 	.word	0xe000ef34

08007a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a84:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <vPortEnterCritical+0x54>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	4a0d      	ldr	r2, [pc, #52]	; (8007ac0 <vPortEnterCritical+0x54>)
 8007a8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <vPortEnterCritical+0x54>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10e      	bne.n	8007ab4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a96:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <vPortEnterCritical+0x58>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <vPortEnterCritical+0x48>
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	603b      	str	r3, [r7, #0]
 8007ab2:	e7fe      	b.n	8007ab2 <vPortEnterCritical+0x46>
	}
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	2000000c 	.word	0x2000000c
 8007ac4:	e000ed04 	.word	0xe000ed04

08007ac8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ace:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <vPortExitCritical+0x4c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <vPortExitCritical+0x22>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	607b      	str	r3, [r7, #4]
 8007ae8:	e7fe      	b.n	8007ae8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007aea:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <vPortExitCritical+0x4c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <vPortExitCritical+0x4c>)
 8007af2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007af4:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <vPortExitCritical+0x4c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <vPortExitCritical+0x3e>
 8007afc:	2300      	movs	r3, #0
 8007afe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000000c 	.word	0x2000000c
	...

08007b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b20:	f3ef 8009 	mrs	r0, PSP
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <pxCurrentTCBConst>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f01e 0f10 	tst.w	lr, #16
 8007b30:	bf08      	it	eq
 8007b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	6010      	str	r0, [r2, #0]
 8007b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b44:	f380 8811 	msr	BASEPRI, r0
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f7fe fed2 	bl	80068f8 <vTaskSwitchContext>
 8007b54:	f04f 0000 	mov.w	r0, #0
 8007b58:	f380 8811 	msr	BASEPRI, r0
 8007b5c:	bc09      	pop	{r0, r3}
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	6808      	ldr	r0, [r1, #0]
 8007b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b66:	f01e 0f10 	tst.w	lr, #16
 8007b6a:	bf08      	it	eq
 8007b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b70:	f380 8809 	msr	PSP, r0
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst>:
 8007b80:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ba0:	f7fe fdf2 	bl	8006788 <xTaskIncrementTick>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <SysTick_Handler+0x3c>)
 8007bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <vPortSetupTimerInterrupt+0x34>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bd2:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <vPortSetupTimerInterrupt+0x38>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <vPortSetupTimerInterrupt+0x3c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <vPortSetupTimerInterrupt+0x40>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	099b      	lsrs	r3, r3, #6
 8007be4:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <vPortSetupTimerInterrupt+0x44>)
 8007be6:	3b01      	subs	r3, #1
 8007be8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bea:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <vPortSetupTimerInterrupt+0x34>)
 8007bec:	2207      	movs	r2, #7
 8007bee:	601a      	str	r2, [r3, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	e000e010 	.word	0xe000e010
 8007c00:	e000e018 	.word	0xe000e018
 8007c04:	20000000 	.word	0x20000000
 8007c08:	10624dd3 	.word	0x10624dd3
 8007c0c:	e000e014 	.word	0xe000e014

08007c10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c20 <vPortEnableVFP+0x10>
 8007c14:	6801      	ldr	r1, [r0, #0]
 8007c16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c1a:	6001      	str	r1, [r0, #0]
 8007c1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c1e:	bf00      	nop
 8007c20:	e000ed88 	.word	0xe000ed88

08007c24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c2a:	f3ef 8305 	mrs	r3, IPSR
 8007c2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b0f      	cmp	r3, #15
 8007c34:	d913      	bls.n	8007c5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c36:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <vPortValidateInterruptPriority+0x6c>)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c40:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <vPortValidateInterruptPriority+0x70>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	7afa      	ldrb	r2, [r7, #11]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d209      	bcs.n	8007c5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e7fe      	b.n	8007c5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <vPortValidateInterruptPriority+0x74>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <vPortValidateInterruptPriority+0x78>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d909      	bls.n	8007c82 <vPortValidateInterruptPriority+0x5e>
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	e7fe      	b.n	8007c80 <vPortValidateInterruptPriority+0x5c>
	}
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	e000e3f0 	.word	0xe000e3f0
 8007c94:	20000d98 	.word	0x20000d98
 8007c98:	e000ed0c 	.word	0xe000ed0c
 8007c9c:	20000d9c 	.word	0x20000d9c

08007ca0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08a      	sub	sp, #40	; 0x28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cac:	f7fe fcb2 	bl	8006614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cb0:	4b57      	ldr	r3, [pc, #348]	; (8007e10 <pvPortMalloc+0x170>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cb8:	f000 f90c 	bl	8007ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cbc:	4b55      	ldr	r3, [pc, #340]	; (8007e14 <pvPortMalloc+0x174>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f040 808c 	bne.w	8007de2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01c      	beq.n	8007d0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d013      	beq.n	8007d0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f023 0307 	bic.w	r3, r3, #7
 8007ce8:	3308      	adds	r3, #8
 8007cea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <pvPortMalloc+0x6a>
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	e7fe      	b.n	8007d08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d068      	beq.n	8007de2 <pvPortMalloc+0x142>
 8007d10:	4b41      	ldr	r3, [pc, #260]	; (8007e18 <pvPortMalloc+0x178>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d863      	bhi.n	8007de2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d1a:	4b40      	ldr	r3, [pc, #256]	; (8007e1c <pvPortMalloc+0x17c>)
 8007d1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d1e:	4b3f      	ldr	r3, [pc, #252]	; (8007e1c <pvPortMalloc+0x17c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d24:	e004      	b.n	8007d30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d903      	bls.n	8007d42 <pvPortMalloc+0xa2>
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1f1      	bne.n	8007d26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d42:	4b33      	ldr	r3, [pc, #204]	; (8007e10 <pvPortMalloc+0x170>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d04a      	beq.n	8007de2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2208      	movs	r2, #8
 8007d52:	4413      	add	r3, r2
 8007d54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	1ad2      	subs	r2, r2, r3
 8007d66:	2308      	movs	r3, #8
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d91e      	bls.n	8007dac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4413      	add	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f003 0307 	and.w	r3, r3, #7
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d009      	beq.n	8007d94 <pvPortMalloc+0xf4>
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	613b      	str	r3, [r7, #16]
 8007d92:	e7fe      	b.n	8007d92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007da6:	69b8      	ldr	r0, [r7, #24]
 8007da8:	f000 f8f6 	bl	8007f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <pvPortMalloc+0x178>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <pvPortMalloc+0x178>)
 8007db8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dba:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <pvPortMalloc+0x178>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b18      	ldr	r3, [pc, #96]	; (8007e20 <pvPortMalloc+0x180>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d203      	bcs.n	8007dce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dc6:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <pvPortMalloc+0x178>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <pvPortMalloc+0x180>)
 8007dcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <pvPortMalloc+0x174>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007de2:	f7fe fc25 	bl	8006630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <pvPortMalloc+0x164>
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	e7fe      	b.n	8007e02 <pvPortMalloc+0x162>
	return pvReturn;
 8007e04:	69fb      	ldr	r3, [r7, #28]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3728      	adds	r7, #40	; 0x28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200030d0 	.word	0x200030d0
 8007e14:	200030dc 	.word	0x200030dc
 8007e18:	200030d4 	.word	0x200030d4
 8007e1c:	200030c8 	.word	0x200030c8
 8007e20:	200030d8 	.word	0x200030d8

08007e24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d046      	beq.n	8007ec4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e36:	2308      	movs	r3, #8
 8007e38:	425b      	negs	r3, r3
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	4b20      	ldr	r3, [pc, #128]	; (8007ecc <vPortFree+0xa8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <vPortFree+0x42>
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e7fe      	b.n	8007e64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <vPortFree+0x5e>
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60bb      	str	r3, [r7, #8]
 8007e80:	e7fe      	b.n	8007e80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <vPortFree+0xa8>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d019      	beq.n	8007ec4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d115      	bne.n	8007ec4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <vPortFree+0xa8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	401a      	ands	r2, r3
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ea8:	f7fe fbb4 	bl	8006614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <vPortFree+0xac>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4a06      	ldr	r2, [pc, #24]	; (8007ed0 <vPortFree+0xac>)
 8007eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eba:	6938      	ldr	r0, [r7, #16]
 8007ebc:	f000 f86c 	bl	8007f98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ec0:	f7fe fbb6 	bl	8006630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ec4:	bf00      	nop
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	200030dc 	.word	0x200030dc
 8007ed0:	200030d4 	.word	0x200030d4

08007ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eda:	f242 3328 	movw	r3, #9000	; 0x2328
 8007ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ee0:	4b27      	ldr	r3, [pc, #156]	; (8007f80 <prvHeapInit+0xac>)
 8007ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3307      	adds	r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0307 	bic.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <prvHeapInit+0xac>)
 8007f04:	4413      	add	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f0c:	4a1d      	ldr	r2, [pc, #116]	; (8007f84 <prvHeapInit+0xb0>)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f12:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <prvHeapInit+0xb0>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f20:	2208      	movs	r2, #8
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0307 	bic.w	r3, r3, #7
 8007f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <prvHeapInit+0xb4>)
 8007f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f36:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <prvHeapInit+0xb4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f3e:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <prvHeapInit+0xb4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <prvHeapInit+0xb4>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <prvHeapInit+0xb8>)
 8007f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <prvHeapInit+0xbc>)
 8007f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f6c:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <prvHeapInit+0xc0>)
 8007f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f72:	601a      	str	r2, [r3, #0]
}
 8007f74:	bf00      	nop
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20000da0 	.word	0x20000da0
 8007f84:	200030c8 	.word	0x200030c8
 8007f88:	200030d0 	.word	0x200030d0
 8007f8c:	200030d8 	.word	0x200030d8
 8007f90:	200030d4 	.word	0x200030d4
 8007f94:	200030dc 	.word	0x200030dc

08007f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fa0:	4b28      	ldr	r3, [pc, #160]	; (8008044 <prvInsertBlockIntoFreeList+0xac>)
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e002      	b.n	8007fac <prvInsertBlockIntoFreeList+0x14>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d8f7      	bhi.n	8007fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d108      	bne.n	8007fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d118      	bne.n	8008020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <prvInsertBlockIntoFreeList+0xb0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d00d      	beq.n	8008016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	441a      	add	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e008      	b.n	8008028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008016:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <prvInsertBlockIntoFreeList+0xb0>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e003      	b.n	8008028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	429a      	cmp	r2, r3
 800802e:	d002      	beq.n	8008036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	200030c8 	.word	0x200030c8
 8008048:	200030d0 	.word	0x200030d0

0800804c <__errno>:
 800804c:	4b01      	ldr	r3, [pc, #4]	; (8008054 <__errno+0x8>)
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000010 	.word	0x20000010

08008058 <__libc_init_array>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	4e0d      	ldr	r6, [pc, #52]	; (8008090 <__libc_init_array+0x38>)
 800805c:	4c0d      	ldr	r4, [pc, #52]	; (8008094 <__libc_init_array+0x3c>)
 800805e:	1ba4      	subs	r4, r4, r6
 8008060:	10a4      	asrs	r4, r4, #2
 8008062:	2500      	movs	r5, #0
 8008064:	42a5      	cmp	r5, r4
 8008066:	d109      	bne.n	800807c <__libc_init_array+0x24>
 8008068:	4e0b      	ldr	r6, [pc, #44]	; (8008098 <__libc_init_array+0x40>)
 800806a:	4c0c      	ldr	r4, [pc, #48]	; (800809c <__libc_init_array+0x44>)
 800806c:	f000 fc30 	bl	80088d0 <_init>
 8008070:	1ba4      	subs	r4, r4, r6
 8008072:	10a4      	asrs	r4, r4, #2
 8008074:	2500      	movs	r5, #0
 8008076:	42a5      	cmp	r5, r4
 8008078:	d105      	bne.n	8008086 <__libc_init_array+0x2e>
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008080:	4798      	blx	r3
 8008082:	3501      	adds	r5, #1
 8008084:	e7ee      	b.n	8008064 <__libc_init_array+0xc>
 8008086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800808a:	4798      	blx	r3
 800808c:	3501      	adds	r5, #1
 800808e:	e7f2      	b.n	8008076 <__libc_init_array+0x1e>
 8008090:	08008ae0 	.word	0x08008ae0
 8008094:	08008ae0 	.word	0x08008ae0
 8008098:	08008ae0 	.word	0x08008ae0
 800809c:	08008ae4 	.word	0x08008ae4

080080a0 <malloc>:
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <malloc+0xc>)
 80080a2:	4601      	mov	r1, r0
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	f000 b865 	b.w	8008174 <_malloc_r>
 80080aa:	bf00      	nop
 80080ac:	20000010 	.word	0x20000010

080080b0 <memcpy>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	1e43      	subs	r3, r0, #1
 80080b4:	440a      	add	r2, r1
 80080b6:	4291      	cmp	r1, r2
 80080b8:	d100      	bne.n	80080bc <memcpy+0xc>
 80080ba:	bd10      	pop	{r4, pc}
 80080bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080c4:	e7f7      	b.n	80080b6 <memcpy+0x6>

080080c6 <memset>:
 80080c6:	4402      	add	r2, r0
 80080c8:	4603      	mov	r3, r0
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d100      	bne.n	80080d0 <memset+0xa>
 80080ce:	4770      	bx	lr
 80080d0:	f803 1b01 	strb.w	r1, [r3], #1
 80080d4:	e7f9      	b.n	80080ca <memset+0x4>
	...

080080d8 <_free_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4605      	mov	r5, r0
 80080dc:	2900      	cmp	r1, #0
 80080de:	d045      	beq.n	800816c <_free_r+0x94>
 80080e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e4:	1f0c      	subs	r4, r1, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bfb8      	it	lt
 80080ea:	18e4      	addlt	r4, r4, r3
 80080ec:	f000 f8cc 	bl	8008288 <__malloc_lock>
 80080f0:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <_free_r+0x98>)
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	4610      	mov	r0, r2
 80080f6:	b933      	cbnz	r3, 8008106 <_free_r+0x2e>
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	6014      	str	r4, [r2, #0]
 80080fc:	4628      	mov	r0, r5
 80080fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008102:	f000 b8c2 	b.w	800828a <__malloc_unlock>
 8008106:	42a3      	cmp	r3, r4
 8008108:	d90c      	bls.n	8008124 <_free_r+0x4c>
 800810a:	6821      	ldr	r1, [r4, #0]
 800810c:	1862      	adds	r2, r4, r1
 800810e:	4293      	cmp	r3, r2
 8008110:	bf04      	itt	eq
 8008112:	681a      	ldreq	r2, [r3, #0]
 8008114:	685b      	ldreq	r3, [r3, #4]
 8008116:	6063      	str	r3, [r4, #4]
 8008118:	bf04      	itt	eq
 800811a:	1852      	addeq	r2, r2, r1
 800811c:	6022      	streq	r2, [r4, #0]
 800811e:	6004      	str	r4, [r0, #0]
 8008120:	e7ec      	b.n	80080fc <_free_r+0x24>
 8008122:	4613      	mov	r3, r2
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	b10a      	cbz	r2, 800812c <_free_r+0x54>
 8008128:	42a2      	cmp	r2, r4
 800812a:	d9fa      	bls.n	8008122 <_free_r+0x4a>
 800812c:	6819      	ldr	r1, [r3, #0]
 800812e:	1858      	adds	r0, r3, r1
 8008130:	42a0      	cmp	r0, r4
 8008132:	d10b      	bne.n	800814c <_free_r+0x74>
 8008134:	6820      	ldr	r0, [r4, #0]
 8008136:	4401      	add	r1, r0
 8008138:	1858      	adds	r0, r3, r1
 800813a:	4282      	cmp	r2, r0
 800813c:	6019      	str	r1, [r3, #0]
 800813e:	d1dd      	bne.n	80080fc <_free_r+0x24>
 8008140:	6810      	ldr	r0, [r2, #0]
 8008142:	6852      	ldr	r2, [r2, #4]
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	4401      	add	r1, r0
 8008148:	6019      	str	r1, [r3, #0]
 800814a:	e7d7      	b.n	80080fc <_free_r+0x24>
 800814c:	d902      	bls.n	8008154 <_free_r+0x7c>
 800814e:	230c      	movs	r3, #12
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	e7d3      	b.n	80080fc <_free_r+0x24>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	1821      	adds	r1, r4, r0
 8008158:	428a      	cmp	r2, r1
 800815a:	bf04      	itt	eq
 800815c:	6811      	ldreq	r1, [r2, #0]
 800815e:	6852      	ldreq	r2, [r2, #4]
 8008160:	6062      	str	r2, [r4, #4]
 8008162:	bf04      	itt	eq
 8008164:	1809      	addeq	r1, r1, r0
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	605c      	str	r4, [r3, #4]
 800816a:	e7c7      	b.n	80080fc <_free_r+0x24>
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	bf00      	nop
 8008170:	200030e0 	.word	0x200030e0

08008174 <_malloc_r>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	1ccd      	adds	r5, r1, #3
 8008178:	f025 0503 	bic.w	r5, r5, #3
 800817c:	3508      	adds	r5, #8
 800817e:	2d0c      	cmp	r5, #12
 8008180:	bf38      	it	cc
 8008182:	250c      	movcc	r5, #12
 8008184:	2d00      	cmp	r5, #0
 8008186:	4606      	mov	r6, r0
 8008188:	db01      	blt.n	800818e <_malloc_r+0x1a>
 800818a:	42a9      	cmp	r1, r5
 800818c:	d903      	bls.n	8008196 <_malloc_r+0x22>
 800818e:	230c      	movs	r3, #12
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	2000      	movs	r0, #0
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	f000 f877 	bl	8008288 <__malloc_lock>
 800819a:	4a21      	ldr	r2, [pc, #132]	; (8008220 <_malloc_r+0xac>)
 800819c:	6814      	ldr	r4, [r2, #0]
 800819e:	4621      	mov	r1, r4
 80081a0:	b991      	cbnz	r1, 80081c8 <_malloc_r+0x54>
 80081a2:	4c20      	ldr	r4, [pc, #128]	; (8008224 <_malloc_r+0xb0>)
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	b91b      	cbnz	r3, 80081b0 <_malloc_r+0x3c>
 80081a8:	4630      	mov	r0, r6
 80081aa:	f000 f83d 	bl	8008228 <_sbrk_r>
 80081ae:	6020      	str	r0, [r4, #0]
 80081b0:	4629      	mov	r1, r5
 80081b2:	4630      	mov	r0, r6
 80081b4:	f000 f838 	bl	8008228 <_sbrk_r>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d124      	bne.n	8008206 <_malloc_r+0x92>
 80081bc:	230c      	movs	r3, #12
 80081be:	6033      	str	r3, [r6, #0]
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f862 	bl	800828a <__malloc_unlock>
 80081c6:	e7e4      	b.n	8008192 <_malloc_r+0x1e>
 80081c8:	680b      	ldr	r3, [r1, #0]
 80081ca:	1b5b      	subs	r3, r3, r5
 80081cc:	d418      	bmi.n	8008200 <_malloc_r+0x8c>
 80081ce:	2b0b      	cmp	r3, #11
 80081d0:	d90f      	bls.n	80081f2 <_malloc_r+0x7e>
 80081d2:	600b      	str	r3, [r1, #0]
 80081d4:	50cd      	str	r5, [r1, r3]
 80081d6:	18cc      	adds	r4, r1, r3
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f856 	bl	800828a <__malloc_unlock>
 80081de:	f104 000b 	add.w	r0, r4, #11
 80081e2:	1d23      	adds	r3, r4, #4
 80081e4:	f020 0007 	bic.w	r0, r0, #7
 80081e8:	1ac3      	subs	r3, r0, r3
 80081ea:	d0d3      	beq.n	8008194 <_malloc_r+0x20>
 80081ec:	425a      	negs	r2, r3
 80081ee:	50e2      	str	r2, [r4, r3]
 80081f0:	e7d0      	b.n	8008194 <_malloc_r+0x20>
 80081f2:	428c      	cmp	r4, r1
 80081f4:	684b      	ldr	r3, [r1, #4]
 80081f6:	bf16      	itet	ne
 80081f8:	6063      	strne	r3, [r4, #4]
 80081fa:	6013      	streq	r3, [r2, #0]
 80081fc:	460c      	movne	r4, r1
 80081fe:	e7eb      	b.n	80081d8 <_malloc_r+0x64>
 8008200:	460c      	mov	r4, r1
 8008202:	6849      	ldr	r1, [r1, #4]
 8008204:	e7cc      	b.n	80081a0 <_malloc_r+0x2c>
 8008206:	1cc4      	adds	r4, r0, #3
 8008208:	f024 0403 	bic.w	r4, r4, #3
 800820c:	42a0      	cmp	r0, r4
 800820e:	d005      	beq.n	800821c <_malloc_r+0xa8>
 8008210:	1a21      	subs	r1, r4, r0
 8008212:	4630      	mov	r0, r6
 8008214:	f000 f808 	bl	8008228 <_sbrk_r>
 8008218:	3001      	adds	r0, #1
 800821a:	d0cf      	beq.n	80081bc <_malloc_r+0x48>
 800821c:	6025      	str	r5, [r4, #0]
 800821e:	e7db      	b.n	80081d8 <_malloc_r+0x64>
 8008220:	200030e0 	.word	0x200030e0
 8008224:	200030e4 	.word	0x200030e4

08008228 <_sbrk_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4c06      	ldr	r4, [pc, #24]	; (8008244 <_sbrk_r+0x1c>)
 800822c:	2300      	movs	r3, #0
 800822e:	4605      	mov	r5, r0
 8008230:	4608      	mov	r0, r1
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	f7f9 f822 	bl	800127c <_sbrk>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_sbrk_r+0x1a>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	b103      	cbz	r3, 8008242 <_sbrk_r+0x1a>
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	200032a8 	.word	0x200032a8

08008248 <siprintf>:
 8008248:	b40e      	push	{r1, r2, r3}
 800824a:	b500      	push	{lr}
 800824c:	b09c      	sub	sp, #112	; 0x70
 800824e:	ab1d      	add	r3, sp, #116	; 0x74
 8008250:	9002      	str	r0, [sp, #8]
 8008252:	9006      	str	r0, [sp, #24]
 8008254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008258:	4809      	ldr	r0, [pc, #36]	; (8008280 <siprintf+0x38>)
 800825a:	9107      	str	r1, [sp, #28]
 800825c:	9104      	str	r1, [sp, #16]
 800825e:	4909      	ldr	r1, [pc, #36]	; (8008284 <siprintf+0x3c>)
 8008260:	f853 2b04 	ldr.w	r2, [r3], #4
 8008264:	9105      	str	r1, [sp, #20]
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	a902      	add	r1, sp, #8
 800826c:	f000 f868 	bl	8008340 <_svfiprintf_r>
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	b01c      	add	sp, #112	; 0x70
 8008278:	f85d eb04 	ldr.w	lr, [sp], #4
 800827c:	b003      	add	sp, #12
 800827e:	4770      	bx	lr
 8008280:	20000010 	.word	0x20000010
 8008284:	ffff0208 	.word	0xffff0208

08008288 <__malloc_lock>:
 8008288:	4770      	bx	lr

0800828a <__malloc_unlock>:
 800828a:	4770      	bx	lr

0800828c <__ssputs_r>:
 800828c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008290:	688e      	ldr	r6, [r1, #8]
 8008292:	429e      	cmp	r6, r3
 8008294:	4682      	mov	sl, r0
 8008296:	460c      	mov	r4, r1
 8008298:	4690      	mov	r8, r2
 800829a:	4699      	mov	r9, r3
 800829c:	d837      	bhi.n	800830e <__ssputs_r+0x82>
 800829e:	898a      	ldrh	r2, [r1, #12]
 80082a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082a4:	d031      	beq.n	800830a <__ssputs_r+0x7e>
 80082a6:	6825      	ldr	r5, [r4, #0]
 80082a8:	6909      	ldr	r1, [r1, #16]
 80082aa:	1a6f      	subs	r7, r5, r1
 80082ac:	6965      	ldr	r5, [r4, #20]
 80082ae:	2302      	movs	r3, #2
 80082b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80082b8:	f109 0301 	add.w	r3, r9, #1
 80082bc:	443b      	add	r3, r7
 80082be:	429d      	cmp	r5, r3
 80082c0:	bf38      	it	cc
 80082c2:	461d      	movcc	r5, r3
 80082c4:	0553      	lsls	r3, r2, #21
 80082c6:	d530      	bpl.n	800832a <__ssputs_r+0x9e>
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7ff ff53 	bl	8008174 <_malloc_r>
 80082ce:	4606      	mov	r6, r0
 80082d0:	b950      	cbnz	r0, 80082e8 <__ssputs_r+0x5c>
 80082d2:	230c      	movs	r3, #12
 80082d4:	f8ca 3000 	str.w	r3, [sl]
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295
 80082e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e8:	463a      	mov	r2, r7
 80082ea:	6921      	ldr	r1, [r4, #16]
 80082ec:	f7ff fee0 	bl	80080b0 <memcpy>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	6126      	str	r6, [r4, #16]
 80082fe:	6165      	str	r5, [r4, #20]
 8008300:	443e      	add	r6, r7
 8008302:	1bed      	subs	r5, r5, r7
 8008304:	6026      	str	r6, [r4, #0]
 8008306:	60a5      	str	r5, [r4, #8]
 8008308:	464e      	mov	r6, r9
 800830a:	454e      	cmp	r6, r9
 800830c:	d900      	bls.n	8008310 <__ssputs_r+0x84>
 800830e:	464e      	mov	r6, r9
 8008310:	4632      	mov	r2, r6
 8008312:	4641      	mov	r1, r8
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	f000 fa93 	bl	8008840 <memmove>
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	1b9b      	subs	r3, r3, r6
 800831e:	60a3      	str	r3, [r4, #8]
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	441e      	add	r6, r3
 8008324:	6026      	str	r6, [r4, #0]
 8008326:	2000      	movs	r0, #0
 8008328:	e7dc      	b.n	80082e4 <__ssputs_r+0x58>
 800832a:	462a      	mov	r2, r5
 800832c:	f000 faa1 	bl	8008872 <_realloc_r>
 8008330:	4606      	mov	r6, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	d1e2      	bne.n	80082fc <__ssputs_r+0x70>
 8008336:	6921      	ldr	r1, [r4, #16]
 8008338:	4650      	mov	r0, sl
 800833a:	f7ff fecd 	bl	80080d8 <_free_r>
 800833e:	e7c8      	b.n	80082d2 <__ssputs_r+0x46>

08008340 <_svfiprintf_r>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	461d      	mov	r5, r3
 8008346:	898b      	ldrh	r3, [r1, #12]
 8008348:	061f      	lsls	r7, r3, #24
 800834a:	b09d      	sub	sp, #116	; 0x74
 800834c:	4680      	mov	r8, r0
 800834e:	460c      	mov	r4, r1
 8008350:	4616      	mov	r6, r2
 8008352:	d50f      	bpl.n	8008374 <_svfiprintf_r+0x34>
 8008354:	690b      	ldr	r3, [r1, #16]
 8008356:	b96b      	cbnz	r3, 8008374 <_svfiprintf_r+0x34>
 8008358:	2140      	movs	r1, #64	; 0x40
 800835a:	f7ff ff0b 	bl	8008174 <_malloc_r>
 800835e:	6020      	str	r0, [r4, #0]
 8008360:	6120      	str	r0, [r4, #16]
 8008362:	b928      	cbnz	r0, 8008370 <_svfiprintf_r+0x30>
 8008364:	230c      	movs	r3, #12
 8008366:	f8c8 3000 	str.w	r3, [r8]
 800836a:	f04f 30ff 	mov.w	r0, #4294967295
 800836e:	e0c8      	b.n	8008502 <_svfiprintf_r+0x1c2>
 8008370:	2340      	movs	r3, #64	; 0x40
 8008372:	6163      	str	r3, [r4, #20]
 8008374:	2300      	movs	r3, #0
 8008376:	9309      	str	r3, [sp, #36]	; 0x24
 8008378:	2320      	movs	r3, #32
 800837a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800837e:	2330      	movs	r3, #48	; 0x30
 8008380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008384:	9503      	str	r5, [sp, #12]
 8008386:	f04f 0b01 	mov.w	fp, #1
 800838a:	4637      	mov	r7, r6
 800838c:	463d      	mov	r5, r7
 800838e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008392:	b10b      	cbz	r3, 8008398 <_svfiprintf_r+0x58>
 8008394:	2b25      	cmp	r3, #37	; 0x25
 8008396:	d13e      	bne.n	8008416 <_svfiprintf_r+0xd6>
 8008398:	ebb7 0a06 	subs.w	sl, r7, r6
 800839c:	d00b      	beq.n	80083b6 <_svfiprintf_r+0x76>
 800839e:	4653      	mov	r3, sl
 80083a0:	4632      	mov	r2, r6
 80083a2:	4621      	mov	r1, r4
 80083a4:	4640      	mov	r0, r8
 80083a6:	f7ff ff71 	bl	800828c <__ssputs_r>
 80083aa:	3001      	adds	r0, #1
 80083ac:	f000 80a4 	beq.w	80084f8 <_svfiprintf_r+0x1b8>
 80083b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b2:	4453      	add	r3, sl
 80083b4:	9309      	str	r3, [sp, #36]	; 0x24
 80083b6:	783b      	ldrb	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 809d 	beq.w	80084f8 <_svfiprintf_r+0x1b8>
 80083be:	2300      	movs	r3, #0
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	9307      	str	r3, [sp, #28]
 80083cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083d0:	931a      	str	r3, [sp, #104]	; 0x68
 80083d2:	462f      	mov	r7, r5
 80083d4:	2205      	movs	r2, #5
 80083d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083da:	4850      	ldr	r0, [pc, #320]	; (800851c <_svfiprintf_r+0x1dc>)
 80083dc:	f7f7 ff00 	bl	80001e0 <memchr>
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	b9d0      	cbnz	r0, 800841a <_svfiprintf_r+0xda>
 80083e4:	06d9      	lsls	r1, r3, #27
 80083e6:	bf44      	itt	mi
 80083e8:	2220      	movmi	r2, #32
 80083ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083ee:	071a      	lsls	r2, r3, #28
 80083f0:	bf44      	itt	mi
 80083f2:	222b      	movmi	r2, #43	; 0x2b
 80083f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083f8:	782a      	ldrb	r2, [r5, #0]
 80083fa:	2a2a      	cmp	r2, #42	; 0x2a
 80083fc:	d015      	beq.n	800842a <_svfiprintf_r+0xea>
 80083fe:	9a07      	ldr	r2, [sp, #28]
 8008400:	462f      	mov	r7, r5
 8008402:	2000      	movs	r0, #0
 8008404:	250a      	movs	r5, #10
 8008406:	4639      	mov	r1, r7
 8008408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800840c:	3b30      	subs	r3, #48	; 0x30
 800840e:	2b09      	cmp	r3, #9
 8008410:	d94d      	bls.n	80084ae <_svfiprintf_r+0x16e>
 8008412:	b1b8      	cbz	r0, 8008444 <_svfiprintf_r+0x104>
 8008414:	e00f      	b.n	8008436 <_svfiprintf_r+0xf6>
 8008416:	462f      	mov	r7, r5
 8008418:	e7b8      	b.n	800838c <_svfiprintf_r+0x4c>
 800841a:	4a40      	ldr	r2, [pc, #256]	; (800851c <_svfiprintf_r+0x1dc>)
 800841c:	1a80      	subs	r0, r0, r2
 800841e:	fa0b f000 	lsl.w	r0, fp, r0
 8008422:	4318      	orrs	r0, r3
 8008424:	9004      	str	r0, [sp, #16]
 8008426:	463d      	mov	r5, r7
 8008428:	e7d3      	b.n	80083d2 <_svfiprintf_r+0x92>
 800842a:	9a03      	ldr	r2, [sp, #12]
 800842c:	1d11      	adds	r1, r2, #4
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	9103      	str	r1, [sp, #12]
 8008432:	2a00      	cmp	r2, #0
 8008434:	db01      	blt.n	800843a <_svfiprintf_r+0xfa>
 8008436:	9207      	str	r2, [sp, #28]
 8008438:	e004      	b.n	8008444 <_svfiprintf_r+0x104>
 800843a:	4252      	negs	r2, r2
 800843c:	f043 0302 	orr.w	r3, r3, #2
 8008440:	9207      	str	r2, [sp, #28]
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	783b      	ldrb	r3, [r7, #0]
 8008446:	2b2e      	cmp	r3, #46	; 0x2e
 8008448:	d10c      	bne.n	8008464 <_svfiprintf_r+0x124>
 800844a:	787b      	ldrb	r3, [r7, #1]
 800844c:	2b2a      	cmp	r3, #42	; 0x2a
 800844e:	d133      	bne.n	80084b8 <_svfiprintf_r+0x178>
 8008450:	9b03      	ldr	r3, [sp, #12]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	9203      	str	r2, [sp, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	bfb8      	it	lt
 800845c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008460:	3702      	adds	r7, #2
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	4d2e      	ldr	r5, [pc, #184]	; (8008520 <_svfiprintf_r+0x1e0>)
 8008466:	7839      	ldrb	r1, [r7, #0]
 8008468:	2203      	movs	r2, #3
 800846a:	4628      	mov	r0, r5
 800846c:	f7f7 feb8 	bl	80001e0 <memchr>
 8008470:	b138      	cbz	r0, 8008482 <_svfiprintf_r+0x142>
 8008472:	2340      	movs	r3, #64	; 0x40
 8008474:	1b40      	subs	r0, r0, r5
 8008476:	fa03 f000 	lsl.w	r0, r3, r0
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	4303      	orrs	r3, r0
 800847e:	3701      	adds	r7, #1
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	7839      	ldrb	r1, [r7, #0]
 8008484:	4827      	ldr	r0, [pc, #156]	; (8008524 <_svfiprintf_r+0x1e4>)
 8008486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800848a:	2206      	movs	r2, #6
 800848c:	1c7e      	adds	r6, r7, #1
 800848e:	f7f7 fea7 	bl	80001e0 <memchr>
 8008492:	2800      	cmp	r0, #0
 8008494:	d038      	beq.n	8008508 <_svfiprintf_r+0x1c8>
 8008496:	4b24      	ldr	r3, [pc, #144]	; (8008528 <_svfiprintf_r+0x1e8>)
 8008498:	bb13      	cbnz	r3, 80084e0 <_svfiprintf_r+0x1a0>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	3307      	adds	r3, #7
 800849e:	f023 0307 	bic.w	r3, r3, #7
 80084a2:	3308      	adds	r3, #8
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	444b      	add	r3, r9
 80084aa:	9309      	str	r3, [sp, #36]	; 0x24
 80084ac:	e76d      	b.n	800838a <_svfiprintf_r+0x4a>
 80084ae:	fb05 3202 	mla	r2, r5, r2, r3
 80084b2:	2001      	movs	r0, #1
 80084b4:	460f      	mov	r7, r1
 80084b6:	e7a6      	b.n	8008406 <_svfiprintf_r+0xc6>
 80084b8:	2300      	movs	r3, #0
 80084ba:	3701      	adds	r7, #1
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	4619      	mov	r1, r3
 80084c0:	250a      	movs	r5, #10
 80084c2:	4638      	mov	r0, r7
 80084c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c8:	3a30      	subs	r2, #48	; 0x30
 80084ca:	2a09      	cmp	r2, #9
 80084cc:	d903      	bls.n	80084d6 <_svfiprintf_r+0x196>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0c8      	beq.n	8008464 <_svfiprintf_r+0x124>
 80084d2:	9105      	str	r1, [sp, #20]
 80084d4:	e7c6      	b.n	8008464 <_svfiprintf_r+0x124>
 80084d6:	fb05 2101 	mla	r1, r5, r1, r2
 80084da:	2301      	movs	r3, #1
 80084dc:	4607      	mov	r7, r0
 80084de:	e7f0      	b.n	80084c2 <_svfiprintf_r+0x182>
 80084e0:	ab03      	add	r3, sp, #12
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	4622      	mov	r2, r4
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <_svfiprintf_r+0x1ec>)
 80084e8:	a904      	add	r1, sp, #16
 80084ea:	4640      	mov	r0, r8
 80084ec:	f3af 8000 	nop.w
 80084f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084f4:	4681      	mov	r9, r0
 80084f6:	d1d6      	bne.n	80084a6 <_svfiprintf_r+0x166>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	065b      	lsls	r3, r3, #25
 80084fc:	f53f af35 	bmi.w	800836a <_svfiprintf_r+0x2a>
 8008500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008502:	b01d      	add	sp, #116	; 0x74
 8008504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008508:	ab03      	add	r3, sp, #12
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4622      	mov	r2, r4
 800850e:	4b07      	ldr	r3, [pc, #28]	; (800852c <_svfiprintf_r+0x1ec>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	4640      	mov	r0, r8
 8008514:	f000 f882 	bl	800861c <_printf_i>
 8008518:	e7ea      	b.n	80084f0 <_svfiprintf_r+0x1b0>
 800851a:	bf00      	nop
 800851c:	08008aa4 	.word	0x08008aa4
 8008520:	08008aaa 	.word	0x08008aaa
 8008524:	08008aae 	.word	0x08008aae
 8008528:	00000000 	.word	0x00000000
 800852c:	0800828d 	.word	0x0800828d

08008530 <_printf_common>:
 8008530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	4691      	mov	r9, r2
 8008536:	461f      	mov	r7, r3
 8008538:	688a      	ldr	r2, [r1, #8]
 800853a:	690b      	ldr	r3, [r1, #16]
 800853c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008540:	4293      	cmp	r3, r2
 8008542:	bfb8      	it	lt
 8008544:	4613      	movlt	r3, r2
 8008546:	f8c9 3000 	str.w	r3, [r9]
 800854a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800854e:	4606      	mov	r6, r0
 8008550:	460c      	mov	r4, r1
 8008552:	b112      	cbz	r2, 800855a <_printf_common+0x2a>
 8008554:	3301      	adds	r3, #1
 8008556:	f8c9 3000 	str.w	r3, [r9]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	0699      	lsls	r1, r3, #26
 800855e:	bf42      	ittt	mi
 8008560:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008564:	3302      	addmi	r3, #2
 8008566:	f8c9 3000 	strmi.w	r3, [r9]
 800856a:	6825      	ldr	r5, [r4, #0]
 800856c:	f015 0506 	ands.w	r5, r5, #6
 8008570:	d107      	bne.n	8008582 <_printf_common+0x52>
 8008572:	f104 0a19 	add.w	sl, r4, #25
 8008576:	68e3      	ldr	r3, [r4, #12]
 8008578:	f8d9 2000 	ldr.w	r2, [r9]
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	42ab      	cmp	r3, r5
 8008580:	dc28      	bgt.n	80085d4 <_printf_common+0xa4>
 8008582:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	3300      	adds	r3, #0
 800858a:	bf18      	it	ne
 800858c:	2301      	movne	r3, #1
 800858e:	0692      	lsls	r2, r2, #26
 8008590:	d42d      	bmi.n	80085ee <_printf_common+0xbe>
 8008592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008596:	4639      	mov	r1, r7
 8008598:	4630      	mov	r0, r6
 800859a:	47c0      	blx	r8
 800859c:	3001      	adds	r0, #1
 800859e:	d020      	beq.n	80085e2 <_printf_common+0xb2>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	68e5      	ldr	r5, [r4, #12]
 80085a4:	f8d9 2000 	ldr.w	r2, [r9]
 80085a8:	f003 0306 	and.w	r3, r3, #6
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	bf08      	it	eq
 80085b0:	1aad      	subeq	r5, r5, r2
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	bf0c      	ite	eq
 80085b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085bc:	2500      	movne	r5, #0
 80085be:	4293      	cmp	r3, r2
 80085c0:	bfc4      	itt	gt
 80085c2:	1a9b      	subgt	r3, r3, r2
 80085c4:	18ed      	addgt	r5, r5, r3
 80085c6:	f04f 0900 	mov.w	r9, #0
 80085ca:	341a      	adds	r4, #26
 80085cc:	454d      	cmp	r5, r9
 80085ce:	d11a      	bne.n	8008606 <_printf_common+0xd6>
 80085d0:	2000      	movs	r0, #0
 80085d2:	e008      	b.n	80085e6 <_printf_common+0xb6>
 80085d4:	2301      	movs	r3, #1
 80085d6:	4652      	mov	r2, sl
 80085d8:	4639      	mov	r1, r7
 80085da:	4630      	mov	r0, r6
 80085dc:	47c0      	blx	r8
 80085de:	3001      	adds	r0, #1
 80085e0:	d103      	bne.n	80085ea <_printf_common+0xba>
 80085e2:	f04f 30ff 	mov.w	r0, #4294967295
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ea:	3501      	adds	r5, #1
 80085ec:	e7c3      	b.n	8008576 <_printf_common+0x46>
 80085ee:	18e1      	adds	r1, r4, r3
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	2030      	movs	r0, #48	; 0x30
 80085f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f8:	4422      	add	r2, r4
 80085fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008602:	3302      	adds	r3, #2
 8008604:	e7c5      	b.n	8008592 <_printf_common+0x62>
 8008606:	2301      	movs	r3, #1
 8008608:	4622      	mov	r2, r4
 800860a:	4639      	mov	r1, r7
 800860c:	4630      	mov	r0, r6
 800860e:	47c0      	blx	r8
 8008610:	3001      	adds	r0, #1
 8008612:	d0e6      	beq.n	80085e2 <_printf_common+0xb2>
 8008614:	f109 0901 	add.w	r9, r9, #1
 8008618:	e7d8      	b.n	80085cc <_printf_common+0x9c>
	...

0800861c <_printf_i>:
 800861c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008620:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008624:	460c      	mov	r4, r1
 8008626:	7e09      	ldrb	r1, [r1, #24]
 8008628:	b085      	sub	sp, #20
 800862a:	296e      	cmp	r1, #110	; 0x6e
 800862c:	4617      	mov	r7, r2
 800862e:	4606      	mov	r6, r0
 8008630:	4698      	mov	r8, r3
 8008632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008634:	f000 80b3 	beq.w	800879e <_printf_i+0x182>
 8008638:	d822      	bhi.n	8008680 <_printf_i+0x64>
 800863a:	2963      	cmp	r1, #99	; 0x63
 800863c:	d036      	beq.n	80086ac <_printf_i+0x90>
 800863e:	d80a      	bhi.n	8008656 <_printf_i+0x3a>
 8008640:	2900      	cmp	r1, #0
 8008642:	f000 80b9 	beq.w	80087b8 <_printf_i+0x19c>
 8008646:	2958      	cmp	r1, #88	; 0x58
 8008648:	f000 8083 	beq.w	8008752 <_printf_i+0x136>
 800864c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008650:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008654:	e032      	b.n	80086bc <_printf_i+0xa0>
 8008656:	2964      	cmp	r1, #100	; 0x64
 8008658:	d001      	beq.n	800865e <_printf_i+0x42>
 800865a:	2969      	cmp	r1, #105	; 0x69
 800865c:	d1f6      	bne.n	800864c <_printf_i+0x30>
 800865e:	6820      	ldr	r0, [r4, #0]
 8008660:	6813      	ldr	r3, [r2, #0]
 8008662:	0605      	lsls	r5, r0, #24
 8008664:	f103 0104 	add.w	r1, r3, #4
 8008668:	d52a      	bpl.n	80086c0 <_printf_i+0xa4>
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6011      	str	r1, [r2, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	da03      	bge.n	800867a <_printf_i+0x5e>
 8008672:	222d      	movs	r2, #45	; 0x2d
 8008674:	425b      	negs	r3, r3
 8008676:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800867a:	486f      	ldr	r0, [pc, #444]	; (8008838 <_printf_i+0x21c>)
 800867c:	220a      	movs	r2, #10
 800867e:	e039      	b.n	80086f4 <_printf_i+0xd8>
 8008680:	2973      	cmp	r1, #115	; 0x73
 8008682:	f000 809d 	beq.w	80087c0 <_printf_i+0x1a4>
 8008686:	d808      	bhi.n	800869a <_printf_i+0x7e>
 8008688:	296f      	cmp	r1, #111	; 0x6f
 800868a:	d020      	beq.n	80086ce <_printf_i+0xb2>
 800868c:	2970      	cmp	r1, #112	; 0x70
 800868e:	d1dd      	bne.n	800864c <_printf_i+0x30>
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	f043 0320 	orr.w	r3, r3, #32
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	e003      	b.n	80086a2 <_printf_i+0x86>
 800869a:	2975      	cmp	r1, #117	; 0x75
 800869c:	d017      	beq.n	80086ce <_printf_i+0xb2>
 800869e:	2978      	cmp	r1, #120	; 0x78
 80086a0:	d1d4      	bne.n	800864c <_printf_i+0x30>
 80086a2:	2378      	movs	r3, #120	; 0x78
 80086a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086a8:	4864      	ldr	r0, [pc, #400]	; (800883c <_printf_i+0x220>)
 80086aa:	e055      	b.n	8008758 <_printf_i+0x13c>
 80086ac:	6813      	ldr	r3, [r2, #0]
 80086ae:	1d19      	adds	r1, r3, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6011      	str	r1, [r2, #0]
 80086b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086bc:	2301      	movs	r3, #1
 80086be:	e08c      	b.n	80087da <_printf_i+0x1be>
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6011      	str	r1, [r2, #0]
 80086c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086c8:	bf18      	it	ne
 80086ca:	b21b      	sxthne	r3, r3
 80086cc:	e7cf      	b.n	800866e <_printf_i+0x52>
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	6825      	ldr	r5, [r4, #0]
 80086d2:	1d18      	adds	r0, r3, #4
 80086d4:	6010      	str	r0, [r2, #0]
 80086d6:	0628      	lsls	r0, r5, #24
 80086d8:	d501      	bpl.n	80086de <_printf_i+0xc2>
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	e002      	b.n	80086e4 <_printf_i+0xc8>
 80086de:	0668      	lsls	r0, r5, #25
 80086e0:	d5fb      	bpl.n	80086da <_printf_i+0xbe>
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	4854      	ldr	r0, [pc, #336]	; (8008838 <_printf_i+0x21c>)
 80086e6:	296f      	cmp	r1, #111	; 0x6f
 80086e8:	bf14      	ite	ne
 80086ea:	220a      	movne	r2, #10
 80086ec:	2208      	moveq	r2, #8
 80086ee:	2100      	movs	r1, #0
 80086f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086f4:	6865      	ldr	r5, [r4, #4]
 80086f6:	60a5      	str	r5, [r4, #8]
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	f2c0 8095 	blt.w	8008828 <_printf_i+0x20c>
 80086fe:	6821      	ldr	r1, [r4, #0]
 8008700:	f021 0104 	bic.w	r1, r1, #4
 8008704:	6021      	str	r1, [r4, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d13d      	bne.n	8008786 <_printf_i+0x16a>
 800870a:	2d00      	cmp	r5, #0
 800870c:	f040 808e 	bne.w	800882c <_printf_i+0x210>
 8008710:	4665      	mov	r5, ip
 8008712:	2a08      	cmp	r2, #8
 8008714:	d10b      	bne.n	800872e <_printf_i+0x112>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	07db      	lsls	r3, r3, #31
 800871a:	d508      	bpl.n	800872e <_printf_i+0x112>
 800871c:	6923      	ldr	r3, [r4, #16]
 800871e:	6862      	ldr	r2, [r4, #4]
 8008720:	429a      	cmp	r2, r3
 8008722:	bfde      	ittt	le
 8008724:	2330      	movle	r3, #48	; 0x30
 8008726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800872a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800872e:	ebac 0305 	sub.w	r3, ip, r5
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	f8cd 8000 	str.w	r8, [sp]
 8008738:	463b      	mov	r3, r7
 800873a:	aa03      	add	r2, sp, #12
 800873c:	4621      	mov	r1, r4
 800873e:	4630      	mov	r0, r6
 8008740:	f7ff fef6 	bl	8008530 <_printf_common>
 8008744:	3001      	adds	r0, #1
 8008746:	d14d      	bne.n	80087e4 <_printf_i+0x1c8>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	b005      	add	sp, #20
 800874e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008752:	4839      	ldr	r0, [pc, #228]	; (8008838 <_printf_i+0x21c>)
 8008754:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008758:	6813      	ldr	r3, [r2, #0]
 800875a:	6821      	ldr	r1, [r4, #0]
 800875c:	1d1d      	adds	r5, r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6015      	str	r5, [r2, #0]
 8008762:	060a      	lsls	r2, r1, #24
 8008764:	d50b      	bpl.n	800877e <_printf_i+0x162>
 8008766:	07ca      	lsls	r2, r1, #31
 8008768:	bf44      	itt	mi
 800876a:	f041 0120 	orrmi.w	r1, r1, #32
 800876e:	6021      	strmi	r1, [r4, #0]
 8008770:	b91b      	cbnz	r3, 800877a <_printf_i+0x15e>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	f022 0220 	bic.w	r2, r2, #32
 8008778:	6022      	str	r2, [r4, #0]
 800877a:	2210      	movs	r2, #16
 800877c:	e7b7      	b.n	80086ee <_printf_i+0xd2>
 800877e:	064d      	lsls	r5, r1, #25
 8008780:	bf48      	it	mi
 8008782:	b29b      	uxthmi	r3, r3
 8008784:	e7ef      	b.n	8008766 <_printf_i+0x14a>
 8008786:	4665      	mov	r5, ip
 8008788:	fbb3 f1f2 	udiv	r1, r3, r2
 800878c:	fb02 3311 	mls	r3, r2, r1, r3
 8008790:	5cc3      	ldrb	r3, [r0, r3]
 8008792:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008796:	460b      	mov	r3, r1
 8008798:	2900      	cmp	r1, #0
 800879a:	d1f5      	bne.n	8008788 <_printf_i+0x16c>
 800879c:	e7b9      	b.n	8008712 <_printf_i+0xf6>
 800879e:	6813      	ldr	r3, [r2, #0]
 80087a0:	6825      	ldr	r5, [r4, #0]
 80087a2:	6961      	ldr	r1, [r4, #20]
 80087a4:	1d18      	adds	r0, r3, #4
 80087a6:	6010      	str	r0, [r2, #0]
 80087a8:	0628      	lsls	r0, r5, #24
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	d501      	bpl.n	80087b2 <_printf_i+0x196>
 80087ae:	6019      	str	r1, [r3, #0]
 80087b0:	e002      	b.n	80087b8 <_printf_i+0x19c>
 80087b2:	066a      	lsls	r2, r5, #25
 80087b4:	d5fb      	bpl.n	80087ae <_printf_i+0x192>
 80087b6:	8019      	strh	r1, [r3, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	4665      	mov	r5, ip
 80087be:	e7b9      	b.n	8008734 <_printf_i+0x118>
 80087c0:	6813      	ldr	r3, [r2, #0]
 80087c2:	1d19      	adds	r1, r3, #4
 80087c4:	6011      	str	r1, [r2, #0]
 80087c6:	681d      	ldr	r5, [r3, #0]
 80087c8:	6862      	ldr	r2, [r4, #4]
 80087ca:	2100      	movs	r1, #0
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7f7 fd07 	bl	80001e0 <memchr>
 80087d2:	b108      	cbz	r0, 80087d8 <_printf_i+0x1bc>
 80087d4:	1b40      	subs	r0, r0, r5
 80087d6:	6060      	str	r0, [r4, #4]
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2300      	movs	r3, #0
 80087de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e2:	e7a7      	b.n	8008734 <_printf_i+0x118>
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	462a      	mov	r2, r5
 80087e8:	4639      	mov	r1, r7
 80087ea:	4630      	mov	r0, r6
 80087ec:	47c0      	blx	r8
 80087ee:	3001      	adds	r0, #1
 80087f0:	d0aa      	beq.n	8008748 <_printf_i+0x12c>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	079b      	lsls	r3, r3, #30
 80087f6:	d413      	bmi.n	8008820 <_printf_i+0x204>
 80087f8:	68e0      	ldr	r0, [r4, #12]
 80087fa:	9b03      	ldr	r3, [sp, #12]
 80087fc:	4298      	cmp	r0, r3
 80087fe:	bfb8      	it	lt
 8008800:	4618      	movlt	r0, r3
 8008802:	e7a3      	b.n	800874c <_printf_i+0x130>
 8008804:	2301      	movs	r3, #1
 8008806:	464a      	mov	r2, r9
 8008808:	4639      	mov	r1, r7
 800880a:	4630      	mov	r0, r6
 800880c:	47c0      	blx	r8
 800880e:	3001      	adds	r0, #1
 8008810:	d09a      	beq.n	8008748 <_printf_i+0x12c>
 8008812:	3501      	adds	r5, #1
 8008814:	68e3      	ldr	r3, [r4, #12]
 8008816:	9a03      	ldr	r2, [sp, #12]
 8008818:	1a9b      	subs	r3, r3, r2
 800881a:	42ab      	cmp	r3, r5
 800881c:	dcf2      	bgt.n	8008804 <_printf_i+0x1e8>
 800881e:	e7eb      	b.n	80087f8 <_printf_i+0x1dc>
 8008820:	2500      	movs	r5, #0
 8008822:	f104 0919 	add.w	r9, r4, #25
 8008826:	e7f5      	b.n	8008814 <_printf_i+0x1f8>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1ac      	bne.n	8008786 <_printf_i+0x16a>
 800882c:	7803      	ldrb	r3, [r0, #0]
 800882e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008832:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008836:	e76c      	b.n	8008712 <_printf_i+0xf6>
 8008838:	08008ab5 	.word	0x08008ab5
 800883c:	08008ac6 	.word	0x08008ac6

08008840 <memmove>:
 8008840:	4288      	cmp	r0, r1
 8008842:	b510      	push	{r4, lr}
 8008844:	eb01 0302 	add.w	r3, r1, r2
 8008848:	d807      	bhi.n	800885a <memmove+0x1a>
 800884a:	1e42      	subs	r2, r0, #1
 800884c:	4299      	cmp	r1, r3
 800884e:	d00a      	beq.n	8008866 <memmove+0x26>
 8008850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008854:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008858:	e7f8      	b.n	800884c <memmove+0xc>
 800885a:	4283      	cmp	r3, r0
 800885c:	d9f5      	bls.n	800884a <memmove+0xa>
 800885e:	1881      	adds	r1, r0, r2
 8008860:	1ad2      	subs	r2, r2, r3
 8008862:	42d3      	cmn	r3, r2
 8008864:	d100      	bne.n	8008868 <memmove+0x28>
 8008866:	bd10      	pop	{r4, pc}
 8008868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800886c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008870:	e7f7      	b.n	8008862 <memmove+0x22>

08008872 <_realloc_r>:
 8008872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008874:	4607      	mov	r7, r0
 8008876:	4614      	mov	r4, r2
 8008878:	460e      	mov	r6, r1
 800887a:	b921      	cbnz	r1, 8008886 <_realloc_r+0x14>
 800887c:	4611      	mov	r1, r2
 800887e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008882:	f7ff bc77 	b.w	8008174 <_malloc_r>
 8008886:	b922      	cbnz	r2, 8008892 <_realloc_r+0x20>
 8008888:	f7ff fc26 	bl	80080d8 <_free_r>
 800888c:	4625      	mov	r5, r4
 800888e:	4628      	mov	r0, r5
 8008890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008892:	f000 f814 	bl	80088be <_malloc_usable_size_r>
 8008896:	42a0      	cmp	r0, r4
 8008898:	d20f      	bcs.n	80088ba <_realloc_r+0x48>
 800889a:	4621      	mov	r1, r4
 800889c:	4638      	mov	r0, r7
 800889e:	f7ff fc69 	bl	8008174 <_malloc_r>
 80088a2:	4605      	mov	r5, r0
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d0f2      	beq.n	800888e <_realloc_r+0x1c>
 80088a8:	4631      	mov	r1, r6
 80088aa:	4622      	mov	r2, r4
 80088ac:	f7ff fc00 	bl	80080b0 <memcpy>
 80088b0:	4631      	mov	r1, r6
 80088b2:	4638      	mov	r0, r7
 80088b4:	f7ff fc10 	bl	80080d8 <_free_r>
 80088b8:	e7e9      	b.n	800888e <_realloc_r+0x1c>
 80088ba:	4635      	mov	r5, r6
 80088bc:	e7e7      	b.n	800888e <_realloc_r+0x1c>

080088be <_malloc_usable_size_r>:
 80088be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c2:	1f18      	subs	r0, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bfbc      	itt	lt
 80088c8:	580b      	ldrlt	r3, [r1, r0]
 80088ca:	18c0      	addlt	r0, r0, r3
 80088cc:	4770      	bx	lr
	...

080088d0 <_init>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	bf00      	nop
 80088d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d6:	bc08      	pop	{r3}
 80088d8:	469e      	mov	lr, r3
 80088da:	4770      	bx	lr

080088dc <_fini>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	bf00      	nop
 80088e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e2:	bc08      	pop	{r3}
 80088e4:	469e      	mov	lr, r3
 80088e6:	4770      	bx	lr
